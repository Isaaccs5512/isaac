/* soapStub.h
   Generated by gSOAP 2.8.17r from webservice.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#pragma once
#include <list>
#ifndef WITH_OPENSSL
#define WITH_OPENSSL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 20817
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ns__RegisterStatus
#define SOAP_TYPE_ns__RegisterStatus (8)
/* ns:RegisterStatus */
enum ns__RegisterStatus { OffLine = 0, OnLine = 1 };
#endif

#ifndef SOAP_TYPE_ns__ListModifyType
#define SOAP_TYPE_ns__ListModifyType (9)
/* ns:ListModifyType */
enum ns__ListModifyType { Increased = 0, Decrease = 1, Replace = 2 };
#endif

#ifndef SOAP_TYPE_ns__AccountType
#define SOAP_TYPE_ns__AccountType (10)
/* ns:AccountType */
enum ns__AccountType { Dispatcher = 0, Terminal = 1, Record = 2, MediaGateway = 3 };
#endif

#ifndef SOAP_TYPE_ns__CallPrivilege
#define SOAP_TYPE_ns__CallPrivilege (11)
/* ns:CallPrivilege */
enum ns__CallPrivilege { CallForbid = 0, CallFreedom = 1, CallPolicy = 2 };
#endif

#ifndef SOAP_TYPE_ns__TokenPrivilege
#define SOAP_TYPE_ns__TokenPrivilege (12)
/* ns:TokenPrivilege */
enum ns__TokenPrivilege { TokenForbid = 0, TokenFreedom = 1, TokenPolicy = 2 };
#endif

#ifndef SOAP_TYPE_ns__SessionStatus
#define SOAP_TYPE_ns__SessionStatus (13)
/* ns:SessionStatus */
enum ns__SessionStatus { IDLE = 0, InGroup = 1, Talking = 2 };
#endif

#ifndef SOAP_TYPE_ns__RecordType
#define SOAP_TYPE_ns__RecordType (14)
/* ns:RecordType */
enum ns__RecordType { DontRecord = 0, AutoRecord = 1, ManualRecord = 2 };
#endif

#ifndef SOAP_TYPE_ns__RecordStatus
#define SOAP_TYPE_ns__RecordStatus (15)
/* ns:RecordStatus */
enum ns__RecordStatus { RecordStop = 0, RecordStart = 1 };
#endif

#ifndef SOAP_TYPE_ns__AlertStatus
#define SOAP_TYPE_ns__AlertStatus (16)
/* ns:AlertStatus */
enum ns__AlertStatus { AlertActive = 0, AlertOver = 1 };
#endif

#ifndef SOAP_TYPE_ns__AlertLevel
#define SOAP_TYPE_ns__AlertLevel (17)
/* ns:AlertLevel */
enum ns__AlertLevel { Exigency = 0, Importance = 1, Subordination = 2, Ordinary = 3 };
#endif

#ifndef SOAP_TYPE_ns__EntityNotifyType
#define SOAP_TYPE_ns__EntityNotifyType (18)
/* ns:EntityNotifyType */
enum ns__EntityNotifyType { Created = 0, Modify = 1, Update = 2, Deleted = 3 };
#endif

#ifndef SOAP_TYPE_ns__ProfessionStatus
#define SOAP_TYPE_ns__ProfessionStatus (19)
/* ns:ProfessionStatus */
enum ns__ProfessionStatus { Standby = 0, Duty = 1, Turnout = 2, Training = 3 };
#endif

#ifndef SOAP_TYPE_ns__SubscribeType
#define SOAP_TYPE_ns__SubscribeType (20)
/* ns:SubscribeType */
enum ns__SubscribeType { Gis = 0, Status = 1, Profession = 2, Gis_status = 3, Gis_profession = 4, Status_profession = 5, Gis_status_profession = 6 };
#endif

#ifndef SOAP_TYPE_ns__EntityType
#define SOAP_TYPE_ns__EntityType (21)
/* ns:EntityType */
enum ns__EntityType { UNIT = 0, ACCOUNT = 1, USER = 2, GROUP = 3 };
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns__Entity
#define SOAP_TYPE_ns__Entity (22)
/* ns:Entity */
class SOAP_CMAC ns__Entity
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string parentid;	/* required element of type xsd:string */
	enum ns__EntityType entity_type;	/* required element of type ns:EntityType */
public:
	virtual int soap_type() const { return 22; } /* = unique type id SOAP_TYPE_ns__Entity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Entity() { ns__Entity::soap_default(NULL); }
	virtual ~ns__Entity() { }
};
#endif

#ifndef SOAP_TYPE_ns__Address
#define SOAP_TYPE_ns__Address (24)
/* ns:Address */
class SOAP_CMAC ns__Address
{
public:
	std::string ip;	/* required element of type xsd:string */
	std::string port;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 24; } /* = unique type id SOAP_TYPE_ns__Address */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Address() { ns__Address::soap_default(NULL); }
	virtual ~ns__Address() { }
};
#endif

#ifndef SOAP_TYPE_ns__User
#define SOAP_TYPE_ns__User (25)
/* ns:User */
class SOAP_CMAC ns__User
{
public:
	ns__Entity base;	/* required element of type ns:Entity */
	ns__Entity account;	/* required element of type ns:Entity */
	enum ns__RegisterStatus status;	/* required element of type ns:RegisterStatus */
public:
	virtual int soap_type() const { return 25; } /* = unique type id SOAP_TYPE_ns__User */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__User() { ns__User::soap_default(NULL); }
	virtual ~ns__User() { }
};
#endif

#ifndef SOAP_TYPE_ns__Account
#define SOAP_TYPE_ns__Account (26)
/* ns:Account */
class SOAP_CMAC ns__Account
{
public:
	ns__Entity base;	/* required element of type ns:Entity */
	std::string number;	/* required element of type xsd:string */
	std::string short_number;	/* required element of type xsd:string */
	std::string priority;	/* required element of type xsd:string */
	enum ns__CallPrivilege call_privilege;	/* required element of type ns:CallPrivilege */
	enum ns__TokenPrivilege token_privilege;	/* required element of type ns:TokenPrivilege */
	enum ns__RegisterStatus status;	/* required element of type ns:RegisterStatus */
	enum ns__RegisterStatus sip_status;	/* required element of type ns:RegisterStatus */
public:
	virtual int soap_type() const { return 26; } /* = unique type id SOAP_TYPE_ns__Account */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Account() { ns__Account::soap_default(NULL); }
	virtual ~ns__Account() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Login_Response
#define SOAP_TYPE_ns__Dispatch_Login_Response (27)
/* ns:Dispatch-Login-Response */
class SOAP_CMAC ns__Dispatch_Login_Response
{
public:
	std::string session_id;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string id;	/* required element of type xsd:string */
	std::string parentid;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 27; } /* = unique type id SOAP_TYPE_ns__Dispatch_Login_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Login_Response() { ns__Dispatch_Login_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Login_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Unit
#define SOAP_TYPE_ns__Unit (29)
/* ns:Unit */
class SOAP_CMAC ns__Unit
{
public:
	ns__Entity base;	/* required element of type ns:Entity */
	std::list<ns__Entity >members;	/* optional element of type ns:Entity */
	std::string size;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 29; } /* = unique type id SOAP_TYPE_ns__Unit */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Unit() { ns__Unit::soap_default(NULL); }
	virtual ~ns__Unit() { }
};
#endif

#ifndef SOAP_TYPE_ns__Participant
#define SOAP_TYPE_ns__Participant (31)
/* ns:Participant */
class SOAP_CMAC ns__Participant
{
public:
	ns__Entity account;	/* required element of type ns:Entity */
	std::string priority;	/* required element of type xsd:string */
	enum ns__CallPrivilege call_privilege;	/* required element of type ns:CallPrivilege */
	enum ns__TokenPrivilege token_privilege;	/* required element of type ns:TokenPrivilege */
	enum ns__SessionStatus status;	/* required element of type ns:SessionStatus */
public:
	virtual int soap_type() const { return 31; } /* = unique type id SOAP_TYPE_ns__Participant */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Participant() { ns__Participant::soap_default(NULL); }
	virtual ~ns__Participant() { }
};
#endif

#ifndef SOAP_TYPE_ns__Group
#define SOAP_TYPE_ns__Group (32)
/* ns:Group */
class SOAP_CMAC ns__Group
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string owner_id;	/* required element of type xsd:string */
	std::string number;	/* required element of type xsd:string */
	std::string short_number;	/* required element of type xsd:string */
	std::list<ns__Participant >participants;	/* optional element of type ns:Participant */
	std::string size;	/* required element of type xsd:string */
	enum ns__RecordType record_type;	/* required element of type ns:RecordType */
	enum ns__RecordStatus record_status;	/* required element of type ns:RecordStatus */
public:
	virtual int soap_type() const { return 32; } /* = unique type id SOAP_TYPE_ns__Group */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Group() { ns__Group::soap_default(NULL); }
	virtual ~ns__Group() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Append_Group_Response
#define SOAP_TYPE_ns__Dispatch_Append_Group_Response (34)
/* ns:Dispatch-Append-Group-Response */
class SOAP_CMAC ns__Dispatch_Append_Group_Response
{
public:
	ns__Group data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:Group */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 34; } /* = unique type id SOAP_TYPE_ns__Dispatch_Append_Group_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Append_Group_Response() { ns__Dispatch_Append_Group_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Append_Group_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Modify_Group_Response
#define SOAP_TYPE_ns__Dispatch_Modify_Group_Response (35)
/* ns:Dispatch-Modify-Group-Response */
class SOAP_CMAC ns__Dispatch_Modify_Group_Response
{
public:
	ns__Group data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:Group */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 35; } /* = unique type id SOAP_TYPE_ns__Dispatch_Modify_Group_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Modify_Group_Response() { ns__Dispatch_Modify_Group_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Modify_Group_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Alert
#define SOAP_TYPE_ns__Alert (36)
/* ns:Alert */
class SOAP_CMAC ns__Alert
{
public:
	ns__Entity base;	/* required element of type ns:Entity */
	std::string group_id;	/* required element of type xsd:string */
	std::string describe;	/* required element of type xsd:string */
	enum ns__AlertLevel level;	/* required element of type ns:AlertLevel */
	std::string alram_time;	/* required element of type xsd:string */
	std::string use_cars;	/* required element of type xsd:string */
	std::string create_time;	/* required element of type xsd:string */
	enum ns__AlertStatus status;	/* required element of type ns:AlertStatus */
public:
	virtual int soap_type() const { return 36; } /* = unique type id SOAP_TYPE_ns__Alert */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Alert() { ns__Alert::soap_default(NULL); }
	virtual ~ns__Alert() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Append_Alert_Request_Response
#define SOAP_TYPE_ns__Dispatch_Append_Alert_Request_Response (37)
/* ns:Dispatch-Append-Alert-Request-Response */
class SOAP_CMAC ns__Dispatch_Append_Alert_Request_Response
{
public:
	ns__Alert data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:Alert */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 37; } /* = unique type id SOAP_TYPE_ns__Dispatch_Append_Alert_Request_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Append_Alert_Request_Response() { ns__Dispatch_Append_Alert_Request_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Append_Alert_Request_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Organization
#define SOAP_TYPE_ns__Organization (38)
/* ns:Organization */
class SOAP_CMAC ns__Organization
{
public:
	ns__Entity base;	/* required element of type ns:Entity */
	ns__Entity members;	/* required element of type ns:Entity */
public:
	virtual int soap_type() const { return 38; } /* = unique type id SOAP_TYPE_ns__Organization */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Organization() { ns__Organization::soap_default(NULL); }
	virtual ~ns__Organization() { }
};
#endif

#ifndef SOAP_TYPE_ns__EntityData
#define SOAP_TYPE_ns__EntityData (39)
/* ns:EntityData */
class SOAP_CMAC ns__EntityData
{
public:
	ns__Entity id;	/* required element of type ns:Entity */
	ns__Unit unit;	/* required element of type ns:Unit */
	ns__Account account;	/* required element of type ns:Account */
	ns__User user;	/* required element of type ns:User */
	ns__Group group;	/* required element of type ns:Group */
	ns__Alert alert;	/* required element of type ns:Alert */
	ns__Organization organization;	/* required element of type ns:Organization */
public:
	virtual int soap_type() const { return 39; } /* = unique type id SOAP_TYPE_ns__EntityData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__EntityData() { ns__EntityData::soap_default(NULL); }
	virtual ~ns__EntityData() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Entity_Request_Response
#define SOAP_TYPE_ns__Dispatch_Entity_Request_Response (40)
/* ns:Dispatch-Entity-Request-Response */
class SOAP_CMAC ns__Dispatch_Entity_Request_Response
{
public:
	ns__EntityData data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:EntityData */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 40; } /* = unique type id SOAP_TYPE_ns__Dispatch_Entity_Request_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Entity_Request_Response() { ns__Dispatch_Entity_Request_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Entity_Request_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Entity_Nofitication_Response
#define SOAP_TYPE_ns__Dispatch_Entity_Nofitication_Response (41)
/* ns:Dispatch-Entity-Nofitication-Response */
class SOAP_CMAC ns__Dispatch_Entity_Nofitication_Response
{
public:
	enum ns__EntityNotifyType notify_type;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:EntityNotifyType */
	ns__EntityData data;	/* required element of type ns:EntityData */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 41; } /* = unique type id SOAP_TYPE_ns__Dispatch_Entity_Nofitication_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Entity_Nofitication_Response() { ns__Dispatch_Entity_Nofitication_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Entity_Nofitication_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Entity_Status_Notification
#define SOAP_TYPE_ns__Entity_Status_Notification (42)
/* ns:Entity-Status-Notification */
class SOAP_CMAC ns__Entity_Status_Notification
{
public:
	ns__Entity id;	/* required element of type ns:Entity */
	enum ns__RegisterStatus status;	/* required element of type ns:RegisterStatus */
	enum ns__RegisterStatus sip_status;	/* required element of type ns:RegisterStatus */
public:
	virtual int soap_type() const { return 42; } /* = unique type id SOAP_TYPE_ns__Entity_Status_Notification */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Entity_Status_Notification() { ns__Entity_Status_Notification::soap_default(NULL); }
	virtual ~ns__Entity_Status_Notification() { }
};
#endif

#ifndef SOAP_TYPE_ns__Modify_Participant
#define SOAP_TYPE_ns__Modify_Participant (43)
/* ns:Modify-Participant */
class SOAP_CMAC ns__Modify_Participant
{
public:
	ns__Entity group_id;	/* required element of type ns:Entity */
	enum ns__ListModifyType modify_type;	/* required element of type ns:ListModifyType */
	std::list<ns__Participant >participants;	/* optional element of type ns:Participant */
	std::string size;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 43; } /* = unique type id SOAP_TYPE_ns__Modify_Participant */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Modify_Participant() { ns__Modify_Participant::soap_default(NULL); }
	virtual ~ns__Modify_Participant() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Modify_Participants_Response
#define SOAP_TYPE_ns__Dispatch_Modify_Participants_Response (44)
/* ns:Dispatch-Modify-Participants-Response */
class SOAP_CMAC ns__Dispatch_Modify_Participants_Response
{
public:
	ns__Modify_Participant data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:Modify-Participant */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 44; } /* = unique type id SOAP_TYPE_ns__Dispatch_Modify_Participants_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Modify_Participants_Response() { ns__Dispatch_Modify_Participants_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Modify_Participants_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification_Response
#define SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification_Response (45)
/* ns:Dispatch-Dispatch-Participants-Notification-Response */
class SOAP_CMAC ns__Dispatch_Dispatch_Participants_Notification_Response
{
public:
	ns__Modify_Participant data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:Modify-Participant */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 45; } /* = unique type id SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Dispatch_Participants_Notification_Response() { ns__Dispatch_Dispatch_Participants_Notification_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Dispatch_Participants_Notification_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication_Response
#define SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication_Response (46)
/* ns:Dispatch-Join-Group-Request-Nofitication-Response */
class SOAP_CMAC ns__Dispatch_Join_Group_Request_Nofitication_Response
{
public:
	ns__Entity group_id;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:Entity */
	ns__Entity account_id;	/* required element of type ns:Entity */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 46; } /* = unique type id SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Join_Group_Request_Nofitication_Response() { ns__Dispatch_Join_Group_Request_Nofitication_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Join_Group_Request_Nofitication_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Participant_Status_Notification_Response
#define SOAP_TYPE_ns__Dispatch_Participant_Status_Notification_Response (47)
/* ns:Dispatch-Participant-Status-Notification-Response */
class SOAP_CMAC ns__Dispatch_Participant_Status_Notification_Response
{
public:
	ns__Entity group_id;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:Entity */
	ns__Entity account_id;	/* required element of type ns:Entity */
	enum ns__SessionStatus status;	/* required element of type ns:SessionStatus */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 47; } /* = unique type id SOAP_TYPE_ns__Dispatch_Participant_Status_Notification_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Participant_Status_Notification_Response() { ns__Dispatch_Participant_Status_Notification_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Participant_Status_Notification_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__MediaMessage
#define SOAP_TYPE_ns__MediaMessage (48)
/* ns:MediaMessage */
class SOAP_CMAC ns__MediaMessage
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string sender;	/* required element of type xsd:string */
	std::string text;	/* required element of type xsd:string */
	std::string picture_uri;	/* required element of type xsd:string */
	std::string audio_uri;	/* required element of type xsd:string */
	std::string audio_length;	/* required element of type xsd:string */
	std::string video_uri;	/* required element of type xsd:string */
	std::string video_length;	/* required element of type xsd:string */
	std::string timestamp;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 48; } /* = unique type id SOAP_TYPE_ns__MediaMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__MediaMessage() { ns__MediaMessage::soap_default(NULL); }
	virtual ~ns__MediaMessage() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Media_Message_Request_Response
#define SOAP_TYPE_ns__Dispatch_Media_Message_Request_Response (49)
/* ns:Dispatch-Media-Message-Request-Response */
class SOAP_CMAC ns__Dispatch_Media_Message_Request_Response
{
public:
	std::list<ns__MediaMessage >data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns:MediaMessage */
	std::string size;	/* required element of type xsd:string */
	std::string leave_message_count;	/* required element of type xsd:string */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 49; } /* = unique type id SOAP_TYPE_ns__Dispatch_Media_Message_Request_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Media_Message_Request_Response() { ns__Dispatch_Media_Message_Request_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Media_Message_Request_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Media_Message
#define SOAP_TYPE_ns__Media_Message (51)
/* ns:Media-Message */
class SOAP_CMAC ns__Media_Message
{
public:
	ns__Entity id;	/* required element of type ns:Entity */
	ns__MediaMessage messages;	/* required element of type ns:MediaMessage */
	std::string leave_message_count;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 51; } /* = unique type id SOAP_TYPE_ns__Media_Message */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Media_Message() { ns__Media_Message::soap_default(NULL); }
	virtual ~ns__Media_Message() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Media_Message_Notification_Response
#define SOAP_TYPE_ns__Dispatch_Media_Message_Notification_Response (52)
/* ns:Dispatch-Media-Message-Notification-Response */
class SOAP_CMAC ns__Dispatch_Media_Message_Notification_Response
{
public:
	std::string id;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	ns__MediaMessage messages;	/* required element of type ns:MediaMessage */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 52; } /* = unique type id SOAP_TYPE_ns__Dispatch_Media_Message_Notification_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Media_Message_Notification_Response() { ns__Dispatch_Media_Message_Notification_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Media_Message_Notification_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification_Response
#define SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification_Response (53)
/* ns:Dispatch-Participant-Connect-Request-Notification-Response */
class SOAP_CMAC ns__Dispatch_Participant_Connect_Request_Notification_Response
{
public:
	ns__Entity group_id;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:Entity */
	ns__Entity account_id;	/* required element of type ns:Entity */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 53; } /* = unique type id SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Participant_Connect_Request_Notification_Response() { ns__Dispatch_Participant_Connect_Request_Notification_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Participant_Connect_Request_Notification_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification_Response
#define SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification_Response (54)
/* ns:Dispatch-Participant-Speak-Request-Notification-Response */
class SOAP_CMAC ns__Dispatch_Participant_Speak_Request_Notification_Response
{
public:
	ns__Entity group_id;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:Entity */
	ns__Entity account_id;	/* required element of type ns:Entity */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 54; } /* = unique type id SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Participant_Speak_Request_Notification_Response() { ns__Dispatch_Participant_Speak_Request_Notification_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Participant_Speak_Request_Notification_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Session_Status_Notification_Response
#define SOAP_TYPE_ns__Dispatch_Session_Status_Notification_Response (55)
/* ns:Dispatch-Session-Status-Notification-Response */
class SOAP_CMAC ns__Dispatch_Session_Status_Notification_Response
{
public:
	ns__Entity group_id;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:Entity */
	enum ns__SessionStatus status;	/* required element of type ns:SessionStatus */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 55; } /* = unique type id SOAP_TYPE_ns__Dispatch_Session_Status_Notification_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Session_Status_Notification_Response() { ns__Dispatch_Session_Status_Notification_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Session_Status_Notification_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Account_Info_Notification_Response
#define SOAP_TYPE_ns__Dispatch_Account_Info_Notification_Response (56)
/* ns:Dispatch-Account-Info-Notification-Response */
class SOAP_CMAC ns__Dispatch_Account_Info_Notification_Response
{
public:
	ns__Entity account_id;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:Entity */
	double longitude;	/* required element of type xsd:double */
	double latitude;	/* required element of type xsd:double */
	std::string timestamp;	/* required element of type xsd:string */
	enum ns__ProfessionStatus professionstatus;	/* required element of type ns:ProfessionStatus */
	enum ns__RegisterStatus status;	/* required element of type ns:RegisterStatus */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 56; } /* = unique type id SOAP_TYPE_ns__Dispatch_Account_Info_Notification_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Account_Info_Notification_Response() { ns__Dispatch_Account_Info_Notification_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Account_Info_Notification_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__HistoryAlert
#define SOAP_TYPE_ns__HistoryAlert (58)
/* ns:HistoryAlert */
class SOAP_CMAC ns__HistoryAlert
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string describe;	/* required element of type xsd:string */
	enum ns__AlertLevel level;	/* required element of type ns:AlertLevel */
	std::string alram_time;	/* required element of type xsd:string */
	std::string use_cars;	/* required element of type xsd:string */
	std::string create_time;	/* required element of type xsd:string */
	std::string over_time;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 58; } /* = unique type id SOAP_TYPE_ns__HistoryAlert */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__HistoryAlert() { ns__HistoryAlert::soap_default(NULL); }
	virtual ~ns__HistoryAlert() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Alert_Request_Response
#define SOAP_TYPE_ns__Dispatch_Alert_Request_Response (59)
/* ns:Dispatch-Alert-Request-Response */
class SOAP_CMAC ns__Dispatch_Alert_Request_Response
{
public:
	ns__HistoryAlert data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:HistoryAlert */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 59; } /* = unique type id SOAP_TYPE_ns__Dispatch_Alert_Request_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Alert_Request_Response() { ns__Dispatch_Alert_Request_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Alert_Request_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_History_Alert_Request_Reponse
#define SOAP_TYPE_ns__Dispatch_History_Alert_Request_Reponse (60)
/* ns:Dispatch-History-Alert-Request-Reponse */
class SOAP_CMAC ns__Dispatch_History_Alert_Request_Reponse
{
public:
	std::list<ns__HistoryAlert >data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns:HistoryAlert */
	std::string size;	/* required element of type xsd:string */
	std::string session_id;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 60; } /* = unique type id SOAP_TYPE_ns__Dispatch_History_Alert_Request_Reponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_History_Alert_Request_Reponse() { ns__Dispatch_History_Alert_Request_Reponse::soap_default(NULL); }
	virtual ~ns__Dispatch_History_Alert_Request_Reponse() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request_Response
#define SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request_Response (62)
/* ns:Dispatch-History-Alert-Message-Request-Response */
class SOAP_CMAC ns__Dispatch_History_Alert_Message_Request_Response
{
public:
	std::string history_alert_id;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::list<ns__MediaMessage >messages;	/* optional element of type ns:MediaMessage */
	std::string size;	/* required element of type xsd:string */
	std::string leave_message_count;	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	std::string session_id;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 62; } /* = unique type id SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_History_Alert_Message_Request_Response() { ns__Dispatch_History_Alert_Message_Request_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_History_Alert_Message_Request_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Record_Status_Notification_Response
#define SOAP_TYPE_ns__Dispatch_Record_Status_Notification_Response (63)
/* ns:Dispatch-Record-Status-Notification-Response */
class SOAP_CMAC ns__Dispatch_Record_Status_Notification_Response
{
public:
	ns__Entity group_id;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:Entity */
	bool recording;	/* required element of type xsd:boolean */
	std::string error_describe;	/* required element of type xsd:string */
	std::string session_id;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 63; } /* = unique type id SOAP_TYPE_ns__Dispatch_Record_Status_Notification_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Record_Status_Notification_Response() { ns__Dispatch_Record_Status_Notification_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Record_Status_Notification_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification_Response
#define SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification_Response (64)
/* ns:Dispatch-Alert-Overed-Notification-Response */
class SOAP_CMAC ns__Dispatch_Alert_Overed_Notification_Response
{
public:
	std::string alert_id;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	std::string session_id;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 64; } /* = unique type id SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Dispatch_Alert_Overed_Notification_Response() { ns__Dispatch_Alert_Overed_Notification_Response::soap_default(NULL); }
	virtual ~ns__Dispatch_Alert_Overed_Notification_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Normal_Response
#define SOAP_TYPE_ns__Normal_Response (65)
/* ns:Normal-Response */
class SOAP_CMAC ns__Normal_Response
{
public:
	std::string session_id;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string error_describe;	/* required element of type xsd:string */
	bool result;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 65; } /* = unique type id SOAP_TYPE_ns__Normal_Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__Normal_Response() { ns__Normal_Response::soap_default(NULL); }
	virtual ~ns__Normal_Response() { }
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Login
#define SOAP_TYPE_ns__Dispatch_Login (68)
/* ns:Dispatch-Login */
struct ns__Dispatch_Login
{
public:
	std::string username;	/* required element of type xsd:string */
	std::string password;	/* required element of type xsd:string */
public:
	int soap_type() const { return 68; } /* = unique type id SOAP_TYPE_ns__Dispatch_Login */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Logout
#define SOAP_TYPE_ns__Dispatch_Logout (71)
/* ns:Dispatch-Logout */
struct ns__Dispatch_Logout
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string password;	/* required element of type xsd:string */
public:
	int soap_type() const { return 71; } /* = unique type id SOAP_TYPE_ns__Dispatch_Logout */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Entity_Request
#define SOAP_TYPE_ns__Dispatch_Entity_Request (74)
/* ns:Dispatch-Entity-Request */
struct ns__Dispatch_Entity_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 74; } /* = unique type id SOAP_TYPE_ns__Dispatch_Entity_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Entity_Nofitication
#define SOAP_TYPE_ns__Dispatch_Entity_Nofitication (77)
/* ns:Dispatch-Entity-Nofitication */
struct ns__Dispatch_Entity_Nofitication
{
public:
	std::string session_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 77; } /* = unique type id SOAP_TYPE_ns__Dispatch_Entity_Nofitication */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Append_Group
#define SOAP_TYPE_ns__Dispatch_Append_Group (80)
/* ns:Dispatch-Append-Group */
struct ns__Dispatch_Append_Group
{
public:
	std::string session_id;	/* required element of type xsd:string */
	ns__Group group;	/* required element of type ns:Group */
public:
	int soap_type() const { return 80; } /* = unique type id SOAP_TYPE_ns__Dispatch_Append_Group */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Modify_Group
#define SOAP_TYPE_ns__Dispatch_Modify_Group (83)
/* ns:Dispatch-Modify-Group */
struct ns__Dispatch_Modify_Group
{
public:
	std::string session_id;	/* required element of type xsd:string */
	ns__Group group;	/* required element of type ns:Group */
public:
	int soap_type() const { return 83; } /* = unique type id SOAP_TYPE_ns__Dispatch_Modify_Group */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Modify_Participants
#define SOAP_TYPE_ns__Dispatch_Modify_Participants (86)
/* ns:Dispatch-Modify-Participants */
struct ns__Dispatch_Modify_Participants
{
public:
	std::string session_id;	/* required element of type xsd:string */
	ns__Modify_Participant request;	/* required element of type ns:Modify-Participant */
public:
	int soap_type() const { return 86; } /* = unique type id SOAP_TYPE_ns__Dispatch_Modify_Participants */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Delete_Group
#define SOAP_TYPE_ns__Dispatch_Delete_Group (88)
/* ns:Dispatch-Delete-Group */
struct ns__Dispatch_Delete_Group
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string group_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 88; } /* = unique type id SOAP_TYPE_ns__Dispatch_Delete_Group */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification
#define SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification (91)
/* ns:Dispatch-Dispatch-Participants-Notification */
struct ns__Dispatch_Dispatch_Participants_Notification
{
public:
	std::string session_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 91; } /* = unique type id SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication
#define SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication (94)
/* ns:Dispatch-Join-Group-Request-Nofitication */
struct ns__Dispatch_Join_Group_Request_Nofitication
{
public:
	std::string session_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 94; } /* = unique type id SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Participant_Status_Notification
#define SOAP_TYPE_ns__Dispatch_Participant_Status_Notification (97)
/* ns:Dispatch-Participant-Status-Notification */
struct ns__Dispatch_Participant_Status_Notification
{
public:
	std::string session_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 97; } /* = unique type id SOAP_TYPE_ns__Dispatch_Participant_Status_Notification */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Media_Message_Request
#define SOAP_TYPE_ns__Dispatch_Media_Message_Request (100)
/* ns:Dispatch-Media-Message-Request */
struct ns__Dispatch_Media_Message_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string group_id;	/* required element of type xsd:string */
	std::string from_message_id;	/* required element of type xsd:string */
	std::string from_time;	/* required element of type xsd:string */
	std::string max_message_count;	/* required element of type xsd:string */
public:
	int soap_type() const { return 100; } /* = unique type id SOAP_TYPE_ns__Dispatch_Media_Message_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Media_Message_Notification
#define SOAP_TYPE_ns__Dispatch_Media_Message_Notification (103)
/* ns:Dispatch-Media-Message-Notification */
struct ns__Dispatch_Media_Message_Notification
{
public:
	std::string session_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 103; } /* = unique type id SOAP_TYPE_ns__Dispatch_Media_Message_Notification */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification
#define SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification (106)
/* ns:Dispatch-Participant-Connect-Request-Notification */
struct ns__Dispatch_Participant_Connect_Request_Notification
{
public:
	std::string session_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 106; } /* = unique type id SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification
#define SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification (109)
/* ns:Dispatch-Participant-Speak-Request-Notification */
struct ns__Dispatch_Participant_Speak_Request_Notification
{
public:
	std::string session_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 109; } /* = unique type id SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Invite_Participant_Request
#define SOAP_TYPE_ns__Dispatch_Invite_Participant_Request (111)
/* ns:Dispatch-Invite-Participant-Request */
struct ns__Dispatch_Invite_Participant_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string group_id;	/* required element of type xsd:string */
	std::string account_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 111; } /* = unique type id SOAP_TYPE_ns__Dispatch_Invite_Participant_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Drop_Participant_Request
#define SOAP_TYPE_ns__Dispatch_Drop_Participant_Request (113)
/* ns:Dispatch-Drop-Participant-Request */
struct ns__Dispatch_Drop_Participant_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string group_id;	/* required element of type xsd:string */
	std::string account_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 113; } /* = unique type id SOAP_TYPE_ns__Dispatch_Drop_Participant_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Release_Participant_Token_Request
#define SOAP_TYPE_ns__Dispatch_Release_Participant_Token_Request (115)
/* ns:Dispatch-Release-Participant-Token-Request */
struct ns__Dispatch_Release_Participant_Token_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string group_id;	/* required element of type xsd:string */
	std::string account_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 115; } /* = unique type id SOAP_TYPE_ns__Dispatch_Release_Participant_Token_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Appoint_Participant_Speak_Request
#define SOAP_TYPE_ns__Dispatch_Appoint_Participant_Speak_Request (117)
/* ns:Dispatch-Appoint-Participant-Speak-Request */
struct ns__Dispatch_Appoint_Participant_Speak_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string group_id;	/* required element of type xsd:string */
	std::string account_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 117; } /* = unique type id SOAP_TYPE_ns__Dispatch_Appoint_Participant_Speak_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Jion_Group_Request
#define SOAP_TYPE_ns__Dispatch_Jion_Group_Request (119)
/* ns:Dispatch-Jion-Group-Request */
struct ns__Dispatch_Jion_Group_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string group_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 119; } /* = unique type id SOAP_TYPE_ns__Dispatch_Jion_Group_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Leave_Group_Request
#define SOAP_TYPE_ns__Dispatch_Leave_Group_Request (121)
/* ns:Dispatch-Leave-Group-Request */
struct ns__Dispatch_Leave_Group_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string group_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 121; } /* = unique type id SOAP_TYPE_ns__Dispatch_Leave_Group_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Session_Status_Notification
#define SOAP_TYPE_ns__Dispatch_Session_Status_Notification (124)
/* ns:Dispatch-Session-Status-Notification */
struct ns__Dispatch_Session_Status_Notification
{
public:
	std::string session_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 124; } /* = unique type id SOAP_TYPE_ns__Dispatch_Session_Status_Notification */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Send_Message_Request
#define SOAP_TYPE_ns__Dispatch_Send_Message_Request (126)
/* ns:Dispatch-Send-Message-Request */
struct ns__Dispatch_Send_Message_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string group_id;	/* required element of type xsd:string */
	ns__MediaMessage mediamessage;	/* required element of type ns:MediaMessage */
public:
	int soap_type() const { return 126; } /* = unique type id SOAP_TYPE_ns__Dispatch_Send_Message_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Start_Record_Request
#define SOAP_TYPE_ns__Dispatch_Start_Record_Request (128)
/* ns:Dispatch-Start-Record-Request */
struct ns__Dispatch_Start_Record_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string group_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 128; } /* = unique type id SOAP_TYPE_ns__Dispatch_Start_Record_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Stop_Record_Request
#define SOAP_TYPE_ns__Dispatch_Stop_Record_Request (130)
/* ns:Dispatch-Stop-Record-Request */
struct ns__Dispatch_Stop_Record_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string group_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 130; } /* = unique type id SOAP_TYPE_ns__Dispatch_Stop_Record_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Record_Status_Notification
#define SOAP_TYPE_ns__Dispatch_Record_Status_Notification (133)
/* ns:Dispatch-Record-Status-Notification */
struct ns__Dispatch_Record_Status_Notification
{
public:
	std::string session_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 133; } /* = unique type id SOAP_TYPE_ns__Dispatch_Record_Status_Notification */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Subscribe_Account_Info_Request
#define SOAP_TYPE_ns__Dispatch_Subscribe_Account_Info_Request (136)
/* ns:Dispatch-Subscribe-Account-Info-Request */
struct ns__Dispatch_Subscribe_Account_Info_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	bool subscribing;	/* required element of type xsd:boolean */
	std::list<std::string >account_id;	/* required element of type xsd:string */
	enum ns__SubscribeType type;	/* required element of type ns:SubscribeType */
	std::string ttl;	/* required element of type xsd:string */
public:
	int soap_type() const { return 136; } /* = unique type id SOAP_TYPE_ns__Dispatch_Subscribe_Account_Info_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Account_Info_Notification
#define SOAP_TYPE_ns__Dispatch_Account_Info_Notification (139)
/* ns:Dispatch-Account-Info-Notification */
struct ns__Dispatch_Account_Info_Notification
{
public:
	std::string session_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 139; } /* = unique type id SOAP_TYPE_ns__Dispatch_Account_Info_Notification */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Append_Alert_Request
#define SOAP_TYPE_ns__Dispatch_Append_Alert_Request (143)
/* ns:Dispatch-Append-Alert-Request */
struct ns__Dispatch_Append_Alert_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	ns__Alert alert;	/* required element of type ns:Alert */
	std::list<ns__Account >members;	/* required element of type ns:Account */
	std::string size;	/* required element of type xsd:string */
public:
	int soap_type() const { return 143; } /* = unique type id SOAP_TYPE_ns__Dispatch_Append_Alert_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Modify_Alert_Request
#define SOAP_TYPE_ns__Dispatch_Modify_Alert_Request (145)
/* ns:Dispatch-Modify-Alert-Request */
struct ns__Dispatch_Modify_Alert_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	ns__Alert alert;	/* required element of type ns:Alert */
public:
	int soap_type() const { return 145; } /* = unique type id SOAP_TYPE_ns__Dispatch_Modify_Alert_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Stop_Alert_Request
#define SOAP_TYPE_ns__Dispatch_Stop_Alert_Request (147)
/* ns:Dispatch-Stop-Alert-Request */
struct ns__Dispatch_Stop_Alert_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string alert_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 147; } /* = unique type id SOAP_TYPE_ns__Dispatch_Stop_Alert_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification
#define SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification (150)
/* ns:Dispatch-Alert-Overed-Notification */
struct ns__Dispatch_Alert_Overed_Notification
{
public:
	std::string session_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 150; } /* = unique type id SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_History_Alert_Request
#define SOAP_TYPE_ns__Dispatch_History_Alert_Request (153)
/* ns:Dispatch-History-Alert-Request */
struct ns__Dispatch_History_Alert_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string create_time_from;	/* required element of type xsd:string */
	std::string create_time_to;	/* required element of type xsd:string */
	std::string alram_time_from;	/* required element of type xsd:string */
	std::string alram_time_to;	/* required element of type xsd:string */
	std::string over_time_from;	/* required element of type xsd:string */
	std::string over_time_to;	/* required element of type xsd:string */
public:
	int soap_type() const { return 153; } /* = unique type id SOAP_TYPE_ns__Dispatch_History_Alert_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Alert_Request
#define SOAP_TYPE_ns__Dispatch_Alert_Request (156)
/* ns:Dispatch-Alert-Request */
struct ns__Dispatch_Alert_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string alert_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 156; } /* = unique type id SOAP_TYPE_ns__Dispatch_Alert_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request
#define SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request (159)
/* ns:Dispatch-History-Alert-Message-Request */
struct ns__Dispatch_History_Alert_Message_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string history_alert_id;	/* required element of type xsd:string */
	std::string from_message_id;	/* required element of type xsd:string */
	std::string from_time;	/* required element of type xsd:string */
	std::string max_message_count;	/* required element of type xsd:string */
public:
	int soap_type() const { return 159; } /* = unique type id SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request */
};
#endif

#ifndef SOAP_TYPE_ns__Dispatch_Delete_History_Alert_Request
#define SOAP_TYPE_ns__Dispatch_Delete_History_Alert_Request (161)
/* ns:Dispatch-Delete-History-Alert-Request */
struct ns__Dispatch_Delete_History_Alert_Request
{
public:
	std::string session_id;	/* required element of type xsd:string */
	std::string history_alert_id;	/* required element of type xsd:string */
public:
	int soap_type() const { return 161; } /* = unique type id SOAP_TYPE_ns__Dispatch_Delete_History_Alert_Request */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (162)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 162; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (163)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 163; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (165)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 165; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (168)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 168; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (169)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 169; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
