/* soapC.cpp
   Generated by gSOAP 2.8.17r from webservice.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.17r 2014-04-28 08:25:14 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns__EntityType:
		return soap_in_ns__EntityType(soap, NULL, NULL, "ns:EntityType");
	case SOAP_TYPE_ns__SubscribeType:
		return soap_in_ns__SubscribeType(soap, NULL, NULL, "ns:SubscribeType");
	case SOAP_TYPE_ns__ProfessionStatus:
		return soap_in_ns__ProfessionStatus(soap, NULL, NULL, "ns:ProfessionStatus");
	case SOAP_TYPE_ns__EntityNotifyType:
		return soap_in_ns__EntityNotifyType(soap, NULL, NULL, "ns:EntityNotifyType");
	case SOAP_TYPE_ns__AlertLevel:
		return soap_in_ns__AlertLevel(soap, NULL, NULL, "ns:AlertLevel");
	case SOAP_TYPE_ns__AlertStatus:
		return soap_in_ns__AlertStatus(soap, NULL, NULL, "ns:AlertStatus");
	case SOAP_TYPE_ns__RecordStatus:
		return soap_in_ns__RecordStatus(soap, NULL, NULL, "ns:RecordStatus");
	case SOAP_TYPE_ns__RecordType:
		return soap_in_ns__RecordType(soap, NULL, NULL, "ns:RecordType");
	case SOAP_TYPE_ns__SessionStatus:
		return soap_in_ns__SessionStatus(soap, NULL, NULL, "ns:SessionStatus");
	case SOAP_TYPE_ns__TokenPrivilege:
		return soap_in_ns__TokenPrivilege(soap, NULL, NULL, "ns:TokenPrivilege");
	case SOAP_TYPE_ns__CallPrivilege:
		return soap_in_ns__CallPrivilege(soap, NULL, NULL, "ns:CallPrivilege");
	case SOAP_TYPE_ns__AccountType:
		return soap_in_ns__AccountType(soap, NULL, NULL, "ns:AccountType");
	case SOAP_TYPE_ns__ListModifyType:
		return soap_in_ns__ListModifyType(soap, NULL, NULL, "ns:ListModifyType");
	case SOAP_TYPE_ns__RegisterStatus:
		return soap_in_ns__RegisterStatus(soap, NULL, NULL, "ns:RegisterStatus");
	case SOAP_TYPE_ns__Normal_Response:
		return soap_in_ns__Normal_Response(soap, NULL, NULL, "ns:Normal-Response");
	case SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification_Response:
		return soap_in_ns__Dispatch_Alert_Overed_Notification_Response(soap, NULL, NULL, "ns:Dispatch-Alert-Overed-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_Record_Status_Notification_Response:
		return soap_in_ns__Dispatch_Record_Status_Notification_Response(soap, NULL, NULL, "ns:Dispatch-Record-Status-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request_Response:
		return soap_in_ns__Dispatch_History_Alert_Message_Request_Response(soap, NULL, NULL, "ns:Dispatch-History-Alert-Message-Request-Response");
	case SOAP_TYPE_ns__Dispatch_History_Alert_Request_Reponse:
		return soap_in_ns__Dispatch_History_Alert_Request_Reponse(soap, NULL, NULL, "ns:Dispatch-History-Alert-Request-Reponse");
	case SOAP_TYPE_ns__Dispatch_Alert_Request_Response:
		return soap_in_ns__Dispatch_Alert_Request_Response(soap, NULL, NULL, "ns:Dispatch-Alert-Request-Response");
	case SOAP_TYPE_ns__HistoryAlert:
		return soap_in_ns__HistoryAlert(soap, NULL, NULL, "ns:HistoryAlert");
	case SOAP_TYPE_ns__Dispatch_Account_Info_Notification_Response:
		return soap_in_ns__Dispatch_Account_Info_Notification_Response(soap, NULL, NULL, "ns:Dispatch-Account-Info-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_Session_Status_Notification_Response:
		return soap_in_ns__Dispatch_Session_Status_Notification_Response(soap, NULL, NULL, "ns:Dispatch-Session-Status-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification_Response:
		return soap_in_ns__Dispatch_Participant_Speak_Request_Notification_Response(soap, NULL, NULL, "ns:Dispatch-Participant-Speak-Request-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification_Response:
		return soap_in_ns__Dispatch_Participant_Connect_Request_Notification_Response(soap, NULL, NULL, "ns:Dispatch-Participant-Connect-Request-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_Media_Message_Notification_Response:
		return soap_in_ns__Dispatch_Media_Message_Notification_Response(soap, NULL, NULL, "ns:Dispatch-Media-Message-Notification-Response");
	case SOAP_TYPE_ns__Media_Message:
		return soap_in_ns__Media_Message(soap, NULL, NULL, "ns:Media-Message");
	case SOAP_TYPE_ns__Dispatch_Media_Message_Request_Response:
		return soap_in_ns__Dispatch_Media_Message_Request_Response(soap, NULL, NULL, "ns:Dispatch-Media-Message-Request-Response");
	case SOAP_TYPE_ns__MediaMessage:
		return soap_in_ns__MediaMessage(soap, NULL, NULL, "ns:MediaMessage");
	case SOAP_TYPE_ns__Dispatch_Participant_Status_Notification_Response:
		return soap_in_ns__Dispatch_Participant_Status_Notification_Response(soap, NULL, NULL, "ns:Dispatch-Participant-Status-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication_Response:
		return soap_in_ns__Dispatch_Join_Group_Request_Nofitication_Response(soap, NULL, NULL, "ns:Dispatch-Join-Group-Request-Nofitication-Response");
	case SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification_Response:
		return soap_in_ns__Dispatch_Dispatch_Participants_Notification_Response(soap, NULL, NULL, "ns:Dispatch-Dispatch-Participants-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_Modify_Participants_Response:
		return soap_in_ns__Dispatch_Modify_Participants_Response(soap, NULL, NULL, "ns:Dispatch-Modify-Participants-Response");
	case SOAP_TYPE_ns__Modify_Participant:
		return soap_in_ns__Modify_Participant(soap, NULL, NULL, "ns:Modify-Participant");
	case SOAP_TYPE_ns__Entity_Status_Notification:
		return soap_in_ns__Entity_Status_Notification(soap, NULL, NULL, "ns:Entity-Status-Notification");
	case SOAP_TYPE_ns__Dispatch_Entity_Nofitication_Response:
		return soap_in_ns__Dispatch_Entity_Nofitication_Response(soap, NULL, NULL, "ns:Dispatch-Entity-Nofitication-Response");
	case SOAP_TYPE_ns__Dispatch_Entity_Request_Response:
		return soap_in_ns__Dispatch_Entity_Request_Response(soap, NULL, NULL, "ns:Dispatch-Entity-Request-Response");
	case SOAP_TYPE_ns__EntityData:
		return soap_in_ns__EntityData(soap, NULL, NULL, "ns:EntityData");
	case SOAP_TYPE_ns__Organization:
		return soap_in_ns__Organization(soap, NULL, NULL, "ns:Organization");
	case SOAP_TYPE_ns__Dispatch_Append_Alert_Request_Response:
		return soap_in_ns__Dispatch_Append_Alert_Request_Response(soap, NULL, NULL, "ns:Dispatch-Append-Alert-Request-Response");
	case SOAP_TYPE_ns__Alert:
		return soap_in_ns__Alert(soap, NULL, NULL, "ns:Alert");
	case SOAP_TYPE_ns__Dispatch_Modify_Group_Response:
		return soap_in_ns__Dispatch_Modify_Group_Response(soap, NULL, NULL, "ns:Dispatch-Modify-Group-Response");
	case SOAP_TYPE_ns__Dispatch_Append_Group_Response:
		return soap_in_ns__Dispatch_Append_Group_Response(soap, NULL, NULL, "ns:Dispatch-Append-Group-Response");
	case SOAP_TYPE_ns__Group:
		return soap_in_ns__Group(soap, NULL, NULL, "ns:Group");
	case SOAP_TYPE_ns__Participant:
		return soap_in_ns__Participant(soap, NULL, NULL, "ns:Participant");
	case SOAP_TYPE_ns__Unit:
		return soap_in_ns__Unit(soap, NULL, NULL, "ns:Unit");
	case SOAP_TYPE_ns__Dispatch_Login_Response:
		return soap_in_ns__Dispatch_Login_Response(soap, NULL, NULL, "ns:Dispatch-Login-Response");
	case SOAP_TYPE_ns__Account:
		return soap_in_ns__Account(soap, NULL, NULL, "ns:Account");
	case SOAP_TYPE_ns__User:
		return soap_in_ns__User(soap, NULL, NULL, "ns:User");
	case SOAP_TYPE_ns__Address:
		return soap_in_ns__Address(soap, NULL, NULL, "ns:Address");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns__Entity:
		return soap_in_ns__Entity(soap, NULL, NULL, "ns:Entity");
	case SOAP_TYPE_ns__Dispatch_Delete_History_Alert_Request:
		return soap_in_ns__Dispatch_Delete_History_Alert_Request(soap, NULL, NULL, "ns:Dispatch-Delete-History-Alert-Request");
	case SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request:
		return soap_in_ns__Dispatch_History_Alert_Message_Request(soap, NULL, NULL, "ns:Dispatch-History-Alert-Message-Request");
	case SOAP_TYPE_ns__Dispatch_Alert_Request:
		return soap_in_ns__Dispatch_Alert_Request(soap, NULL, NULL, "ns:Dispatch-Alert-Request");
	case SOAP_TYPE_ns__Dispatch_History_Alert_Request:
		return soap_in_ns__Dispatch_History_Alert_Request(soap, NULL, NULL, "ns:Dispatch-History-Alert-Request");
	case SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification:
		return soap_in_ns__Dispatch_Alert_Overed_Notification(soap, NULL, NULL, "ns:Dispatch-Alert-Overed-Notification");
	case SOAP_TYPE_ns__Dispatch_Stop_Alert_Request:
		return soap_in_ns__Dispatch_Stop_Alert_Request(soap, NULL, NULL, "ns:Dispatch-Stop-Alert-Request");
	case SOAP_TYPE_ns__Dispatch_Modify_Alert_Request:
		return soap_in_ns__Dispatch_Modify_Alert_Request(soap, NULL, NULL, "ns:Dispatch-Modify-Alert-Request");
	case SOAP_TYPE_ns__Dispatch_Append_Alert_Request:
		return soap_in_ns__Dispatch_Append_Alert_Request(soap, NULL, NULL, "ns:Dispatch-Append-Alert-Request");
	case SOAP_TYPE_ns__Dispatch_Account_Info_Notification:
		return soap_in_ns__Dispatch_Account_Info_Notification(soap, NULL, NULL, "ns:Dispatch-Account-Info-Notification");
	case SOAP_TYPE_ns__Dispatch_Subscribe_Account_Info_Request:
		return soap_in_ns__Dispatch_Subscribe_Account_Info_Request(soap, NULL, NULL, "ns:Dispatch-Subscribe-Account-Info-Request");
	case SOAP_TYPE_ns__Dispatch_Record_Status_Notification:
		return soap_in_ns__Dispatch_Record_Status_Notification(soap, NULL, NULL, "ns:Dispatch-Record-Status-Notification");
	case SOAP_TYPE_ns__Dispatch_Stop_Record_Request:
		return soap_in_ns__Dispatch_Stop_Record_Request(soap, NULL, NULL, "ns:Dispatch-Stop-Record-Request");
	case SOAP_TYPE_ns__Dispatch_Start_Record_Request:
		return soap_in_ns__Dispatch_Start_Record_Request(soap, NULL, NULL, "ns:Dispatch-Start-Record-Request");
	case SOAP_TYPE_ns__Dispatch_Send_Message_Request:
		return soap_in_ns__Dispatch_Send_Message_Request(soap, NULL, NULL, "ns:Dispatch-Send-Message-Request");
	case SOAP_TYPE_ns__Dispatch_Session_Status_Notification:
		return soap_in_ns__Dispatch_Session_Status_Notification(soap, NULL, NULL, "ns:Dispatch-Session-Status-Notification");
	case SOAP_TYPE_ns__Dispatch_Leave_Group_Request:
		return soap_in_ns__Dispatch_Leave_Group_Request(soap, NULL, NULL, "ns:Dispatch-Leave-Group-Request");
	case SOAP_TYPE_ns__Dispatch_Jion_Group_Request:
		return soap_in_ns__Dispatch_Jion_Group_Request(soap, NULL, NULL, "ns:Dispatch-Jion-Group-Request");
	case SOAP_TYPE_ns__Dispatch_Appoint_Participant_Speak_Request:
		return soap_in_ns__Dispatch_Appoint_Participant_Speak_Request(soap, NULL, NULL, "ns:Dispatch-Appoint-Participant-Speak-Request");
	case SOAP_TYPE_ns__Dispatch_Release_Participant_Token_Request:
		return soap_in_ns__Dispatch_Release_Participant_Token_Request(soap, NULL, NULL, "ns:Dispatch-Release-Participant-Token-Request");
	case SOAP_TYPE_ns__Dispatch_Drop_Participant_Request:
		return soap_in_ns__Dispatch_Drop_Participant_Request(soap, NULL, NULL, "ns:Dispatch-Drop-Participant-Request");
	case SOAP_TYPE_ns__Dispatch_Invite_Participant_Request:
		return soap_in_ns__Dispatch_Invite_Participant_Request(soap, NULL, NULL, "ns:Dispatch-Invite-Participant-Request");
	case SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification:
		return soap_in_ns__Dispatch_Participant_Speak_Request_Notification(soap, NULL, NULL, "ns:Dispatch-Participant-Speak-Request-Notification");
	case SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification:
		return soap_in_ns__Dispatch_Participant_Connect_Request_Notification(soap, NULL, NULL, "ns:Dispatch-Participant-Connect-Request-Notification");
	case SOAP_TYPE_ns__Dispatch_Media_Message_Notification:
		return soap_in_ns__Dispatch_Media_Message_Notification(soap, NULL, NULL, "ns:Dispatch-Media-Message-Notification");
	case SOAP_TYPE_ns__Dispatch_Media_Message_Request:
		return soap_in_ns__Dispatch_Media_Message_Request(soap, NULL, NULL, "ns:Dispatch-Media-Message-Request");
	case SOAP_TYPE_ns__Dispatch_Participant_Status_Notification:
		return soap_in_ns__Dispatch_Participant_Status_Notification(soap, NULL, NULL, "ns:Dispatch-Participant-Status-Notification");
	case SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication:
		return soap_in_ns__Dispatch_Join_Group_Request_Nofitication(soap, NULL, NULL, "ns:Dispatch-Join-Group-Request-Nofitication");
	case SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification:
		return soap_in_ns__Dispatch_Dispatch_Participants_Notification(soap, NULL, NULL, "ns:Dispatch-Dispatch-Participants-Notification");
	case SOAP_TYPE_ns__Dispatch_Delete_Group:
		return soap_in_ns__Dispatch_Delete_Group(soap, NULL, NULL, "ns:Dispatch-Delete-Group");
	case SOAP_TYPE_ns__Dispatch_Modify_Participants:
		return soap_in_ns__Dispatch_Modify_Participants(soap, NULL, NULL, "ns:Dispatch-Modify-Participants");
	case SOAP_TYPE_ns__Dispatch_Modify_Group:
		return soap_in_ns__Dispatch_Modify_Group(soap, NULL, NULL, "ns:Dispatch-Modify-Group");
	case SOAP_TYPE_ns__Dispatch_Append_Group:
		return soap_in_ns__Dispatch_Append_Group(soap, NULL, NULL, "ns:Dispatch-Append-Group");
	case SOAP_TYPE_ns__Dispatch_Entity_Nofitication:
		return soap_in_ns__Dispatch_Entity_Nofitication(soap, NULL, NULL, "ns:Dispatch-Entity-Nofitication");
	case SOAP_TYPE_ns__Dispatch_Entity_Request:
		return soap_in_ns__Dispatch_Entity_Request(soap, NULL, NULL, "ns:Dispatch-Entity-Request");
	case SOAP_TYPE_ns__Dispatch_Logout:
		return soap_in_ns__Dispatch_Logout(soap, NULL, NULL, "ns:Dispatch-Logout");
	case SOAP_TYPE_ns__Dispatch_Login:
		return soap_in_ns__Dispatch_Login(soap, NULL, NULL, "ns:Dispatch-Login");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns:Normal-Response"))
		{	*type = SOAP_TYPE_ns__Normal_Response;
			return soap_in_ns__Normal_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Alert-Overed-Notification-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification_Response;
			return soap_in_ns__Dispatch_Alert_Overed_Notification_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Record-Status-Notification-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Record_Status_Notification_Response;
			return soap_in_ns__Dispatch_Record_Status_Notification_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-History-Alert-Message-Request-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request_Response;
			return soap_in_ns__Dispatch_History_Alert_Message_Request_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-History-Alert-Request-Reponse"))
		{	*type = SOAP_TYPE_ns__Dispatch_History_Alert_Request_Reponse;
			return soap_in_ns__Dispatch_History_Alert_Request_Reponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Alert-Request-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Alert_Request_Response;
			return soap_in_ns__Dispatch_Alert_Request_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HistoryAlert"))
		{	*type = SOAP_TYPE_ns__HistoryAlert;
			return soap_in_ns__HistoryAlert(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Account-Info-Notification-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Account_Info_Notification_Response;
			return soap_in_ns__Dispatch_Account_Info_Notification_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Session-Status-Notification-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Session_Status_Notification_Response;
			return soap_in_ns__Dispatch_Session_Status_Notification_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Participant-Speak-Request-Notification-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification_Response;
			return soap_in_ns__Dispatch_Participant_Speak_Request_Notification_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Participant-Connect-Request-Notification-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification_Response;
			return soap_in_ns__Dispatch_Participant_Connect_Request_Notification_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Media-Message-Notification-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Media_Message_Notification_Response;
			return soap_in_ns__Dispatch_Media_Message_Notification_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Media-Message"))
		{	*type = SOAP_TYPE_ns__Media_Message;
			return soap_in_ns__Media_Message(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Media-Message-Request-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Media_Message_Request_Response;
			return soap_in_ns__Dispatch_Media_Message_Request_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:MediaMessage"))
		{	*type = SOAP_TYPE_ns__MediaMessage;
			return soap_in_ns__MediaMessage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Participant-Status-Notification-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Participant_Status_Notification_Response;
			return soap_in_ns__Dispatch_Participant_Status_Notification_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Join-Group-Request-Nofitication-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication_Response;
			return soap_in_ns__Dispatch_Join_Group_Request_Nofitication_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Dispatch-Participants-Notification-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification_Response;
			return soap_in_ns__Dispatch_Dispatch_Participants_Notification_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Modify-Participants-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Modify_Participants_Response;
			return soap_in_ns__Dispatch_Modify_Participants_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Modify-Participant"))
		{	*type = SOAP_TYPE_ns__Modify_Participant;
			return soap_in_ns__Modify_Participant(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Entity-Status-Notification"))
		{	*type = SOAP_TYPE_ns__Entity_Status_Notification;
			return soap_in_ns__Entity_Status_Notification(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Entity-Nofitication-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Entity_Nofitication_Response;
			return soap_in_ns__Dispatch_Entity_Nofitication_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Entity-Request-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Entity_Request_Response;
			return soap_in_ns__Dispatch_Entity_Request_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:EntityData"))
		{	*type = SOAP_TYPE_ns__EntityData;
			return soap_in_ns__EntityData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Organization"))
		{	*type = SOAP_TYPE_ns__Organization;
			return soap_in_ns__Organization(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Append-Alert-Request-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Append_Alert_Request_Response;
			return soap_in_ns__Dispatch_Append_Alert_Request_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Alert"))
		{	*type = SOAP_TYPE_ns__Alert;
			return soap_in_ns__Alert(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Modify-Group-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Modify_Group_Response;
			return soap_in_ns__Dispatch_Modify_Group_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Append-Group-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Append_Group_Response;
			return soap_in_ns__Dispatch_Append_Group_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Group"))
		{	*type = SOAP_TYPE_ns__Group;
			return soap_in_ns__Group(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Participant"))
		{	*type = SOAP_TYPE_ns__Participant;
			return soap_in_ns__Participant(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Unit"))
		{	*type = SOAP_TYPE_ns__Unit;
			return soap_in_ns__Unit(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Login-Response"))
		{	*type = SOAP_TYPE_ns__Dispatch_Login_Response;
			return soap_in_ns__Dispatch_Login_Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Account"))
		{	*type = SOAP_TYPE_ns__Account;
			return soap_in_ns__Account(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:User"))
		{	*type = SOAP_TYPE_ns__User;
			return soap_in_ns__User(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Address"))
		{	*type = SOAP_TYPE_ns__Address;
			return soap_in_ns__Address(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Entity"))
		{	*type = SOAP_TYPE_ns__Entity;
			return soap_in_ns__Entity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:EntityType"))
		{	*type = SOAP_TYPE_ns__EntityType;
			return soap_in_ns__EntityType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:SubscribeType"))
		{	*type = SOAP_TYPE_ns__SubscribeType;
			return soap_in_ns__SubscribeType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ProfessionStatus"))
		{	*type = SOAP_TYPE_ns__ProfessionStatus;
			return soap_in_ns__ProfessionStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:EntityNotifyType"))
		{	*type = SOAP_TYPE_ns__EntityNotifyType;
			return soap_in_ns__EntityNotifyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:AlertLevel"))
		{	*type = SOAP_TYPE_ns__AlertLevel;
			return soap_in_ns__AlertLevel(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:AlertStatus"))
		{	*type = SOAP_TYPE_ns__AlertStatus;
			return soap_in_ns__AlertStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:RecordStatus"))
		{	*type = SOAP_TYPE_ns__RecordStatus;
			return soap_in_ns__RecordStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:RecordType"))
		{	*type = SOAP_TYPE_ns__RecordType;
			return soap_in_ns__RecordType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:SessionStatus"))
		{	*type = SOAP_TYPE_ns__SessionStatus;
			return soap_in_ns__SessionStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:TokenPrivilege"))
		{	*type = SOAP_TYPE_ns__TokenPrivilege;
			return soap_in_ns__TokenPrivilege(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:CallPrivilege"))
		{	*type = SOAP_TYPE_ns__CallPrivilege;
			return soap_in_ns__CallPrivilege(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:AccountType"))
		{	*type = SOAP_TYPE_ns__AccountType;
			return soap_in_ns__AccountType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ListModifyType"))
		{	*type = SOAP_TYPE_ns__ListModifyType;
			return soap_in_ns__ListModifyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:RegisterStatus"))
		{	*type = SOAP_TYPE_ns__RegisterStatus;
			return soap_in_ns__RegisterStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Delete-History-Alert-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Delete_History_Alert_Request;
			return soap_in_ns__Dispatch_Delete_History_Alert_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-History-Alert-Message-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request;
			return soap_in_ns__Dispatch_History_Alert_Message_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Alert-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Alert_Request;
			return soap_in_ns__Dispatch_Alert_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-History-Alert-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_History_Alert_Request;
			return soap_in_ns__Dispatch_History_Alert_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Alert-Overed-Notification"))
		{	*type = SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification;
			return soap_in_ns__Dispatch_Alert_Overed_Notification(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Stop-Alert-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Stop_Alert_Request;
			return soap_in_ns__Dispatch_Stop_Alert_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Modify-Alert-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Modify_Alert_Request;
			return soap_in_ns__Dispatch_Modify_Alert_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Append-Alert-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Append_Alert_Request;
			return soap_in_ns__Dispatch_Append_Alert_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Account-Info-Notification"))
		{	*type = SOAP_TYPE_ns__Dispatch_Account_Info_Notification;
			return soap_in_ns__Dispatch_Account_Info_Notification(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Subscribe-Account-Info-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Subscribe_Account_Info_Request;
			return soap_in_ns__Dispatch_Subscribe_Account_Info_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Record-Status-Notification"))
		{	*type = SOAP_TYPE_ns__Dispatch_Record_Status_Notification;
			return soap_in_ns__Dispatch_Record_Status_Notification(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Stop-Record-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Stop_Record_Request;
			return soap_in_ns__Dispatch_Stop_Record_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Start-Record-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Start_Record_Request;
			return soap_in_ns__Dispatch_Start_Record_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Send-Message-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Send_Message_Request;
			return soap_in_ns__Dispatch_Send_Message_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Session-Status-Notification"))
		{	*type = SOAP_TYPE_ns__Dispatch_Session_Status_Notification;
			return soap_in_ns__Dispatch_Session_Status_Notification(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Leave-Group-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Leave_Group_Request;
			return soap_in_ns__Dispatch_Leave_Group_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Jion-Group-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Jion_Group_Request;
			return soap_in_ns__Dispatch_Jion_Group_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Appoint-Participant-Speak-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Appoint_Participant_Speak_Request;
			return soap_in_ns__Dispatch_Appoint_Participant_Speak_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Release-Participant-Token-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Release_Participant_Token_Request;
			return soap_in_ns__Dispatch_Release_Participant_Token_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Drop-Participant-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Drop_Participant_Request;
			return soap_in_ns__Dispatch_Drop_Participant_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Invite-Participant-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Invite_Participant_Request;
			return soap_in_ns__Dispatch_Invite_Participant_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Participant-Speak-Request-Notification"))
		{	*type = SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification;
			return soap_in_ns__Dispatch_Participant_Speak_Request_Notification(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Participant-Connect-Request-Notification"))
		{	*type = SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification;
			return soap_in_ns__Dispatch_Participant_Connect_Request_Notification(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Media-Message-Notification"))
		{	*type = SOAP_TYPE_ns__Dispatch_Media_Message_Notification;
			return soap_in_ns__Dispatch_Media_Message_Notification(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Media-Message-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Media_Message_Request;
			return soap_in_ns__Dispatch_Media_Message_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Participant-Status-Notification"))
		{	*type = SOAP_TYPE_ns__Dispatch_Participant_Status_Notification;
			return soap_in_ns__Dispatch_Participant_Status_Notification(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Join-Group-Request-Nofitication"))
		{	*type = SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication;
			return soap_in_ns__Dispatch_Join_Group_Request_Nofitication(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Dispatch-Participants-Notification"))
		{	*type = SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification;
			return soap_in_ns__Dispatch_Dispatch_Participants_Notification(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Delete-Group"))
		{	*type = SOAP_TYPE_ns__Dispatch_Delete_Group;
			return soap_in_ns__Dispatch_Delete_Group(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Modify-Participants"))
		{	*type = SOAP_TYPE_ns__Dispatch_Modify_Participants;
			return soap_in_ns__Dispatch_Modify_Participants(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Modify-Group"))
		{	*type = SOAP_TYPE_ns__Dispatch_Modify_Group;
			return soap_in_ns__Dispatch_Modify_Group(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Append-Group"))
		{	*type = SOAP_TYPE_ns__Dispatch_Append_Group;
			return soap_in_ns__Dispatch_Append_Group(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Entity-Nofitication"))
		{	*type = SOAP_TYPE_ns__Dispatch_Entity_Nofitication;
			return soap_in_ns__Dispatch_Entity_Nofitication(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Entity-Request"))
		{	*type = SOAP_TYPE_ns__Dispatch_Entity_Request;
			return soap_in_ns__Dispatch_Entity_Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Logout"))
		{	*type = SOAP_TYPE_ns__Dispatch_Logout;
			return soap_in_ns__Dispatch_Logout(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Dispatch-Login"))
		{	*type = SOAP_TYPE_ns__Dispatch_Login;
			return soap_in_ns__Dispatch_Login(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns__EntityType:
		return soap_out_ns__EntityType(soap, tag, id, (const enum ns__EntityType *)ptr, "ns:EntityType");
	case SOAP_TYPE_ns__SubscribeType:
		return soap_out_ns__SubscribeType(soap, tag, id, (const enum ns__SubscribeType *)ptr, "ns:SubscribeType");
	case SOAP_TYPE_ns__ProfessionStatus:
		return soap_out_ns__ProfessionStatus(soap, tag, id, (const enum ns__ProfessionStatus *)ptr, "ns:ProfessionStatus");
	case SOAP_TYPE_ns__EntityNotifyType:
		return soap_out_ns__EntityNotifyType(soap, tag, id, (const enum ns__EntityNotifyType *)ptr, "ns:EntityNotifyType");
	case SOAP_TYPE_ns__AlertLevel:
		return soap_out_ns__AlertLevel(soap, tag, id, (const enum ns__AlertLevel *)ptr, "ns:AlertLevel");
	case SOAP_TYPE_ns__AlertStatus:
		return soap_out_ns__AlertStatus(soap, tag, id, (const enum ns__AlertStatus *)ptr, "ns:AlertStatus");
	case SOAP_TYPE_ns__RecordStatus:
		return soap_out_ns__RecordStatus(soap, tag, id, (const enum ns__RecordStatus *)ptr, "ns:RecordStatus");
	case SOAP_TYPE_ns__RecordType:
		return soap_out_ns__RecordType(soap, tag, id, (const enum ns__RecordType *)ptr, "ns:RecordType");
	case SOAP_TYPE_ns__SessionStatus:
		return soap_out_ns__SessionStatus(soap, tag, id, (const enum ns__SessionStatus *)ptr, "ns:SessionStatus");
	case SOAP_TYPE_ns__TokenPrivilege:
		return soap_out_ns__TokenPrivilege(soap, tag, id, (const enum ns__TokenPrivilege *)ptr, "ns:TokenPrivilege");
	case SOAP_TYPE_ns__CallPrivilege:
		return soap_out_ns__CallPrivilege(soap, tag, id, (const enum ns__CallPrivilege *)ptr, "ns:CallPrivilege");
	case SOAP_TYPE_ns__AccountType:
		return soap_out_ns__AccountType(soap, tag, id, (const enum ns__AccountType *)ptr, "ns:AccountType");
	case SOAP_TYPE_ns__ListModifyType:
		return soap_out_ns__ListModifyType(soap, tag, id, (const enum ns__ListModifyType *)ptr, "ns:ListModifyType");
	case SOAP_TYPE_ns__RegisterStatus:
		return soap_out_ns__RegisterStatus(soap, tag, id, (const enum ns__RegisterStatus *)ptr, "ns:RegisterStatus");
	case SOAP_TYPE_ns__Normal_Response:
		return ((ns__Normal_Response *)ptr)->soap_out(soap, tag, id, "ns:Normal-Response");
	case SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification_Response:
		return ((ns__Dispatch_Alert_Overed_Notification_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Alert-Overed-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_Record_Status_Notification_Response:
		return ((ns__Dispatch_Record_Status_Notification_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Record-Status-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request_Response:
		return ((ns__Dispatch_History_Alert_Message_Request_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-History-Alert-Message-Request-Response");
	case SOAP_TYPE_ns__Dispatch_History_Alert_Request_Reponse:
		return ((ns__Dispatch_History_Alert_Request_Reponse *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-History-Alert-Request-Reponse");
	case SOAP_TYPE_ns__Dispatch_Alert_Request_Response:
		return ((ns__Dispatch_Alert_Request_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Alert-Request-Response");
	case SOAP_TYPE_ns__HistoryAlert:
		return ((ns__HistoryAlert *)ptr)->soap_out(soap, tag, id, "ns:HistoryAlert");
	case SOAP_TYPE_ns__Dispatch_Account_Info_Notification_Response:
		return ((ns__Dispatch_Account_Info_Notification_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Account-Info-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_Session_Status_Notification_Response:
		return ((ns__Dispatch_Session_Status_Notification_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Session-Status-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification_Response:
		return ((ns__Dispatch_Participant_Speak_Request_Notification_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Participant-Speak-Request-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification_Response:
		return ((ns__Dispatch_Participant_Connect_Request_Notification_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Participant-Connect-Request-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_Media_Message_Notification_Response:
		return ((ns__Dispatch_Media_Message_Notification_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Media-Message-Notification-Response");
	case SOAP_TYPE_ns__Media_Message:
		return ((ns__Media_Message *)ptr)->soap_out(soap, tag, id, "ns:Media-Message");
	case SOAP_TYPE_ns__Dispatch_Media_Message_Request_Response:
		return ((ns__Dispatch_Media_Message_Request_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Media-Message-Request-Response");
	case SOAP_TYPE_ns__MediaMessage:
		return ((ns__MediaMessage *)ptr)->soap_out(soap, tag, id, "ns:MediaMessage");
	case SOAP_TYPE_ns__Dispatch_Participant_Status_Notification_Response:
		return ((ns__Dispatch_Participant_Status_Notification_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Participant-Status-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication_Response:
		return ((ns__Dispatch_Join_Group_Request_Nofitication_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Join-Group-Request-Nofitication-Response");
	case SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification_Response:
		return ((ns__Dispatch_Dispatch_Participants_Notification_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Dispatch-Participants-Notification-Response");
	case SOAP_TYPE_ns__Dispatch_Modify_Participants_Response:
		return ((ns__Dispatch_Modify_Participants_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Modify-Participants-Response");
	case SOAP_TYPE_ns__Modify_Participant:
		return ((ns__Modify_Participant *)ptr)->soap_out(soap, tag, id, "ns:Modify-Participant");
	case SOAP_TYPE_ns__Entity_Status_Notification:
		return ((ns__Entity_Status_Notification *)ptr)->soap_out(soap, tag, id, "ns:Entity-Status-Notification");
	case SOAP_TYPE_ns__Dispatch_Entity_Nofitication_Response:
		return ((ns__Dispatch_Entity_Nofitication_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Entity-Nofitication-Response");
	case SOAP_TYPE_ns__Dispatch_Entity_Request_Response:
		return ((ns__Dispatch_Entity_Request_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Entity-Request-Response");
	case SOAP_TYPE_ns__EntityData:
		return ((ns__EntityData *)ptr)->soap_out(soap, tag, id, "ns:EntityData");
	case SOAP_TYPE_ns__Organization:
		return ((ns__Organization *)ptr)->soap_out(soap, tag, id, "ns:Organization");
	case SOAP_TYPE_ns__Dispatch_Append_Alert_Request_Response:
		return ((ns__Dispatch_Append_Alert_Request_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Append-Alert-Request-Response");
	case SOAP_TYPE_ns__Alert:
		return ((ns__Alert *)ptr)->soap_out(soap, tag, id, "ns:Alert");
	case SOAP_TYPE_ns__Dispatch_Modify_Group_Response:
		return ((ns__Dispatch_Modify_Group_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Modify-Group-Response");
	case SOAP_TYPE_ns__Dispatch_Append_Group_Response:
		return ((ns__Dispatch_Append_Group_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Append-Group-Response");
	case SOAP_TYPE_ns__Group:
		return ((ns__Group *)ptr)->soap_out(soap, tag, id, "ns:Group");
	case SOAP_TYPE_ns__Participant:
		return ((ns__Participant *)ptr)->soap_out(soap, tag, id, "ns:Participant");
	case SOAP_TYPE_ns__Unit:
		return ((ns__Unit *)ptr)->soap_out(soap, tag, id, "ns:Unit");
	case SOAP_TYPE_ns__Dispatch_Login_Response:
		return ((ns__Dispatch_Login_Response *)ptr)->soap_out(soap, tag, id, "ns:Dispatch-Login-Response");
	case SOAP_TYPE_ns__Account:
		return ((ns__Account *)ptr)->soap_out(soap, tag, id, "ns:Account");
	case SOAP_TYPE_ns__User:
		return ((ns__User *)ptr)->soap_out(soap, tag, id, "ns:User");
	case SOAP_TYPE_ns__Address:
		return ((ns__Address *)ptr)->soap_out(soap, tag, id, "ns:Address");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns__Entity:
		return ((ns__Entity *)ptr)->soap_out(soap, tag, id, "ns:Entity");
	case SOAP_TYPE_ns__Dispatch_Delete_History_Alert_Request:
		return soap_out_ns__Dispatch_Delete_History_Alert_Request(soap, tag, id, (const struct ns__Dispatch_Delete_History_Alert_Request *)ptr, "ns:Dispatch-Delete-History-Alert-Request");
	case SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request:
		return soap_out_ns__Dispatch_History_Alert_Message_Request(soap, tag, id, (const struct ns__Dispatch_History_Alert_Message_Request *)ptr, "ns:Dispatch-History-Alert-Message-Request");
	case SOAP_TYPE_ns__Dispatch_Alert_Request:
		return soap_out_ns__Dispatch_Alert_Request(soap, tag, id, (const struct ns__Dispatch_Alert_Request *)ptr, "ns:Dispatch-Alert-Request");
	case SOAP_TYPE_ns__Dispatch_History_Alert_Request:
		return soap_out_ns__Dispatch_History_Alert_Request(soap, tag, id, (const struct ns__Dispatch_History_Alert_Request *)ptr, "ns:Dispatch-History-Alert-Request");
	case SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification:
		return soap_out_ns__Dispatch_Alert_Overed_Notification(soap, tag, id, (const struct ns__Dispatch_Alert_Overed_Notification *)ptr, "ns:Dispatch-Alert-Overed-Notification");
	case SOAP_TYPE_ns__Dispatch_Stop_Alert_Request:
		return soap_out_ns__Dispatch_Stop_Alert_Request(soap, tag, id, (const struct ns__Dispatch_Stop_Alert_Request *)ptr, "ns:Dispatch-Stop-Alert-Request");
	case SOAP_TYPE_ns__Dispatch_Modify_Alert_Request:
		return soap_out_ns__Dispatch_Modify_Alert_Request(soap, tag, id, (const struct ns__Dispatch_Modify_Alert_Request *)ptr, "ns:Dispatch-Modify-Alert-Request");
	case SOAP_TYPE_ns__Dispatch_Append_Alert_Request:
		return soap_out_ns__Dispatch_Append_Alert_Request(soap, tag, id, (const struct ns__Dispatch_Append_Alert_Request *)ptr, "ns:Dispatch-Append-Alert-Request");
	case SOAP_TYPE_ns__Dispatch_Account_Info_Notification:
		return soap_out_ns__Dispatch_Account_Info_Notification(soap, tag, id, (const struct ns__Dispatch_Account_Info_Notification *)ptr, "ns:Dispatch-Account-Info-Notification");
	case SOAP_TYPE_ns__Dispatch_Subscribe_Account_Info_Request:
		return soap_out_ns__Dispatch_Subscribe_Account_Info_Request(soap, tag, id, (const struct ns__Dispatch_Subscribe_Account_Info_Request *)ptr, "ns:Dispatch-Subscribe-Account-Info-Request");
	case SOAP_TYPE_ns__Dispatch_Record_Status_Notification:
		return soap_out_ns__Dispatch_Record_Status_Notification(soap, tag, id, (const struct ns__Dispatch_Record_Status_Notification *)ptr, "ns:Dispatch-Record-Status-Notification");
	case SOAP_TYPE_ns__Dispatch_Stop_Record_Request:
		return soap_out_ns__Dispatch_Stop_Record_Request(soap, tag, id, (const struct ns__Dispatch_Stop_Record_Request *)ptr, "ns:Dispatch-Stop-Record-Request");
	case SOAP_TYPE_ns__Dispatch_Start_Record_Request:
		return soap_out_ns__Dispatch_Start_Record_Request(soap, tag, id, (const struct ns__Dispatch_Start_Record_Request *)ptr, "ns:Dispatch-Start-Record-Request");
	case SOAP_TYPE_ns__Dispatch_Send_Message_Request:
		return soap_out_ns__Dispatch_Send_Message_Request(soap, tag, id, (const struct ns__Dispatch_Send_Message_Request *)ptr, "ns:Dispatch-Send-Message-Request");
	case SOAP_TYPE_ns__Dispatch_Session_Status_Notification:
		return soap_out_ns__Dispatch_Session_Status_Notification(soap, tag, id, (const struct ns__Dispatch_Session_Status_Notification *)ptr, "ns:Dispatch-Session-Status-Notification");
	case SOAP_TYPE_ns__Dispatch_Leave_Group_Request:
		return soap_out_ns__Dispatch_Leave_Group_Request(soap, tag, id, (const struct ns__Dispatch_Leave_Group_Request *)ptr, "ns:Dispatch-Leave-Group-Request");
	case SOAP_TYPE_ns__Dispatch_Jion_Group_Request:
		return soap_out_ns__Dispatch_Jion_Group_Request(soap, tag, id, (const struct ns__Dispatch_Jion_Group_Request *)ptr, "ns:Dispatch-Jion-Group-Request");
	case SOAP_TYPE_ns__Dispatch_Appoint_Participant_Speak_Request:
		return soap_out_ns__Dispatch_Appoint_Participant_Speak_Request(soap, tag, id, (const struct ns__Dispatch_Appoint_Participant_Speak_Request *)ptr, "ns:Dispatch-Appoint-Participant-Speak-Request");
	case SOAP_TYPE_ns__Dispatch_Release_Participant_Token_Request:
		return soap_out_ns__Dispatch_Release_Participant_Token_Request(soap, tag, id, (const struct ns__Dispatch_Release_Participant_Token_Request *)ptr, "ns:Dispatch-Release-Participant-Token-Request");
	case SOAP_TYPE_ns__Dispatch_Drop_Participant_Request:
		return soap_out_ns__Dispatch_Drop_Participant_Request(soap, tag, id, (const struct ns__Dispatch_Drop_Participant_Request *)ptr, "ns:Dispatch-Drop-Participant-Request");
	case SOAP_TYPE_ns__Dispatch_Invite_Participant_Request:
		return soap_out_ns__Dispatch_Invite_Participant_Request(soap, tag, id, (const struct ns__Dispatch_Invite_Participant_Request *)ptr, "ns:Dispatch-Invite-Participant-Request");
	case SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification:
		return soap_out_ns__Dispatch_Participant_Speak_Request_Notification(soap, tag, id, (const struct ns__Dispatch_Participant_Speak_Request_Notification *)ptr, "ns:Dispatch-Participant-Speak-Request-Notification");
	case SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification:
		return soap_out_ns__Dispatch_Participant_Connect_Request_Notification(soap, tag, id, (const struct ns__Dispatch_Participant_Connect_Request_Notification *)ptr, "ns:Dispatch-Participant-Connect-Request-Notification");
	case SOAP_TYPE_ns__Dispatch_Media_Message_Notification:
		return soap_out_ns__Dispatch_Media_Message_Notification(soap, tag, id, (const struct ns__Dispatch_Media_Message_Notification *)ptr, "ns:Dispatch-Media-Message-Notification");
	case SOAP_TYPE_ns__Dispatch_Media_Message_Request:
		return soap_out_ns__Dispatch_Media_Message_Request(soap, tag, id, (const struct ns__Dispatch_Media_Message_Request *)ptr, "ns:Dispatch-Media-Message-Request");
	case SOAP_TYPE_ns__Dispatch_Participant_Status_Notification:
		return soap_out_ns__Dispatch_Participant_Status_Notification(soap, tag, id, (const struct ns__Dispatch_Participant_Status_Notification *)ptr, "ns:Dispatch-Participant-Status-Notification");
	case SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication:
		return soap_out_ns__Dispatch_Join_Group_Request_Nofitication(soap, tag, id, (const struct ns__Dispatch_Join_Group_Request_Nofitication *)ptr, "ns:Dispatch-Join-Group-Request-Nofitication");
	case SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification:
		return soap_out_ns__Dispatch_Dispatch_Participants_Notification(soap, tag, id, (const struct ns__Dispatch_Dispatch_Participants_Notification *)ptr, "ns:Dispatch-Dispatch-Participants-Notification");
	case SOAP_TYPE_ns__Dispatch_Delete_Group:
		return soap_out_ns__Dispatch_Delete_Group(soap, tag, id, (const struct ns__Dispatch_Delete_Group *)ptr, "ns:Dispatch-Delete-Group");
	case SOAP_TYPE_ns__Dispatch_Modify_Participants:
		return soap_out_ns__Dispatch_Modify_Participants(soap, tag, id, (const struct ns__Dispatch_Modify_Participants *)ptr, "ns:Dispatch-Modify-Participants");
	case SOAP_TYPE_ns__Dispatch_Modify_Group:
		return soap_out_ns__Dispatch_Modify_Group(soap, tag, id, (const struct ns__Dispatch_Modify_Group *)ptr, "ns:Dispatch-Modify-Group");
	case SOAP_TYPE_ns__Dispatch_Append_Group:
		return soap_out_ns__Dispatch_Append_Group(soap, tag, id, (const struct ns__Dispatch_Append_Group *)ptr, "ns:Dispatch-Append-Group");
	case SOAP_TYPE_ns__Dispatch_Entity_Nofitication:
		return soap_out_ns__Dispatch_Entity_Nofitication(soap, tag, id, (const struct ns__Dispatch_Entity_Nofitication *)ptr, "ns:Dispatch-Entity-Nofitication");
	case SOAP_TYPE_ns__Dispatch_Entity_Request:
		return soap_out_ns__Dispatch_Entity_Request(soap, tag, id, (const struct ns__Dispatch_Entity_Request *)ptr, "ns:Dispatch-Entity-Request");
	case SOAP_TYPE_ns__Dispatch_Logout:
		return soap_out_ns__Dispatch_Logout(soap, tag, id, (const struct ns__Dispatch_Logout *)ptr, "ns:Dispatch-Logout");
	case SOAP_TYPE_ns__Dispatch_Login:
		return soap_out_ns__Dispatch_Login(soap, tag, id, (const struct ns__Dispatch_Login *)ptr, "ns:Dispatch-Login");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns__Normal_Response:
		((ns__Normal_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification_Response:
		((ns__Dispatch_Alert_Overed_Notification_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Record_Status_Notification_Response:
		((ns__Dispatch_Record_Status_Notification_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request_Response:
		((ns__Dispatch_History_Alert_Message_Request_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_History_Alert_Request_Reponse:
		((ns__Dispatch_History_Alert_Request_Reponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Alert_Request_Response:
		((ns__Dispatch_Alert_Request_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__HistoryAlert:
		((ns__HistoryAlert *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Account_Info_Notification_Response:
		((ns__Dispatch_Account_Info_Notification_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Session_Status_Notification_Response:
		((ns__Dispatch_Session_Status_Notification_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification_Response:
		((ns__Dispatch_Participant_Speak_Request_Notification_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification_Response:
		((ns__Dispatch_Participant_Connect_Request_Notification_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Media_Message_Notification_Response:
		((ns__Dispatch_Media_Message_Notification_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Media_Message:
		((ns__Media_Message *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Media_Message_Request_Response:
		((ns__Dispatch_Media_Message_Request_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__MediaMessage:
		((ns__MediaMessage *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Participant_Status_Notification_Response:
		((ns__Dispatch_Participant_Status_Notification_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication_Response:
		((ns__Dispatch_Join_Group_Request_Nofitication_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification_Response:
		((ns__Dispatch_Dispatch_Participants_Notification_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Modify_Participants_Response:
		((ns__Dispatch_Modify_Participants_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Modify_Participant:
		((ns__Modify_Participant *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Entity_Status_Notification:
		((ns__Entity_Status_Notification *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Entity_Nofitication_Response:
		((ns__Dispatch_Entity_Nofitication_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Entity_Request_Response:
		((ns__Dispatch_Entity_Request_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__EntityData:
		((ns__EntityData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Organization:
		((ns__Organization *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Append_Alert_Request_Response:
		((ns__Dispatch_Append_Alert_Request_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Alert:
		((ns__Alert *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Modify_Group_Response:
		((ns__Dispatch_Modify_Group_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Append_Group_Response:
		((ns__Dispatch_Append_Group_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Group:
		((ns__Group *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Participant:
		((ns__Participant *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Unit:
		((ns__Unit *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Login_Response:
		((ns__Dispatch_Login_Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Account:
		((ns__Account *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__User:
		((ns__User *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Address:
		((ns__Address *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns__Entity:
		((ns__Entity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Dispatch_Delete_History_Alert_Request:
		soap_serialize_ns__Dispatch_Delete_History_Alert_Request(soap, (const struct ns__Dispatch_Delete_History_Alert_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request:
		soap_serialize_ns__Dispatch_History_Alert_Message_Request(soap, (const struct ns__Dispatch_History_Alert_Message_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Alert_Request:
		soap_serialize_ns__Dispatch_Alert_Request(soap, (const struct ns__Dispatch_Alert_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_History_Alert_Request:
		soap_serialize_ns__Dispatch_History_Alert_Request(soap, (const struct ns__Dispatch_History_Alert_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification:
		soap_serialize_ns__Dispatch_Alert_Overed_Notification(soap, (const struct ns__Dispatch_Alert_Overed_Notification *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Stop_Alert_Request:
		soap_serialize_ns__Dispatch_Stop_Alert_Request(soap, (const struct ns__Dispatch_Stop_Alert_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Modify_Alert_Request:
		soap_serialize_ns__Dispatch_Modify_Alert_Request(soap, (const struct ns__Dispatch_Modify_Alert_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Append_Alert_Request:
		soap_serialize_ns__Dispatch_Append_Alert_Request(soap, (const struct ns__Dispatch_Append_Alert_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Account_Info_Notification:
		soap_serialize_ns__Dispatch_Account_Info_Notification(soap, (const struct ns__Dispatch_Account_Info_Notification *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Subscribe_Account_Info_Request:
		soap_serialize_ns__Dispatch_Subscribe_Account_Info_Request(soap, (const struct ns__Dispatch_Subscribe_Account_Info_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Record_Status_Notification:
		soap_serialize_ns__Dispatch_Record_Status_Notification(soap, (const struct ns__Dispatch_Record_Status_Notification *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Stop_Record_Request:
		soap_serialize_ns__Dispatch_Stop_Record_Request(soap, (const struct ns__Dispatch_Stop_Record_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Start_Record_Request:
		soap_serialize_ns__Dispatch_Start_Record_Request(soap, (const struct ns__Dispatch_Start_Record_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Send_Message_Request:
		soap_serialize_ns__Dispatch_Send_Message_Request(soap, (const struct ns__Dispatch_Send_Message_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Session_Status_Notification:
		soap_serialize_ns__Dispatch_Session_Status_Notification(soap, (const struct ns__Dispatch_Session_Status_Notification *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Leave_Group_Request:
		soap_serialize_ns__Dispatch_Leave_Group_Request(soap, (const struct ns__Dispatch_Leave_Group_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Jion_Group_Request:
		soap_serialize_ns__Dispatch_Jion_Group_Request(soap, (const struct ns__Dispatch_Jion_Group_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Appoint_Participant_Speak_Request:
		soap_serialize_ns__Dispatch_Appoint_Participant_Speak_Request(soap, (const struct ns__Dispatch_Appoint_Participant_Speak_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Release_Participant_Token_Request:
		soap_serialize_ns__Dispatch_Release_Participant_Token_Request(soap, (const struct ns__Dispatch_Release_Participant_Token_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Drop_Participant_Request:
		soap_serialize_ns__Dispatch_Drop_Participant_Request(soap, (const struct ns__Dispatch_Drop_Participant_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Invite_Participant_Request:
		soap_serialize_ns__Dispatch_Invite_Participant_Request(soap, (const struct ns__Dispatch_Invite_Participant_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification:
		soap_serialize_ns__Dispatch_Participant_Speak_Request_Notification(soap, (const struct ns__Dispatch_Participant_Speak_Request_Notification *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification:
		soap_serialize_ns__Dispatch_Participant_Connect_Request_Notification(soap, (const struct ns__Dispatch_Participant_Connect_Request_Notification *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Media_Message_Notification:
		soap_serialize_ns__Dispatch_Media_Message_Notification(soap, (const struct ns__Dispatch_Media_Message_Notification *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Media_Message_Request:
		soap_serialize_ns__Dispatch_Media_Message_Request(soap, (const struct ns__Dispatch_Media_Message_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Participant_Status_Notification:
		soap_serialize_ns__Dispatch_Participant_Status_Notification(soap, (const struct ns__Dispatch_Participant_Status_Notification *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication:
		soap_serialize_ns__Dispatch_Join_Group_Request_Nofitication(soap, (const struct ns__Dispatch_Join_Group_Request_Nofitication *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification:
		soap_serialize_ns__Dispatch_Dispatch_Participants_Notification(soap, (const struct ns__Dispatch_Dispatch_Participants_Notification *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Delete_Group:
		soap_serialize_ns__Dispatch_Delete_Group(soap, (const struct ns__Dispatch_Delete_Group *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Modify_Participants:
		soap_serialize_ns__Dispatch_Modify_Participants(soap, (const struct ns__Dispatch_Modify_Participants *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Modify_Group:
		soap_serialize_ns__Dispatch_Modify_Group(soap, (const struct ns__Dispatch_Modify_Group *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Append_Group:
		soap_serialize_ns__Dispatch_Append_Group(soap, (const struct ns__Dispatch_Append_Group *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Entity_Nofitication:
		soap_serialize_ns__Dispatch_Entity_Nofitication(soap, (const struct ns__Dispatch_Entity_Nofitication *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Entity_Request:
		soap_serialize_ns__Dispatch_Entity_Request(soap, (const struct ns__Dispatch_Entity_Request *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Logout:
		soap_serialize_ns__Dispatch_Logout(soap, (const struct ns__Dispatch_Logout *)ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Login:
		soap_serialize_ns__Dispatch_Login(soap, (const struct ns__Dispatch_Login *)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Entity:
		return (void*)soap_instantiate_ns__Entity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Address:
		return (void*)soap_instantiate_ns__Address(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__User:
		return (void*)soap_instantiate_ns__User(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Account:
		return (void*)soap_instantiate_ns__Account(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Login_Response:
		return (void*)soap_instantiate_ns__Dispatch_Login_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Unit:
		return (void*)soap_instantiate_ns__Unit(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Participant:
		return (void*)soap_instantiate_ns__Participant(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Group:
		return (void*)soap_instantiate_ns__Group(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Append_Group_Response:
		return (void*)soap_instantiate_ns__Dispatch_Append_Group_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Modify_Group_Response:
		return (void*)soap_instantiate_ns__Dispatch_Modify_Group_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Alert:
		return (void*)soap_instantiate_ns__Alert(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Append_Alert_Request_Response:
		return (void*)soap_instantiate_ns__Dispatch_Append_Alert_Request_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Organization:
		return (void*)soap_instantiate_ns__Organization(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__EntityData:
		return (void*)soap_instantiate_ns__EntityData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Entity_Request_Response:
		return (void*)soap_instantiate_ns__Dispatch_Entity_Request_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Entity_Nofitication_Response:
		return (void*)soap_instantiate_ns__Dispatch_Entity_Nofitication_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Entity_Status_Notification:
		return (void*)soap_instantiate_ns__Entity_Status_Notification(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Modify_Participant:
		return (void*)soap_instantiate_ns__Modify_Participant(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Modify_Participants_Response:
		return (void*)soap_instantiate_ns__Dispatch_Modify_Participants_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification_Response:
		return (void*)soap_instantiate_ns__Dispatch_Dispatch_Participants_Notification_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication_Response:
		return (void*)soap_instantiate_ns__Dispatch_Join_Group_Request_Nofitication_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Participant_Status_Notification_Response:
		return (void*)soap_instantiate_ns__Dispatch_Participant_Status_Notification_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__MediaMessage:
		return (void*)soap_instantiate_ns__MediaMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Media_Message_Request_Response:
		return (void*)soap_instantiate_ns__Dispatch_Media_Message_Request_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Media_Message:
		return (void*)soap_instantiate_ns__Media_Message(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Media_Message_Notification_Response:
		return (void*)soap_instantiate_ns__Dispatch_Media_Message_Notification_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification_Response:
		return (void*)soap_instantiate_ns__Dispatch_Participant_Connect_Request_Notification_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification_Response:
		return (void*)soap_instantiate_ns__Dispatch_Participant_Speak_Request_Notification_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Session_Status_Notification_Response:
		return (void*)soap_instantiate_ns__Dispatch_Session_Status_Notification_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Account_Info_Notification_Response:
		return (void*)soap_instantiate_ns__Dispatch_Account_Info_Notification_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HistoryAlert:
		return (void*)soap_instantiate_ns__HistoryAlert(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Alert_Request_Response:
		return (void*)soap_instantiate_ns__Dispatch_Alert_Request_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_History_Alert_Request_Reponse:
		return (void*)soap_instantiate_ns__Dispatch_History_Alert_Request_Reponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request_Response:
		return (void*)soap_instantiate_ns__Dispatch_History_Alert_Message_Request_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Record_Status_Notification_Response:
		return (void*)soap_instantiate_ns__Dispatch_Record_Status_Notification_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification_Response:
		return (void*)soap_instantiate_ns__Dispatch_Alert_Overed_Notification_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Normal_Response:
		return (void*)soap_instantiate_ns__Normal_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Login:
		return (void*)soap_instantiate_ns__Dispatch_Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Logout:
		return (void*)soap_instantiate_ns__Dispatch_Logout(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Entity_Request:
		return (void*)soap_instantiate_ns__Dispatch_Entity_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Entity_Nofitication:
		return (void*)soap_instantiate_ns__Dispatch_Entity_Nofitication(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Append_Group:
		return (void*)soap_instantiate_ns__Dispatch_Append_Group(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Modify_Group:
		return (void*)soap_instantiate_ns__Dispatch_Modify_Group(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Modify_Participants:
		return (void*)soap_instantiate_ns__Dispatch_Modify_Participants(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Delete_Group:
		return (void*)soap_instantiate_ns__Dispatch_Delete_Group(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification:
		return (void*)soap_instantiate_ns__Dispatch_Dispatch_Participants_Notification(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication:
		return (void*)soap_instantiate_ns__Dispatch_Join_Group_Request_Nofitication(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Participant_Status_Notification:
		return (void*)soap_instantiate_ns__Dispatch_Participant_Status_Notification(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Media_Message_Request:
		return (void*)soap_instantiate_ns__Dispatch_Media_Message_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Media_Message_Notification:
		return (void*)soap_instantiate_ns__Dispatch_Media_Message_Notification(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification:
		return (void*)soap_instantiate_ns__Dispatch_Participant_Connect_Request_Notification(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification:
		return (void*)soap_instantiate_ns__Dispatch_Participant_Speak_Request_Notification(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Invite_Participant_Request:
		return (void*)soap_instantiate_ns__Dispatch_Invite_Participant_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Drop_Participant_Request:
		return (void*)soap_instantiate_ns__Dispatch_Drop_Participant_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Release_Participant_Token_Request:
		return (void*)soap_instantiate_ns__Dispatch_Release_Participant_Token_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Appoint_Participant_Speak_Request:
		return (void*)soap_instantiate_ns__Dispatch_Appoint_Participant_Speak_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Jion_Group_Request:
		return (void*)soap_instantiate_ns__Dispatch_Jion_Group_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Leave_Group_Request:
		return (void*)soap_instantiate_ns__Dispatch_Leave_Group_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Session_Status_Notification:
		return (void*)soap_instantiate_ns__Dispatch_Session_Status_Notification(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Send_Message_Request:
		return (void*)soap_instantiate_ns__Dispatch_Send_Message_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Start_Record_Request:
		return (void*)soap_instantiate_ns__Dispatch_Start_Record_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Stop_Record_Request:
		return (void*)soap_instantiate_ns__Dispatch_Stop_Record_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Record_Status_Notification:
		return (void*)soap_instantiate_ns__Dispatch_Record_Status_Notification(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Subscribe_Account_Info_Request:
		return (void*)soap_instantiate_ns__Dispatch_Subscribe_Account_Info_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Account_Info_Notification:
		return (void*)soap_instantiate_ns__Dispatch_Account_Info_Notification(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Append_Alert_Request:
		return (void*)soap_instantiate_ns__Dispatch_Append_Alert_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Modify_Alert_Request:
		return (void*)soap_instantiate_ns__Dispatch_Modify_Alert_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Stop_Alert_Request:
		return (void*)soap_instantiate_ns__Dispatch_Stop_Alert_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification:
		return (void*)soap_instantiate_ns__Dispatch_Alert_Overed_Notification(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_History_Alert_Request:
		return (void*)soap_instantiate_ns__Dispatch_History_Alert_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Alert_Request:
		return (void*)soap_instantiate_ns__Dispatch_Alert_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request:
		return (void*)soap_instantiate_ns__Dispatch_History_Alert_Message_Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Dispatch_Delete_History_Alert_Request:
		return (void*)soap_instantiate_ns__Dispatch_Delete_History_Alert_Request(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__listTemplateOfns__Account:
		return (void*)soap_instantiate_std__listTemplateOfns__Account(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__listTemplateOfstd__string:
		return (void*)soap_instantiate_std__listTemplateOfstd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__listTemplateOfns__HistoryAlert:
		return (void*)soap_instantiate_std__listTemplateOfns__HistoryAlert(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__listTemplateOfns__MediaMessage:
		return (void*)soap_instantiate_std__listTemplateOfns__MediaMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__listTemplateOfns__Participant:
		return (void*)soap_instantiate_std__listTemplateOfns__Participant(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__listTemplateOfns__Entity:
		return (void*)soap_instantiate_std__listTemplateOfns__Entity(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns__Entity:
		if (p->size < 0)
			SOAP_DELETE((ns__Entity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Entity*)p->ptr);
		break;
	case SOAP_TYPE_ns__Address:
		if (p->size < 0)
			SOAP_DELETE((ns__Address*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Address*)p->ptr);
		break;
	case SOAP_TYPE_ns__User:
		if (p->size < 0)
			SOAP_DELETE((ns__User*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__User*)p->ptr);
		break;
	case SOAP_TYPE_ns__Account:
		if (p->size < 0)
			SOAP_DELETE((ns__Account*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Account*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Login_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Login_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Login_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Unit:
		if (p->size < 0)
			SOAP_DELETE((ns__Unit*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Unit*)p->ptr);
		break;
	case SOAP_TYPE_ns__Participant:
		if (p->size < 0)
			SOAP_DELETE((ns__Participant*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Participant*)p->ptr);
		break;
	case SOAP_TYPE_ns__Group:
		if (p->size < 0)
			SOAP_DELETE((ns__Group*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Group*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Append_Group_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Append_Group_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Append_Group_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Modify_Group_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Modify_Group_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Modify_Group_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Alert:
		if (p->size < 0)
			SOAP_DELETE((ns__Alert*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Alert*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Append_Alert_Request_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Append_Alert_Request_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Append_Alert_Request_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Organization:
		if (p->size < 0)
			SOAP_DELETE((ns__Organization*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Organization*)p->ptr);
		break;
	case SOAP_TYPE_ns__EntityData:
		if (p->size < 0)
			SOAP_DELETE((ns__EntityData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__EntityData*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Entity_Request_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Entity_Request_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Entity_Request_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Entity_Nofitication_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Entity_Nofitication_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Entity_Nofitication_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Entity_Status_Notification:
		if (p->size < 0)
			SOAP_DELETE((ns__Entity_Status_Notification*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Entity_Status_Notification*)p->ptr);
		break;
	case SOAP_TYPE_ns__Modify_Participant:
		if (p->size < 0)
			SOAP_DELETE((ns__Modify_Participant*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Modify_Participant*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Modify_Participants_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Modify_Participants_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Modify_Participants_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Dispatch_Participants_Notification_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Dispatch_Participants_Notification_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Join_Group_Request_Nofitication_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Join_Group_Request_Nofitication_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Participant_Status_Notification_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Participant_Status_Notification_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Participant_Status_Notification_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__MediaMessage:
		if (p->size < 0)
			SOAP_DELETE((ns__MediaMessage*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__MediaMessage*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Media_Message_Request_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Media_Message_Request_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Media_Message_Request_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Media_Message:
		if (p->size < 0)
			SOAP_DELETE((ns__Media_Message*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Media_Message*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Media_Message_Notification_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Media_Message_Notification_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Media_Message_Notification_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Participant_Connect_Request_Notification_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Participant_Connect_Request_Notification_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Participant_Speak_Request_Notification_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Participant_Speak_Request_Notification_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Session_Status_Notification_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Session_Status_Notification_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Session_Status_Notification_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Account_Info_Notification_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Account_Info_Notification_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Account_Info_Notification_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__HistoryAlert:
		if (p->size < 0)
			SOAP_DELETE((ns__HistoryAlert*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__HistoryAlert*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Alert_Request_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Alert_Request_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Alert_Request_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_History_Alert_Request_Reponse:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_History_Alert_Request_Reponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_History_Alert_Request_Reponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_History_Alert_Message_Request_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_History_Alert_Message_Request_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Record_Status_Notification_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Record_Status_Notification_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Record_Status_Notification_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Dispatch_Alert_Overed_Notification_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Dispatch_Alert_Overed_Notification_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Normal_Response:
		if (p->size < 0)
			SOAP_DELETE((ns__Normal_Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__Normal_Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Login:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Login*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Logout:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Logout*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Logout*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Entity_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Entity_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Entity_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Entity_Nofitication:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Entity_Nofitication*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Entity_Nofitication*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Append_Group:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Append_Group*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Append_Group*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Modify_Group:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Modify_Group*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Modify_Group*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Modify_Participants:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Modify_Participants*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Modify_Participants*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Delete_Group:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Delete_Group*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Delete_Group*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Dispatch_Participants_Notification*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Dispatch_Participants_Notification*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Join_Group_Request_Nofitication*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Join_Group_Request_Nofitication*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Participant_Status_Notification:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Participant_Status_Notification*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Participant_Status_Notification*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Media_Message_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Media_Message_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Media_Message_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Media_Message_Notification:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Media_Message_Notification*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Media_Message_Notification*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Participant_Connect_Request_Notification*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Participant_Connect_Request_Notification*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Participant_Speak_Request_Notification*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Participant_Speak_Request_Notification*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Invite_Participant_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Invite_Participant_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Invite_Participant_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Drop_Participant_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Drop_Participant_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Drop_Participant_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Release_Participant_Token_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Release_Participant_Token_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Release_Participant_Token_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Appoint_Participant_Speak_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Appoint_Participant_Speak_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Appoint_Participant_Speak_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Jion_Group_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Jion_Group_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Jion_Group_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Leave_Group_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Leave_Group_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Leave_Group_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Session_Status_Notification:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Session_Status_Notification*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Session_Status_Notification*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Send_Message_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Send_Message_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Send_Message_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Start_Record_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Start_Record_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Start_Record_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Stop_Record_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Stop_Record_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Stop_Record_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Record_Status_Notification:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Record_Status_Notification*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Record_Status_Notification*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Subscribe_Account_Info_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Subscribe_Account_Info_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Subscribe_Account_Info_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Account_Info_Notification:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Account_Info_Notification*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Account_Info_Notification*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Append_Alert_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Append_Alert_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Append_Alert_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Modify_Alert_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Modify_Alert_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Modify_Alert_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Stop_Alert_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Stop_Alert_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Stop_Alert_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Alert_Overed_Notification*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Alert_Overed_Notification*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_History_Alert_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_History_Alert_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_History_Alert_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Alert_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Alert_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Alert_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_History_Alert_Message_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_History_Alert_Message_Request*)p->ptr);
		break;
	case SOAP_TYPE_ns__Dispatch_Delete_History_Alert_Request:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Dispatch_Delete_History_Alert_Request*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Dispatch_Delete_History_Alert_Request*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__listTemplateOfns__Account:
		if (p->size < 0)
			SOAP_DELETE((std::list<ns__Account >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::list<ns__Account >*)p->ptr);
		break;
	case SOAP_TYPE_std__listTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE((std::list<std::string >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::list<std::string >*)p->ptr);
		break;
	case SOAP_TYPE_std__listTemplateOfns__HistoryAlert:
		if (p->size < 0)
			SOAP_DELETE((std::list<ns__HistoryAlert >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::list<ns__HistoryAlert >*)p->ptr);
		break;
	case SOAP_TYPE_std__listTemplateOfns__MediaMessage:
		if (p->size < 0)
			SOAP_DELETE((std::list<ns__MediaMessage >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::list<ns__MediaMessage >*)p->ptr);
		break;
	case SOAP_TYPE_std__listTemplateOfns__Participant:
		if (p->size < 0)
			SOAP_DELETE((std::list<ns__Participant >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::list<ns__Participant >*)p->ptr);
		break;
	case SOAP_TYPE_std__listTemplateOfns__Entity:
		if (p->size < 0)
			SOAP_DELETE((std::list<ns__Entity >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::list<ns__Entity >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__listTemplateOfns__Account:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		((std::list<ns__Account >*)p)->insert(((std::list<ns__Account >*)p)->end(), *(ns__Account *)q);
		break;
	case SOAP_TYPE_std__listTemplateOfstd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		((std::list<std::string >*)p)->insert(((std::list<std::string >*)p)->end(), *(std::string *)q);
		break;
	case SOAP_TYPE_std__listTemplateOfns__HistoryAlert:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		((std::list<ns__HistoryAlert >*)p)->insert(((std::list<ns__HistoryAlert >*)p)->end(), *(ns__HistoryAlert *)q);
		break;
	case SOAP_TYPE_std__listTemplateOfns__MediaMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		((std::list<ns__MediaMessage >*)p)->insert(((std::list<ns__MediaMessage >*)p)->end(), *(ns__MediaMessage *)q);
		break;
	case SOAP_TYPE_std__listTemplateOfns__Participant:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		((std::list<ns__Participant >*)p)->insert(((std::list<ns__Participant >*)p)->end(), *(ns__Participant *)q);
		break;
	case SOAP_TYPE_std__listTemplateOfns__Entity:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		((std::list<ns__Entity >*)p)->insert(((std::list<ns__Entity >*)p)->end(), *(ns__Entity *)q);
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__EntityType(struct soap *soap, enum ns__EntityType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__EntityType
	*a = SOAP_DEFAULT_ns__EntityType;
#else
	*a = (enum ns__EntityType)0;
#endif
}

static const struct soap_code_map soap_codes_ns__EntityType[] =
{	{ (long)UNIT, "UNIT" },
	{ (long)ACCOUNT, "ACCOUNT" },
	{ (long)USER, "USER" },
	{ (long)GROUP, "GROUP" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__EntityType2s(struct soap *soap, enum ns__EntityType n)
{	const char *s = soap_code_str(soap_codes_ns__EntityType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__EntityType(struct soap *soap, const char *tag, int id, const enum ns__EntityType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__EntityType), type) || soap_send(soap, soap_ns__EntityType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__EntityType(struct soap *soap, const char *s, enum ns__EntityType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__EntityType, s);
	if (map)
		*a = (enum ns__EntityType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 3)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__EntityType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__EntityType * SOAP_FMAC4 soap_in_ns__EntityType(struct soap *soap, const char *tag, enum ns__EntityType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__EntityType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__EntityType, sizeof(enum ns__EntityType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns__EntityType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__EntityType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__EntityType, 0, sizeof(enum ns__EntityType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__EntityType(struct soap *soap, const enum ns__EntityType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__EntityType);
	if (soap_out_ns__EntityType(soap, tag?tag:"ns:EntityType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__EntityType * SOAP_FMAC4 soap_get_ns__EntityType(struct soap *soap, enum ns__EntityType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__EntityType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SubscribeType(struct soap *soap, enum ns__SubscribeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__SubscribeType
	*a = SOAP_DEFAULT_ns__SubscribeType;
#else
	*a = (enum ns__SubscribeType)0;
#endif
}

static const struct soap_code_map soap_codes_ns__SubscribeType[] =
{	{ (long)Gis, "Gis" },
	{ (long)Status, "Status" },
	{ (long)Profession, "Profession" },
	{ (long)Gis_status, "Gis-status" },
	{ (long)Gis_profession, "Gis-profession" },
	{ (long)Status_profession, "Status-profession" },
	{ (long)Gis_status_profession, "Gis-status-profession" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__SubscribeType2s(struct soap *soap, enum ns__SubscribeType n)
{	const char *s = soap_code_str(soap_codes_ns__SubscribeType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SubscribeType(struct soap *soap, const char *tag, int id, const enum ns__SubscribeType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__SubscribeType), type) || soap_send(soap, soap_ns__SubscribeType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__SubscribeType(struct soap *soap, const char *s, enum ns__SubscribeType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__SubscribeType, s);
	if (map)
		*a = (enum ns__SubscribeType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 6)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__SubscribeType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__SubscribeType * SOAP_FMAC4 soap_in_ns__SubscribeType(struct soap *soap, const char *tag, enum ns__SubscribeType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__SubscribeType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__SubscribeType, sizeof(enum ns__SubscribeType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns__SubscribeType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__SubscribeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__SubscribeType, 0, sizeof(enum ns__SubscribeType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SubscribeType(struct soap *soap, const enum ns__SubscribeType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__SubscribeType);
	if (soap_out_ns__SubscribeType(soap, tag?tag:"ns:SubscribeType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__SubscribeType * SOAP_FMAC4 soap_get_ns__SubscribeType(struct soap *soap, enum ns__SubscribeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__SubscribeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ProfessionStatus(struct soap *soap, enum ns__ProfessionStatus *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__ProfessionStatus
	*a = SOAP_DEFAULT_ns__ProfessionStatus;
#else
	*a = (enum ns__ProfessionStatus)0;
#endif
}

static const struct soap_code_map soap_codes_ns__ProfessionStatus[] =
{	{ (long)Standby, "Standby" },
	{ (long)Duty, "Duty" },
	{ (long)Turnout, "Turnout" },
	{ (long)Training, "Training" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__ProfessionStatus2s(struct soap *soap, enum ns__ProfessionStatus n)
{	const char *s = soap_code_str(soap_codes_ns__ProfessionStatus, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ProfessionStatus(struct soap *soap, const char *tag, int id, const enum ns__ProfessionStatus *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ProfessionStatus), type) || soap_send(soap, soap_ns__ProfessionStatus2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__ProfessionStatus(struct soap *soap, const char *s, enum ns__ProfessionStatus *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__ProfessionStatus, s);
	if (map)
		*a = (enum ns__ProfessionStatus)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 3)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__ProfessionStatus)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__ProfessionStatus * SOAP_FMAC4 soap_in_ns__ProfessionStatus(struct soap *soap, const char *tag, enum ns__ProfessionStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__ProfessionStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ProfessionStatus, sizeof(enum ns__ProfessionStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns__ProfessionStatus(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__ProfessionStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ProfessionStatus, 0, sizeof(enum ns__ProfessionStatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ProfessionStatus(struct soap *soap, const enum ns__ProfessionStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__ProfessionStatus);
	if (soap_out_ns__ProfessionStatus(soap, tag?tag:"ns:ProfessionStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__ProfessionStatus * SOAP_FMAC4 soap_get_ns__ProfessionStatus(struct soap *soap, enum ns__ProfessionStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ProfessionStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__EntityNotifyType(struct soap *soap, enum ns__EntityNotifyType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__EntityNotifyType
	*a = SOAP_DEFAULT_ns__EntityNotifyType;
#else
	*a = (enum ns__EntityNotifyType)0;
#endif
}

static const struct soap_code_map soap_codes_ns__EntityNotifyType[] =
{	{ (long)Created, "Created" },
	{ (long)Modify, "Modify" },
	{ (long)Update, "Update" },
	{ (long)Deleted, "Deleted" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__EntityNotifyType2s(struct soap *soap, enum ns__EntityNotifyType n)
{	const char *s = soap_code_str(soap_codes_ns__EntityNotifyType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__EntityNotifyType(struct soap *soap, const char *tag, int id, const enum ns__EntityNotifyType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__EntityNotifyType), type) || soap_send(soap, soap_ns__EntityNotifyType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__EntityNotifyType(struct soap *soap, const char *s, enum ns__EntityNotifyType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__EntityNotifyType, s);
	if (map)
		*a = (enum ns__EntityNotifyType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 3)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__EntityNotifyType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__EntityNotifyType * SOAP_FMAC4 soap_in_ns__EntityNotifyType(struct soap *soap, const char *tag, enum ns__EntityNotifyType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__EntityNotifyType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__EntityNotifyType, sizeof(enum ns__EntityNotifyType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns__EntityNotifyType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__EntityNotifyType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__EntityNotifyType, 0, sizeof(enum ns__EntityNotifyType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__EntityNotifyType(struct soap *soap, const enum ns__EntityNotifyType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__EntityNotifyType);
	if (soap_out_ns__EntityNotifyType(soap, tag?tag:"ns:EntityNotifyType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__EntityNotifyType * SOAP_FMAC4 soap_get_ns__EntityNotifyType(struct soap *soap, enum ns__EntityNotifyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__EntityNotifyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AlertLevel(struct soap *soap, enum ns__AlertLevel *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__AlertLevel
	*a = SOAP_DEFAULT_ns__AlertLevel;
#else
	*a = (enum ns__AlertLevel)0;
#endif
}

static const struct soap_code_map soap_codes_ns__AlertLevel[] =
{	{ (long)Exigency, "Exigency" },
	{ (long)Importance, "Importance" },
	{ (long)Subordination, "Subordination" },
	{ (long)Ordinary, "Ordinary" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__AlertLevel2s(struct soap *soap, enum ns__AlertLevel n)
{	const char *s = soap_code_str(soap_codes_ns__AlertLevel, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AlertLevel(struct soap *soap, const char *tag, int id, const enum ns__AlertLevel *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__AlertLevel), type) || soap_send(soap, soap_ns__AlertLevel2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__AlertLevel(struct soap *soap, const char *s, enum ns__AlertLevel *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__AlertLevel, s);
	if (map)
		*a = (enum ns__AlertLevel)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 3)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__AlertLevel)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__AlertLevel * SOAP_FMAC4 soap_in_ns__AlertLevel(struct soap *soap, const char *tag, enum ns__AlertLevel *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__AlertLevel *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__AlertLevel, sizeof(enum ns__AlertLevel), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns__AlertLevel(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__AlertLevel *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__AlertLevel, 0, sizeof(enum ns__AlertLevel), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AlertLevel(struct soap *soap, const enum ns__AlertLevel *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__AlertLevel);
	if (soap_out_ns__AlertLevel(soap, tag?tag:"ns:AlertLevel", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__AlertLevel * SOAP_FMAC4 soap_get_ns__AlertLevel(struct soap *soap, enum ns__AlertLevel *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__AlertLevel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AlertStatus(struct soap *soap, enum ns__AlertStatus *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__AlertStatus
	*a = SOAP_DEFAULT_ns__AlertStatus;
#else
	*a = (enum ns__AlertStatus)0;
#endif
}

static const struct soap_code_map soap_codes_ns__AlertStatus[] =
{	{ (long)AlertActive, "AlertActive" },
	{ (long)AlertOver, "AlertOver" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__AlertStatus2s(struct soap *soap, enum ns__AlertStatus n)
{	const char *s = soap_code_str(soap_codes_ns__AlertStatus, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AlertStatus(struct soap *soap, const char *tag, int id, const enum ns__AlertStatus *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__AlertStatus), type) || soap_send(soap, soap_ns__AlertStatus2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__AlertStatus(struct soap *soap, const char *s, enum ns__AlertStatus *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__AlertStatus, s);
	if (map)
		*a = (enum ns__AlertStatus)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__AlertStatus)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__AlertStatus * SOAP_FMAC4 soap_in_ns__AlertStatus(struct soap *soap, const char *tag, enum ns__AlertStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__AlertStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__AlertStatus, sizeof(enum ns__AlertStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns__AlertStatus(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__AlertStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__AlertStatus, 0, sizeof(enum ns__AlertStatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AlertStatus(struct soap *soap, const enum ns__AlertStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__AlertStatus);
	if (soap_out_ns__AlertStatus(soap, tag?tag:"ns:AlertStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__AlertStatus * SOAP_FMAC4 soap_get_ns__AlertStatus(struct soap *soap, enum ns__AlertStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__AlertStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__RecordStatus(struct soap *soap, enum ns__RecordStatus *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__RecordStatus
	*a = SOAP_DEFAULT_ns__RecordStatus;
#else
	*a = (enum ns__RecordStatus)0;
#endif
}

static const struct soap_code_map soap_codes_ns__RecordStatus[] =
{	{ (long)RecordStop, "RecordStop" },
	{ (long)RecordStart, "RecordStart" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__RecordStatus2s(struct soap *soap, enum ns__RecordStatus n)
{	const char *s = soap_code_str(soap_codes_ns__RecordStatus, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__RecordStatus(struct soap *soap, const char *tag, int id, const enum ns__RecordStatus *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__RecordStatus), type) || soap_send(soap, soap_ns__RecordStatus2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__RecordStatus(struct soap *soap, const char *s, enum ns__RecordStatus *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__RecordStatus, s);
	if (map)
		*a = (enum ns__RecordStatus)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__RecordStatus)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__RecordStatus * SOAP_FMAC4 soap_in_ns__RecordStatus(struct soap *soap, const char *tag, enum ns__RecordStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__RecordStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__RecordStatus, sizeof(enum ns__RecordStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns__RecordStatus(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__RecordStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__RecordStatus, 0, sizeof(enum ns__RecordStatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__RecordStatus(struct soap *soap, const enum ns__RecordStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__RecordStatus);
	if (soap_out_ns__RecordStatus(soap, tag?tag:"ns:RecordStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__RecordStatus * SOAP_FMAC4 soap_get_ns__RecordStatus(struct soap *soap, enum ns__RecordStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__RecordStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__RecordType(struct soap *soap, enum ns__RecordType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__RecordType
	*a = SOAP_DEFAULT_ns__RecordType;
#else
	*a = (enum ns__RecordType)0;
#endif
}

static const struct soap_code_map soap_codes_ns__RecordType[] =
{	{ (long)DontRecord, "DontRecord" },
	{ (long)AutoRecord, "AutoRecord" },
	{ (long)ManualRecord, "ManualRecord" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__RecordType2s(struct soap *soap, enum ns__RecordType n)
{	const char *s = soap_code_str(soap_codes_ns__RecordType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__RecordType(struct soap *soap, const char *tag, int id, const enum ns__RecordType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__RecordType), type) || soap_send(soap, soap_ns__RecordType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__RecordType(struct soap *soap, const char *s, enum ns__RecordType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__RecordType, s);
	if (map)
		*a = (enum ns__RecordType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__RecordType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__RecordType * SOAP_FMAC4 soap_in_ns__RecordType(struct soap *soap, const char *tag, enum ns__RecordType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__RecordType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__RecordType, sizeof(enum ns__RecordType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns__RecordType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__RecordType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__RecordType, 0, sizeof(enum ns__RecordType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__RecordType(struct soap *soap, const enum ns__RecordType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__RecordType);
	if (soap_out_ns__RecordType(soap, tag?tag:"ns:RecordType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__RecordType * SOAP_FMAC4 soap_get_ns__RecordType(struct soap *soap, enum ns__RecordType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__RecordType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SessionStatus(struct soap *soap, enum ns__SessionStatus *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__SessionStatus
	*a = SOAP_DEFAULT_ns__SessionStatus;
#else
	*a = (enum ns__SessionStatus)0;
#endif
}

static const struct soap_code_map soap_codes_ns__SessionStatus[] =
{	{ (long)IDLE, "IDLE" },
	{ (long)InGroup, "InGroup" },
	{ (long)Talking, "Talking" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__SessionStatus2s(struct soap *soap, enum ns__SessionStatus n)
{	const char *s = soap_code_str(soap_codes_ns__SessionStatus, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SessionStatus(struct soap *soap, const char *tag, int id, const enum ns__SessionStatus *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__SessionStatus), type) || soap_send(soap, soap_ns__SessionStatus2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__SessionStatus(struct soap *soap, const char *s, enum ns__SessionStatus *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__SessionStatus, s);
	if (map)
		*a = (enum ns__SessionStatus)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__SessionStatus)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__SessionStatus * SOAP_FMAC4 soap_in_ns__SessionStatus(struct soap *soap, const char *tag, enum ns__SessionStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__SessionStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__SessionStatus, sizeof(enum ns__SessionStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns__SessionStatus(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__SessionStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__SessionStatus, 0, sizeof(enum ns__SessionStatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SessionStatus(struct soap *soap, const enum ns__SessionStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__SessionStatus);
	if (soap_out_ns__SessionStatus(soap, tag?tag:"ns:SessionStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__SessionStatus * SOAP_FMAC4 soap_get_ns__SessionStatus(struct soap *soap, enum ns__SessionStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__SessionStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__TokenPrivilege(struct soap *soap, enum ns__TokenPrivilege *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__TokenPrivilege
	*a = SOAP_DEFAULT_ns__TokenPrivilege;
#else
	*a = (enum ns__TokenPrivilege)0;
#endif
}

static const struct soap_code_map soap_codes_ns__TokenPrivilege[] =
{	{ (long)TokenForbid, "TokenForbid" },
	{ (long)TokenFreedom, "TokenFreedom" },
	{ (long)TokenPolicy, "TokenPolicy" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__TokenPrivilege2s(struct soap *soap, enum ns__TokenPrivilege n)
{	const char *s = soap_code_str(soap_codes_ns__TokenPrivilege, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__TokenPrivilege(struct soap *soap, const char *tag, int id, const enum ns__TokenPrivilege *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__TokenPrivilege), type) || soap_send(soap, soap_ns__TokenPrivilege2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__TokenPrivilege(struct soap *soap, const char *s, enum ns__TokenPrivilege *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__TokenPrivilege, s);
	if (map)
		*a = (enum ns__TokenPrivilege)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__TokenPrivilege)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__TokenPrivilege * SOAP_FMAC4 soap_in_ns__TokenPrivilege(struct soap *soap, const char *tag, enum ns__TokenPrivilege *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__TokenPrivilege *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__TokenPrivilege, sizeof(enum ns__TokenPrivilege), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns__TokenPrivilege(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__TokenPrivilege *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__TokenPrivilege, 0, sizeof(enum ns__TokenPrivilege), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__TokenPrivilege(struct soap *soap, const enum ns__TokenPrivilege *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__TokenPrivilege);
	if (soap_out_ns__TokenPrivilege(soap, tag?tag:"ns:TokenPrivilege", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__TokenPrivilege * SOAP_FMAC4 soap_get_ns__TokenPrivilege(struct soap *soap, enum ns__TokenPrivilege *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__TokenPrivilege(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__CallPrivilege(struct soap *soap, enum ns__CallPrivilege *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__CallPrivilege
	*a = SOAP_DEFAULT_ns__CallPrivilege;
#else
	*a = (enum ns__CallPrivilege)0;
#endif
}

static const struct soap_code_map soap_codes_ns__CallPrivilege[] =
{	{ (long)CallForbid, "CallForbid" },
	{ (long)CallFreedom, "CallFreedom" },
	{ (long)CallPolicy, "CallPolicy" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__CallPrivilege2s(struct soap *soap, enum ns__CallPrivilege n)
{	const char *s = soap_code_str(soap_codes_ns__CallPrivilege, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CallPrivilege(struct soap *soap, const char *tag, int id, const enum ns__CallPrivilege *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__CallPrivilege), type) || soap_send(soap, soap_ns__CallPrivilege2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__CallPrivilege(struct soap *soap, const char *s, enum ns__CallPrivilege *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__CallPrivilege, s);
	if (map)
		*a = (enum ns__CallPrivilege)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__CallPrivilege)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__CallPrivilege * SOAP_FMAC4 soap_in_ns__CallPrivilege(struct soap *soap, const char *tag, enum ns__CallPrivilege *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__CallPrivilege *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__CallPrivilege, sizeof(enum ns__CallPrivilege), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns__CallPrivilege(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__CallPrivilege *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__CallPrivilege, 0, sizeof(enum ns__CallPrivilege), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__CallPrivilege(struct soap *soap, const enum ns__CallPrivilege *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__CallPrivilege);
	if (soap_out_ns__CallPrivilege(soap, tag?tag:"ns:CallPrivilege", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__CallPrivilege * SOAP_FMAC4 soap_get_ns__CallPrivilege(struct soap *soap, enum ns__CallPrivilege *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__CallPrivilege(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AccountType(struct soap *soap, enum ns__AccountType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__AccountType
	*a = SOAP_DEFAULT_ns__AccountType;
#else
	*a = (enum ns__AccountType)0;
#endif
}

static const struct soap_code_map soap_codes_ns__AccountType[] =
{	{ (long)Dispatcher, "Dispatcher" },
	{ (long)Terminal, "Terminal" },
	{ (long)Record, "Record" },
	{ (long)MediaGateway, "MediaGateway" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__AccountType2s(struct soap *soap, enum ns__AccountType n)
{	const char *s = soap_code_str(soap_codes_ns__AccountType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AccountType(struct soap *soap, const char *tag, int id, const enum ns__AccountType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__AccountType), type) || soap_send(soap, soap_ns__AccountType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__AccountType(struct soap *soap, const char *s, enum ns__AccountType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__AccountType, s);
	if (map)
		*a = (enum ns__AccountType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 3)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__AccountType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__AccountType * SOAP_FMAC4 soap_in_ns__AccountType(struct soap *soap, const char *tag, enum ns__AccountType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__AccountType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__AccountType, sizeof(enum ns__AccountType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns__AccountType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__AccountType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__AccountType, 0, sizeof(enum ns__AccountType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AccountType(struct soap *soap, const enum ns__AccountType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__AccountType);
	if (soap_out_ns__AccountType(soap, tag?tag:"ns:AccountType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__AccountType * SOAP_FMAC4 soap_get_ns__AccountType(struct soap *soap, enum ns__AccountType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__AccountType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ListModifyType(struct soap *soap, enum ns__ListModifyType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__ListModifyType
	*a = SOAP_DEFAULT_ns__ListModifyType;
#else
	*a = (enum ns__ListModifyType)0;
#endif
}

static const struct soap_code_map soap_codes_ns__ListModifyType[] =
{	{ (long)Increased, "Increased" },
	{ (long)Decrease, "Decrease" },
	{ (long)Replace, "Replace" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__ListModifyType2s(struct soap *soap, enum ns__ListModifyType n)
{	const char *s = soap_code_str(soap_codes_ns__ListModifyType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ListModifyType(struct soap *soap, const char *tag, int id, const enum ns__ListModifyType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ListModifyType), type) || soap_send(soap, soap_ns__ListModifyType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__ListModifyType(struct soap *soap, const char *s, enum ns__ListModifyType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__ListModifyType, s);
	if (map)
		*a = (enum ns__ListModifyType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__ListModifyType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__ListModifyType * SOAP_FMAC4 soap_in_ns__ListModifyType(struct soap *soap, const char *tag, enum ns__ListModifyType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__ListModifyType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ListModifyType, sizeof(enum ns__ListModifyType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns__ListModifyType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__ListModifyType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ListModifyType, 0, sizeof(enum ns__ListModifyType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ListModifyType(struct soap *soap, const enum ns__ListModifyType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__ListModifyType);
	if (soap_out_ns__ListModifyType(soap, tag?tag:"ns:ListModifyType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__ListModifyType * SOAP_FMAC4 soap_get_ns__ListModifyType(struct soap *soap, enum ns__ListModifyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ListModifyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__RegisterStatus(struct soap *soap, enum ns__RegisterStatus *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__RegisterStatus
	*a = SOAP_DEFAULT_ns__RegisterStatus;
#else
	*a = (enum ns__RegisterStatus)0;
#endif
}

static const struct soap_code_map soap_codes_ns__RegisterStatus[] =
{	{ (long)OffLine, "OffLine" },
	{ (long)OnLine, "OnLine" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__RegisterStatus2s(struct soap *soap, enum ns__RegisterStatus n)
{	const char *s = soap_code_str(soap_codes_ns__RegisterStatus, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__RegisterStatus(struct soap *soap, const char *tag, int id, const enum ns__RegisterStatus *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__RegisterStatus), type) || soap_send(soap, soap_ns__RegisterStatus2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__RegisterStatus(struct soap *soap, const char *s, enum ns__RegisterStatus *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__RegisterStatus, s);
	if (map)
		*a = (enum ns__RegisterStatus)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__RegisterStatus)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__RegisterStatus * SOAP_FMAC4 soap_in_ns__RegisterStatus(struct soap *soap, const char *tag, enum ns__RegisterStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__RegisterStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__RegisterStatus, sizeof(enum ns__RegisterStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns__RegisterStatus(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__RegisterStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__RegisterStatus, 0, sizeof(enum ns__RegisterStatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__RegisterStatus(struct soap *soap, const enum ns__RegisterStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__RegisterStatus);
	if (soap_out_ns__RegisterStatus(soap, tag?tag:"ns:RegisterStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__RegisterStatus * SOAP_FMAC4 soap_get_ns__RegisterStatus(struct soap *soap, enum ns__RegisterStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__RegisterStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns__Normal_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->ns__Normal_Response::session_id);
	soap_default_std__string(soap, &this->ns__Normal_Response::error_describe);
	soap_default_bool(soap, &this->ns__Normal_Response::result);
}

void ns__Normal_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns__Normal_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Normal_Response::error_describe);
#endif
}

int ns__Normal_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Normal_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Normal_Response(struct soap *soap, const char *tag, int id, const ns__Normal_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Normal_Response), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Normal_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Normal_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Normal_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Normal_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Normal_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Normal_Response * SOAP_FMAC4 soap_in_ns__Normal_Response(struct soap *soap, const char *tag, ns__Normal_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Normal_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Normal_Response, sizeof(ns__Normal_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Normal_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Normal_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Normal_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Normal_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Normal_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Normal_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Normal_Response, 0, sizeof(ns__Normal_Response), 0, soap_copy_ns__Normal_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Normal_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Normal_Response);
	if (this->soap_out(soap, tag?tag:"ns:Normal-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Normal_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Normal_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Normal_Response * SOAP_FMAC4 soap_get_ns__Normal_Response(struct soap *soap, ns__Normal_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Normal_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Normal_Response * SOAP_FMAC2 soap_instantiate_ns__Normal_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Normal_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Normal_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Normal_Response);
		if (size)
			*size = sizeof(ns__Normal_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Normal_Response, n);
		if (size)
			*size = n * sizeof(ns__Normal_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Normal_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Normal_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Normal_Response %p -> %p\n", q, p));
	*(ns__Normal_Response*)p = *(ns__Normal_Response*)q;
}

void ns__Dispatch_Alert_Overed_Notification_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->ns__Dispatch_Alert_Overed_Notification_Response::alert_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Alert_Overed_Notification_Response::error_describe);
	soap_default_std__string(soap, &this->ns__Dispatch_Alert_Overed_Notification_Response::session_id);
	soap_default_bool(soap, &this->ns__Dispatch_Alert_Overed_Notification_Response::result);
}

void ns__Dispatch_Alert_Overed_Notification_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns__Dispatch_Alert_Overed_Notification_Response::alert_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Alert_Overed_Notification_Response::error_describe);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Alert_Overed_Notification_Response::session_id);
#endif
}

int ns__Dispatch_Alert_Overed_Notification_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Alert_Overed_Notification_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Alert_Overed_Notification_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Alert_Overed_Notification_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification_Response), type))
		return soap->error;
	if (soap_out_std__string(soap, "alert-id", -1, &(a->ns__Dispatch_Alert_Overed_Notification_Response::alert_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Alert_Overed_Notification_Response::error_describe), ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Alert_Overed_Notification_Response::session_id), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Alert_Overed_Notification_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Alert_Overed_Notification_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Alert_Overed_Notification_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Alert_Overed_Notification_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Alert_Overed_Notification_Response(struct soap *soap, const char *tag, ns__Dispatch_Alert_Overed_Notification_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Alert_Overed_Notification_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification_Response, sizeof(ns__Dispatch_Alert_Overed_Notification_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Alert_Overed_Notification_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_alert_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_alert_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "alert-id", &(a->ns__Dispatch_Alert_Overed_Notification_Response::alert_id), "xsd:string"))
				{	soap_flag_alert_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Alert_Overed_Notification_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Alert_Overed_Notification_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Alert_Overed_Notification_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Alert_Overed_Notification_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification_Response, 0, sizeof(ns__Dispatch_Alert_Overed_Notification_Response), 0, soap_copy_ns__Dispatch_Alert_Overed_Notification_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_alert_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_session_id1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Alert_Overed_Notification_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Alert-Overed-Notification-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Alert_Overed_Notification_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Alert_Overed_Notification_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Alert_Overed_Notification_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Alert_Overed_Notification_Response(struct soap *soap, ns__Dispatch_Alert_Overed_Notification_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Alert_Overed_Notification_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Alert_Overed_Notification_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Alert_Overed_Notification_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Alert_Overed_Notification_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Alert_Overed_Notification_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Alert_Overed_Notification_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Alert_Overed_Notification_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Alert_Overed_Notification_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Alert_Overed_Notification_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Alert_Overed_Notification_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Alert_Overed_Notification_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Alert_Overed_Notification_Response*)p = *(ns__Dispatch_Alert_Overed_Notification_Response*)q;
}

void ns__Dispatch_Record_Status_Notification_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Record_Status_Notification_Response::group_id.ns__Entity::soap_default(soap);
	soap_default_bool(soap, &this->ns__Dispatch_Record_Status_Notification_Response::recording);
	soap_default_std__string(soap, &this->ns__Dispatch_Record_Status_Notification_Response::error_describe);
	soap_default_std__string(soap, &this->ns__Dispatch_Record_Status_Notification_Response::session_id);
	soap_default_bool(soap, &this->ns__Dispatch_Record_Status_Notification_Response::result);
}

void ns__Dispatch_Record_Status_Notification_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Record_Status_Notification_Response::group_id.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Record_Status_Notification_Response::error_describe);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Record_Status_Notification_Response::session_id);
#endif
}

int ns__Dispatch_Record_Status_Notification_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Record_Status_Notification_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Record_Status_Notification_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Record_Status_Notification_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Record_Status_Notification_Response), type))
		return soap->error;
	if ((a->ns__Dispatch_Record_Status_Notification_Response::group_id).soap_out(soap, "group-id", -1, ""))
		return soap->error;
	if (soap_out_bool(soap, "recording", -1, &(a->ns__Dispatch_Record_Status_Notification_Response::recording), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Record_Status_Notification_Response::error_describe), ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Record_Status_Notification_Response::session_id), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Record_Status_Notification_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Record_Status_Notification_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Record_Status_Notification_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Record_Status_Notification_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Record_Status_Notification_Response(struct soap *soap, const char *tag, ns__Dispatch_Record_Status_Notification_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Record_Status_Notification_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Record_Status_Notification_Response, sizeof(ns__Dispatch_Record_Status_Notification_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Record_Status_Notification_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Record_Status_Notification_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_group_id1 = 1;
	size_t soap_flag_recording1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_group_id1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Record_Status_Notification_Response::group_id).soap_in(soap, "group-id", "ns:Entity"))
				{	soap_flag_group_id1--;
					continue;
				}
			if (soap_flag_recording1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "recording", &(a->ns__Dispatch_Record_Status_Notification_Response::recording), "xsd:boolean"))
				{	soap_flag_recording1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Record_Status_Notification_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Record_Status_Notification_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Record_Status_Notification_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Record_Status_Notification_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Record_Status_Notification_Response, 0, sizeof(ns__Dispatch_Record_Status_Notification_Response), 0, soap_copy_ns__Dispatch_Record_Status_Notification_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_group_id1 > 0 || soap_flag_recording1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_session_id1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Record_Status_Notification_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Record_Status_Notification_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Record-Status-Notification-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Record_Status_Notification_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Record_Status_Notification_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Record_Status_Notification_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Record_Status_Notification_Response(struct soap *soap, ns__Dispatch_Record_Status_Notification_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Record_Status_Notification_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Record_Status_Notification_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Record_Status_Notification_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Record_Status_Notification_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Record_Status_Notification_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Record_Status_Notification_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Record_Status_Notification_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Record_Status_Notification_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Record_Status_Notification_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Record_Status_Notification_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Record_Status_Notification_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Record_Status_Notification_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Record_Status_Notification_Response*)p = *(ns__Dispatch_Record_Status_Notification_Response*)q;
}

void ns__Dispatch_History_Alert_Message_Request_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->ns__Dispatch_History_Alert_Message_Request_Response::history_alert_id);
	soap_default_std__listTemplateOfns__MediaMessage(soap, &this->ns__Dispatch_History_Alert_Message_Request_Response::messages);
	soap_default_std__string(soap, &this->ns__Dispatch_History_Alert_Message_Request_Response::size);
	soap_default_std__string(soap, &this->ns__Dispatch_History_Alert_Message_Request_Response::leave_message_count);
	soap_default_std__string(soap, &this->ns__Dispatch_History_Alert_Message_Request_Response::error_describe);
	soap_default_std__string(soap, &this->ns__Dispatch_History_Alert_Message_Request_Response::session_id);
	soap_default_bool(soap, &this->ns__Dispatch_History_Alert_Message_Request_Response::result);
}

void ns__Dispatch_History_Alert_Message_Request_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns__Dispatch_History_Alert_Message_Request_Response::history_alert_id);
	soap_serialize_std__listTemplateOfns__MediaMessage(soap, &this->ns__Dispatch_History_Alert_Message_Request_Response::messages);
	soap_serialize_std__string(soap, &this->ns__Dispatch_History_Alert_Message_Request_Response::size);
	soap_serialize_std__string(soap, &this->ns__Dispatch_History_Alert_Message_Request_Response::leave_message_count);
	soap_serialize_std__string(soap, &this->ns__Dispatch_History_Alert_Message_Request_Response::error_describe);
	soap_serialize_std__string(soap, &this->ns__Dispatch_History_Alert_Message_Request_Response::session_id);
#endif
}

int ns__Dispatch_History_Alert_Message_Request_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_History_Alert_Message_Request_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_History_Alert_Message_Request_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_History_Alert_Message_Request_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request_Response), type))
		return soap->error;
	if (soap_out_std__string(soap, "history-alert-id", -1, &(a->ns__Dispatch_History_Alert_Message_Request_Response::history_alert_id), ""))
		return soap->error;
	if (soap_out_std__listTemplateOfns__MediaMessage(soap, "messages", -1, &(a->ns__Dispatch_History_Alert_Message_Request_Response::messages), ""))
		return soap->error;
	if (soap_out_std__string(soap, "size", -1, &(a->ns__Dispatch_History_Alert_Message_Request_Response::size), ""))
		return soap->error;
	if (soap_out_std__string(soap, "leave-message-count", -1, &(a->ns__Dispatch_History_Alert_Message_Request_Response::leave_message_count), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_History_Alert_Message_Request_Response::error_describe), ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_History_Alert_Message_Request_Response::session_id), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_History_Alert_Message_Request_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_History_Alert_Message_Request_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_History_Alert_Message_Request_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_History_Alert_Message_Request_Response * SOAP_FMAC4 soap_in_ns__Dispatch_History_Alert_Message_Request_Response(struct soap *soap, const char *tag, ns__Dispatch_History_Alert_Message_Request_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_History_Alert_Message_Request_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request_Response, sizeof(ns__Dispatch_History_Alert_Message_Request_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_History_Alert_Message_Request_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_history_alert_id1 = 1;
	size_t soap_flag_size1 = 1;
	size_t soap_flag_leave_message_count1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_history_alert_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "history-alert-id", &(a->ns__Dispatch_History_Alert_Message_Request_Response::history_alert_id), "xsd:string"))
				{	soap_flag_history_alert_id1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__listTemplateOfns__MediaMessage(soap, "messages", &(a->ns__Dispatch_History_Alert_Message_Request_Response::messages), "ns:MediaMessage"))
					continue;
			if (soap_flag_size1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "size", &(a->ns__Dispatch_History_Alert_Message_Request_Response::size), "xsd:string"))
				{	soap_flag_size1--;
					continue;
				}
			if (soap_flag_leave_message_count1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "leave-message-count", &(a->ns__Dispatch_History_Alert_Message_Request_Response::leave_message_count), "xsd:string"))
				{	soap_flag_leave_message_count1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_History_Alert_Message_Request_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_History_Alert_Message_Request_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_History_Alert_Message_Request_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_History_Alert_Message_Request_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request_Response, 0, sizeof(ns__Dispatch_History_Alert_Message_Request_Response), 0, soap_copy_ns__Dispatch_History_Alert_Message_Request_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_history_alert_id1 > 0 || soap_flag_size1 > 0 || soap_flag_leave_message_count1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_session_id1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_History_Alert_Message_Request_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-History-Alert-Message-Request-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_History_Alert_Message_Request_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_History_Alert_Message_Request_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_History_Alert_Message_Request_Response * SOAP_FMAC4 soap_get_ns__Dispatch_History_Alert_Message_Request_Response(struct soap *soap, ns__Dispatch_History_Alert_Message_Request_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_History_Alert_Message_Request_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_History_Alert_Message_Request_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_History_Alert_Message_Request_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_History_Alert_Message_Request_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_History_Alert_Message_Request_Response);
		if (size)
			*size = sizeof(ns__Dispatch_History_Alert_Message_Request_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_History_Alert_Message_Request_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_History_Alert_Message_Request_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_History_Alert_Message_Request_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_History_Alert_Message_Request_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_History_Alert_Message_Request_Response %p -> %p\n", q, p));
	*(ns__Dispatch_History_Alert_Message_Request_Response*)p = *(ns__Dispatch_History_Alert_Message_Request_Response*)q;
}

void ns__Dispatch_History_Alert_Request_Reponse::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__listTemplateOfns__HistoryAlert(soap, &this->ns__Dispatch_History_Alert_Request_Reponse::data);
	soap_default_std__string(soap, &this->ns__Dispatch_History_Alert_Request_Reponse::size);
	soap_default_std__string(soap, &this->ns__Dispatch_History_Alert_Request_Reponse::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_History_Alert_Request_Reponse::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_History_Alert_Request_Reponse::result);
}

void ns__Dispatch_History_Alert_Request_Reponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__listTemplateOfns__HistoryAlert(soap, &this->ns__Dispatch_History_Alert_Request_Reponse::data);
	soap_serialize_std__string(soap, &this->ns__Dispatch_History_Alert_Request_Reponse::size);
	soap_serialize_std__string(soap, &this->ns__Dispatch_History_Alert_Request_Reponse::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_History_Alert_Request_Reponse::error_describe);
#endif
}

int ns__Dispatch_History_Alert_Request_Reponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_History_Alert_Request_Reponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_History_Alert_Request_Reponse(struct soap *soap, const char *tag, int id, const ns__Dispatch_History_Alert_Request_Reponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_History_Alert_Request_Reponse), type))
		return soap->error;
	if (soap_out_std__listTemplateOfns__HistoryAlert(soap, "data", -1, &(a->ns__Dispatch_History_Alert_Request_Reponse::data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "size", -1, &(a->ns__Dispatch_History_Alert_Request_Reponse::size), ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_History_Alert_Request_Reponse::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_History_Alert_Request_Reponse::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_History_Alert_Request_Reponse::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_History_Alert_Request_Reponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_History_Alert_Request_Reponse(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_History_Alert_Request_Reponse * SOAP_FMAC4 soap_in_ns__Dispatch_History_Alert_Request_Reponse(struct soap *soap, const char *tag, ns__Dispatch_History_Alert_Request_Reponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_History_Alert_Request_Reponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_History_Alert_Request_Reponse, sizeof(ns__Dispatch_History_Alert_Request_Reponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_History_Alert_Request_Reponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_History_Alert_Request_Reponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_size1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__listTemplateOfns__HistoryAlert(soap, "data", &(a->ns__Dispatch_History_Alert_Request_Reponse::data), "ns:HistoryAlert"))
					continue;
			if (soap_flag_size1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "size", &(a->ns__Dispatch_History_Alert_Request_Reponse::size), "xsd:string"))
				{	soap_flag_size1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_History_Alert_Request_Reponse::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_History_Alert_Request_Reponse::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_History_Alert_Request_Reponse::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_History_Alert_Request_Reponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_History_Alert_Request_Reponse, 0, sizeof(ns__Dispatch_History_Alert_Request_Reponse), 0, soap_copy_ns__Dispatch_History_Alert_Request_Reponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_size1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_History_Alert_Request_Reponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_History_Alert_Request_Reponse);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-History-Alert-Request-Reponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_History_Alert_Request_Reponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_History_Alert_Request_Reponse(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_History_Alert_Request_Reponse * SOAP_FMAC4 soap_get_ns__Dispatch_History_Alert_Request_Reponse(struct soap *soap, ns__Dispatch_History_Alert_Request_Reponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_History_Alert_Request_Reponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_History_Alert_Request_Reponse * SOAP_FMAC2 soap_instantiate_ns__Dispatch_History_Alert_Request_Reponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_History_Alert_Request_Reponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_History_Alert_Request_Reponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_History_Alert_Request_Reponse);
		if (size)
			*size = sizeof(ns__Dispatch_History_Alert_Request_Reponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_History_Alert_Request_Reponse, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_History_Alert_Request_Reponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_History_Alert_Request_Reponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_History_Alert_Request_Reponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_History_Alert_Request_Reponse %p -> %p\n", q, p));
	*(ns__Dispatch_History_Alert_Request_Reponse*)p = *(ns__Dispatch_History_Alert_Request_Reponse*)q;
}

void ns__Dispatch_Alert_Request_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Alert_Request_Response::data.ns__HistoryAlert::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Dispatch_Alert_Request_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Alert_Request_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Alert_Request_Response::result);
}

void ns__Dispatch_Alert_Request_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Alert_Request_Response::data.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Alert_Request_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Alert_Request_Response::error_describe);
#endif
}

int ns__Dispatch_Alert_Request_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Alert_Request_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Alert_Request_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Alert_Request_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Alert_Request_Response), type))
		return soap->error;
	if ((a->ns__Dispatch_Alert_Request_Response::data).soap_out(soap, "data", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Alert_Request_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Alert_Request_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Alert_Request_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Alert_Request_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Alert_Request_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Alert_Request_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Alert_Request_Response(struct soap *soap, const char *tag, ns__Dispatch_Alert_Request_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Alert_Request_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Alert_Request_Response, sizeof(ns__Dispatch_Alert_Request_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Alert_Request_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Alert_Request_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_data1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_data1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Alert_Request_Response::data).soap_in(soap, "data", "ns:HistoryAlert"))
				{	soap_flag_data1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Alert_Request_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Alert_Request_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Alert_Request_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Alert_Request_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Alert_Request_Response, 0, sizeof(ns__Dispatch_Alert_Request_Response), 0, soap_copy_ns__Dispatch_Alert_Request_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_data1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Alert_Request_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Alert_Request_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Alert-Request-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Alert_Request_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Alert_Request_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Alert_Request_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Alert_Request_Response(struct soap *soap, ns__Dispatch_Alert_Request_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Alert_Request_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Alert_Request_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Alert_Request_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Alert_Request_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Alert_Request_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Alert_Request_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Alert_Request_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Alert_Request_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Alert_Request_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Alert_Request_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Alert_Request_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Alert_Request_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Alert_Request_Response*)p = *(ns__Dispatch_Alert_Request_Response*)q;
}

void ns__HistoryAlert::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->ns__HistoryAlert::id);
	soap_default_std__string(soap, &this->ns__HistoryAlert::name);
	soap_default_std__string(soap, &this->ns__HistoryAlert::describe);
	soap_default_ns__AlertLevel(soap, &this->ns__HistoryAlert::level);
	soap_default_std__string(soap, &this->ns__HistoryAlert::alram_time);
	soap_default_std__string(soap, &this->ns__HistoryAlert::use_cars);
	soap_default_std__string(soap, &this->ns__HistoryAlert::create_time);
	soap_default_std__string(soap, &this->ns__HistoryAlert::over_time);
}

void ns__HistoryAlert::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns__HistoryAlert::id);
	soap_serialize_std__string(soap, &this->ns__HistoryAlert::name);
	soap_serialize_std__string(soap, &this->ns__HistoryAlert::describe);
	soap_serialize_std__string(soap, &this->ns__HistoryAlert::alram_time);
	soap_serialize_std__string(soap, &this->ns__HistoryAlert::use_cars);
	soap_serialize_std__string(soap, &this->ns__HistoryAlert::create_time);
	soap_serialize_std__string(soap, &this->ns__HistoryAlert::over_time);
#endif
}

int ns__HistoryAlert::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__HistoryAlert(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HistoryAlert(struct soap *soap, const char *tag, int id, const ns__HistoryAlert *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HistoryAlert), type))
		return soap->error;
	if (soap_out_std__string(soap, "id", -1, &(a->ns__HistoryAlert::id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "name", -1, &(a->ns__HistoryAlert::name), ""))
		return soap->error;
	if (soap_out_std__string(soap, "describe", -1, &(a->ns__HistoryAlert::describe), ""))
		return soap->error;
	if (soap_out_ns__AlertLevel(soap, "level", -1, &(a->ns__HistoryAlert::level), ""))
		return soap->error;
	if (soap_out_std__string(soap, "alram-time", -1, &(a->ns__HistoryAlert::alram_time), ""))
		return soap->error;
	if (soap_out_std__string(soap, "use-cars", -1, &(a->ns__HistoryAlert::use_cars), ""))
		return soap->error;
	if (soap_out_std__string(soap, "create-time", -1, &(a->ns__HistoryAlert::create_time), ""))
		return soap->error;
	if (soap_out_std__string(soap, "over-time", -1, &(a->ns__HistoryAlert::over_time), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__HistoryAlert::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__HistoryAlert(soap, tag, this, type);
}

SOAP_FMAC3 ns__HistoryAlert * SOAP_FMAC4 soap_in_ns__HistoryAlert(struct soap *soap, const char *tag, ns__HistoryAlert *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__HistoryAlert *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HistoryAlert, sizeof(ns__HistoryAlert), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__HistoryAlert)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__HistoryAlert *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_describe1 = 1;
	size_t soap_flag_level1 = 1;
	size_t soap_flag_alram_time1 = 1;
	size_t soap_flag_use_cars1 = 1;
	size_t soap_flag_create_time1 = 1;
	size_t soap_flag_over_time1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "id", &(a->ns__HistoryAlert::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "name", &(a->ns__HistoryAlert::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "describe", &(a->ns__HistoryAlert::describe), "xsd:string"))
				{	soap_flag_describe1--;
					continue;
				}
			if (soap_flag_level1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__AlertLevel(soap, "level", &(a->ns__HistoryAlert::level), "ns:AlertLevel"))
				{	soap_flag_level1--;
					continue;
				}
			if (soap_flag_alram_time1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "alram-time", &(a->ns__HistoryAlert::alram_time), "xsd:string"))
				{	soap_flag_alram_time1--;
					continue;
				}
			if (soap_flag_use_cars1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "use-cars", &(a->ns__HistoryAlert::use_cars), "xsd:string"))
				{	soap_flag_use_cars1--;
					continue;
				}
			if (soap_flag_create_time1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "create-time", &(a->ns__HistoryAlert::create_time), "xsd:string"))
				{	soap_flag_create_time1--;
					continue;
				}
			if (soap_flag_over_time1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "over-time", &(a->ns__HistoryAlert::over_time), "xsd:string"))
				{	soap_flag_over_time1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__HistoryAlert *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HistoryAlert, 0, sizeof(ns__HistoryAlert), 0, soap_copy_ns__HistoryAlert);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_name1 > 0 || soap_flag_describe1 > 0 || soap_flag_level1 > 0 || soap_flag_alram_time1 > 0 || soap_flag_use_cars1 > 0 || soap_flag_create_time1 > 0 || soap_flag_over_time1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__HistoryAlert::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__HistoryAlert);
	if (this->soap_out(soap, tag?tag:"ns:HistoryAlert", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__HistoryAlert::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__HistoryAlert(soap, this, tag, type);
}

SOAP_FMAC3 ns__HistoryAlert * SOAP_FMAC4 soap_get_ns__HistoryAlert(struct soap *soap, ns__HistoryAlert *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HistoryAlert(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__HistoryAlert * SOAP_FMAC2 soap_instantiate_ns__HistoryAlert(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HistoryAlert(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__HistoryAlert, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__HistoryAlert);
		if (size)
			*size = sizeof(ns__HistoryAlert);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__HistoryAlert, n);
		if (size)
			*size = n * sizeof(ns__HistoryAlert);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__HistoryAlert*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__HistoryAlert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__HistoryAlert %p -> %p\n", q, p));
	*(ns__HistoryAlert*)p = *(ns__HistoryAlert*)q;
}

void ns__Dispatch_Account_Info_Notification_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Account_Info_Notification_Response::account_id.ns__Entity::soap_default(soap);
	soap_default_double(soap, &this->ns__Dispatch_Account_Info_Notification_Response::longitude);
	soap_default_double(soap, &this->ns__Dispatch_Account_Info_Notification_Response::latitude);
	soap_default_std__string(soap, &this->ns__Dispatch_Account_Info_Notification_Response::timestamp);
	soap_default_ns__ProfessionStatus(soap, &this->ns__Dispatch_Account_Info_Notification_Response::professionstatus);
	soap_default_ns__RegisterStatus(soap, &this->ns__Dispatch_Account_Info_Notification_Response::status);
	soap_default_std__string(soap, &this->ns__Dispatch_Account_Info_Notification_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Account_Info_Notification_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Account_Info_Notification_Response::result);
}

void ns__Dispatch_Account_Info_Notification_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Account_Info_Notification_Response::account_id.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Account_Info_Notification_Response::timestamp);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Account_Info_Notification_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Account_Info_Notification_Response::error_describe);
#endif
}

int ns__Dispatch_Account_Info_Notification_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Account_Info_Notification_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Account_Info_Notification_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Account_Info_Notification_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Account_Info_Notification_Response), type))
		return soap->error;
	if ((a->ns__Dispatch_Account_Info_Notification_Response::account_id).soap_out(soap, "account-id", -1, ""))
		return soap->error;
	if (soap_out_double(soap, "longitude", -1, &(a->ns__Dispatch_Account_Info_Notification_Response::longitude), ""))
		return soap->error;
	if (soap_out_double(soap, "latitude", -1, &(a->ns__Dispatch_Account_Info_Notification_Response::latitude), ""))
		return soap->error;
	if (soap_out_std__string(soap, "timestamp", -1, &(a->ns__Dispatch_Account_Info_Notification_Response::timestamp), ""))
		return soap->error;
	if (soap_out_ns__ProfessionStatus(soap, "professionstatus", -1, &(a->ns__Dispatch_Account_Info_Notification_Response::professionstatus), ""))
		return soap->error;
	if (soap_out_ns__RegisterStatus(soap, "status", -1, &(a->ns__Dispatch_Account_Info_Notification_Response::status), ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Account_Info_Notification_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Account_Info_Notification_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Account_Info_Notification_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Account_Info_Notification_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Account_Info_Notification_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Account_Info_Notification_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Account_Info_Notification_Response(struct soap *soap, const char *tag, ns__Dispatch_Account_Info_Notification_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Account_Info_Notification_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Account_Info_Notification_Response, sizeof(ns__Dispatch_Account_Info_Notification_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Account_Info_Notification_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Account_Info_Notification_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_account_id1 = 1;
	size_t soap_flag_longitude1 = 1;
	size_t soap_flag_latitude1 = 1;
	size_t soap_flag_timestamp1 = 1;
	size_t soap_flag_professionstatus1 = 1;
	size_t soap_flag_status1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_account_id1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Account_Info_Notification_Response::account_id).soap_in(soap, "account-id", "ns:Entity"))
				{	soap_flag_account_id1--;
					continue;
				}
			if (soap_flag_longitude1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "longitude", &(a->ns__Dispatch_Account_Info_Notification_Response::longitude), "xsd:double"))
				{	soap_flag_longitude1--;
					continue;
				}
			if (soap_flag_latitude1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "latitude", &(a->ns__Dispatch_Account_Info_Notification_Response::latitude), "xsd:double"))
				{	soap_flag_latitude1--;
					continue;
				}
			if (soap_flag_timestamp1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "timestamp", &(a->ns__Dispatch_Account_Info_Notification_Response::timestamp), "xsd:string"))
				{	soap_flag_timestamp1--;
					continue;
				}
			if (soap_flag_professionstatus1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__ProfessionStatus(soap, "professionstatus", &(a->ns__Dispatch_Account_Info_Notification_Response::professionstatus), "ns:ProfessionStatus"))
				{	soap_flag_professionstatus1--;
					continue;
				}
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__RegisterStatus(soap, "status", &(a->ns__Dispatch_Account_Info_Notification_Response::status), "ns:RegisterStatus"))
				{	soap_flag_status1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Account_Info_Notification_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Account_Info_Notification_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Account_Info_Notification_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Account_Info_Notification_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Account_Info_Notification_Response, 0, sizeof(ns__Dispatch_Account_Info_Notification_Response), 0, soap_copy_ns__Dispatch_Account_Info_Notification_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_account_id1 > 0 || soap_flag_longitude1 > 0 || soap_flag_latitude1 > 0 || soap_flag_timestamp1 > 0 || soap_flag_professionstatus1 > 0 || soap_flag_status1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Account_Info_Notification_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Account_Info_Notification_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Account-Info-Notification-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Account_Info_Notification_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Account_Info_Notification_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Account_Info_Notification_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Account_Info_Notification_Response(struct soap *soap, ns__Dispatch_Account_Info_Notification_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Account_Info_Notification_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Account_Info_Notification_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Account_Info_Notification_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Account_Info_Notification_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Account_Info_Notification_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Account_Info_Notification_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Account_Info_Notification_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Account_Info_Notification_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Account_Info_Notification_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Account_Info_Notification_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Account_Info_Notification_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Account_Info_Notification_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Account_Info_Notification_Response*)p = *(ns__Dispatch_Account_Info_Notification_Response*)q;
}

void ns__Dispatch_Session_Status_Notification_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Session_Status_Notification_Response::group_id.ns__Entity::soap_default(soap);
	soap_default_ns__SessionStatus(soap, &this->ns__Dispatch_Session_Status_Notification_Response::status);
	soap_default_std__string(soap, &this->ns__Dispatch_Session_Status_Notification_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Session_Status_Notification_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Session_Status_Notification_Response::result);
}

void ns__Dispatch_Session_Status_Notification_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Session_Status_Notification_Response::group_id.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Session_Status_Notification_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Session_Status_Notification_Response::error_describe);
#endif
}

int ns__Dispatch_Session_Status_Notification_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Session_Status_Notification_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Session_Status_Notification_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Session_Status_Notification_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Session_Status_Notification_Response), type))
		return soap->error;
	if ((a->ns__Dispatch_Session_Status_Notification_Response::group_id).soap_out(soap, "group-id", -1, ""))
		return soap->error;
	if (soap_out_ns__SessionStatus(soap, "status", -1, &(a->ns__Dispatch_Session_Status_Notification_Response::status), ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Session_Status_Notification_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Session_Status_Notification_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Session_Status_Notification_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Session_Status_Notification_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Session_Status_Notification_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Session_Status_Notification_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Session_Status_Notification_Response(struct soap *soap, const char *tag, ns__Dispatch_Session_Status_Notification_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Session_Status_Notification_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Session_Status_Notification_Response, sizeof(ns__Dispatch_Session_Status_Notification_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Session_Status_Notification_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Session_Status_Notification_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_group_id1 = 1;
	size_t soap_flag_status1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_group_id1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Session_Status_Notification_Response::group_id).soap_in(soap, "group-id", "ns:Entity"))
				{	soap_flag_group_id1--;
					continue;
				}
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__SessionStatus(soap, "status", &(a->ns__Dispatch_Session_Status_Notification_Response::status), "ns:SessionStatus"))
				{	soap_flag_status1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Session_Status_Notification_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Session_Status_Notification_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Session_Status_Notification_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Session_Status_Notification_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Session_Status_Notification_Response, 0, sizeof(ns__Dispatch_Session_Status_Notification_Response), 0, soap_copy_ns__Dispatch_Session_Status_Notification_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_group_id1 > 0 || soap_flag_status1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Session_Status_Notification_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Session_Status_Notification_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Session-Status-Notification-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Session_Status_Notification_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Session_Status_Notification_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Session_Status_Notification_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Session_Status_Notification_Response(struct soap *soap, ns__Dispatch_Session_Status_Notification_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Session_Status_Notification_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Session_Status_Notification_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Session_Status_Notification_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Session_Status_Notification_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Session_Status_Notification_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Session_Status_Notification_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Session_Status_Notification_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Session_Status_Notification_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Session_Status_Notification_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Session_Status_Notification_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Session_Status_Notification_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Session_Status_Notification_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Session_Status_Notification_Response*)p = *(ns__Dispatch_Session_Status_Notification_Response*)q;
}

void ns__Dispatch_Participant_Speak_Request_Notification_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Participant_Speak_Request_Notification_Response::group_id.ns__Entity::soap_default(soap);
	this->ns__Dispatch_Participant_Speak_Request_Notification_Response::account_id.ns__Entity::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Dispatch_Participant_Speak_Request_Notification_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Participant_Speak_Request_Notification_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Participant_Speak_Request_Notification_Response::result);
}

void ns__Dispatch_Participant_Speak_Request_Notification_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Participant_Speak_Request_Notification_Response::group_id.soap_serialize(soap);
	this->ns__Dispatch_Participant_Speak_Request_Notification_Response::account_id.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Participant_Speak_Request_Notification_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Participant_Speak_Request_Notification_Response::error_describe);
#endif
}

int ns__Dispatch_Participant_Speak_Request_Notification_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Participant_Speak_Request_Notification_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Participant_Speak_Request_Notification_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Participant_Speak_Request_Notification_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification_Response), type))
		return soap->error;
	if ((a->ns__Dispatch_Participant_Speak_Request_Notification_Response::group_id).soap_out(soap, "group-id", -1, ""))
		return soap->error;
	if ((a->ns__Dispatch_Participant_Speak_Request_Notification_Response::account_id).soap_out(soap, "account-id", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Participant_Speak_Request_Notification_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Participant_Speak_Request_Notification_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Participant_Speak_Request_Notification_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Participant_Speak_Request_Notification_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Participant_Speak_Request_Notification_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Participant_Speak_Request_Notification_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Participant_Speak_Request_Notification_Response(struct soap *soap, const char *tag, ns__Dispatch_Participant_Speak_Request_Notification_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Participant_Speak_Request_Notification_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification_Response, sizeof(ns__Dispatch_Participant_Speak_Request_Notification_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Participant_Speak_Request_Notification_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_group_id1 = 1;
	size_t soap_flag_account_id1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_group_id1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Participant_Speak_Request_Notification_Response::group_id).soap_in(soap, "group-id", "ns:Entity"))
				{	soap_flag_group_id1--;
					continue;
				}
			if (soap_flag_account_id1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Participant_Speak_Request_Notification_Response::account_id).soap_in(soap, "account-id", "ns:Entity"))
				{	soap_flag_account_id1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Participant_Speak_Request_Notification_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Participant_Speak_Request_Notification_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Participant_Speak_Request_Notification_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Participant_Speak_Request_Notification_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification_Response, 0, sizeof(ns__Dispatch_Participant_Speak_Request_Notification_Response), 0, soap_copy_ns__Dispatch_Participant_Speak_Request_Notification_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_group_id1 > 0 || soap_flag_account_id1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Participant_Speak_Request_Notification_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Participant-Speak-Request-Notification-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Participant_Speak_Request_Notification_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Participant_Speak_Request_Notification_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Participant_Speak_Request_Notification_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Participant_Speak_Request_Notification_Response(struct soap *soap, ns__Dispatch_Participant_Speak_Request_Notification_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Participant_Speak_Request_Notification_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Participant_Speak_Request_Notification_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Participant_Speak_Request_Notification_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Participant_Speak_Request_Notification_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Participant_Speak_Request_Notification_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Participant_Speak_Request_Notification_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Participant_Speak_Request_Notification_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Participant_Speak_Request_Notification_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Participant_Speak_Request_Notification_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Participant_Speak_Request_Notification_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Participant_Speak_Request_Notification_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Participant_Speak_Request_Notification_Response*)p = *(ns__Dispatch_Participant_Speak_Request_Notification_Response*)q;
}

void ns__Dispatch_Participant_Connect_Request_Notification_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Participant_Connect_Request_Notification_Response::group_id.ns__Entity::soap_default(soap);
	this->ns__Dispatch_Participant_Connect_Request_Notification_Response::account_id.ns__Entity::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Dispatch_Participant_Connect_Request_Notification_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Participant_Connect_Request_Notification_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Participant_Connect_Request_Notification_Response::result);
}

void ns__Dispatch_Participant_Connect_Request_Notification_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Participant_Connect_Request_Notification_Response::group_id.soap_serialize(soap);
	this->ns__Dispatch_Participant_Connect_Request_Notification_Response::account_id.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Participant_Connect_Request_Notification_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Participant_Connect_Request_Notification_Response::error_describe);
#endif
}

int ns__Dispatch_Participant_Connect_Request_Notification_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Participant_Connect_Request_Notification_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Participant_Connect_Request_Notification_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Participant_Connect_Request_Notification_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification_Response), type))
		return soap->error;
	if ((a->ns__Dispatch_Participant_Connect_Request_Notification_Response::group_id).soap_out(soap, "group-id", -1, ""))
		return soap->error;
	if ((a->ns__Dispatch_Participant_Connect_Request_Notification_Response::account_id).soap_out(soap, "account-id", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Participant_Connect_Request_Notification_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Participant_Connect_Request_Notification_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Participant_Connect_Request_Notification_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Participant_Connect_Request_Notification_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Participant_Connect_Request_Notification_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Participant_Connect_Request_Notification_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Participant_Connect_Request_Notification_Response(struct soap *soap, const char *tag, ns__Dispatch_Participant_Connect_Request_Notification_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Participant_Connect_Request_Notification_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification_Response, sizeof(ns__Dispatch_Participant_Connect_Request_Notification_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Participant_Connect_Request_Notification_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_group_id1 = 1;
	size_t soap_flag_account_id1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_group_id1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Participant_Connect_Request_Notification_Response::group_id).soap_in(soap, "group-id", "ns:Entity"))
				{	soap_flag_group_id1--;
					continue;
				}
			if (soap_flag_account_id1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Participant_Connect_Request_Notification_Response::account_id).soap_in(soap, "account-id", "ns:Entity"))
				{	soap_flag_account_id1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Participant_Connect_Request_Notification_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Participant_Connect_Request_Notification_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Participant_Connect_Request_Notification_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Participant_Connect_Request_Notification_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification_Response, 0, sizeof(ns__Dispatch_Participant_Connect_Request_Notification_Response), 0, soap_copy_ns__Dispatch_Participant_Connect_Request_Notification_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_group_id1 > 0 || soap_flag_account_id1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Participant_Connect_Request_Notification_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Participant-Connect-Request-Notification-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Participant_Connect_Request_Notification_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Participant_Connect_Request_Notification_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Participant_Connect_Request_Notification_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Participant_Connect_Request_Notification_Response(struct soap *soap, ns__Dispatch_Participant_Connect_Request_Notification_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Participant_Connect_Request_Notification_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Participant_Connect_Request_Notification_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Participant_Connect_Request_Notification_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Participant_Connect_Request_Notification_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Participant_Connect_Request_Notification_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Participant_Connect_Request_Notification_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Participant_Connect_Request_Notification_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Participant_Connect_Request_Notification_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Participant_Connect_Request_Notification_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Participant_Connect_Request_Notification_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Participant_Connect_Request_Notification_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Participant_Connect_Request_Notification_Response*)p = *(ns__Dispatch_Participant_Connect_Request_Notification_Response*)q;
}

void ns__Dispatch_Media_Message_Notification_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->ns__Dispatch_Media_Message_Notification_Response::id);
	this->ns__Dispatch_Media_Message_Notification_Response::messages.ns__MediaMessage::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Dispatch_Media_Message_Notification_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Media_Message_Notification_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Media_Message_Notification_Response::result);
}

void ns__Dispatch_Media_Message_Notification_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns__Dispatch_Media_Message_Notification_Response::id);
	this->ns__Dispatch_Media_Message_Notification_Response::messages.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Media_Message_Notification_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Media_Message_Notification_Response::error_describe);
#endif
}

int ns__Dispatch_Media_Message_Notification_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Media_Message_Notification_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Media_Message_Notification_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Media_Message_Notification_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Media_Message_Notification_Response), type))
		return soap->error;
	if (soap_out_std__string(soap, "id", -1, &(a->ns__Dispatch_Media_Message_Notification_Response::id), ""))
		return soap->error;
	if ((a->ns__Dispatch_Media_Message_Notification_Response::messages).soap_out(soap, "messages", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Media_Message_Notification_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Media_Message_Notification_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Media_Message_Notification_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Media_Message_Notification_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Media_Message_Notification_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Media_Message_Notification_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Media_Message_Notification_Response(struct soap *soap, const char *tag, ns__Dispatch_Media_Message_Notification_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Media_Message_Notification_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Media_Message_Notification_Response, sizeof(ns__Dispatch_Media_Message_Notification_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Media_Message_Notification_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Media_Message_Notification_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_messages1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "id", &(a->ns__Dispatch_Media_Message_Notification_Response::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_messages1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Media_Message_Notification_Response::messages).soap_in(soap, "messages", "ns:MediaMessage"))
				{	soap_flag_messages1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Media_Message_Notification_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Media_Message_Notification_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Media_Message_Notification_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Media_Message_Notification_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Media_Message_Notification_Response, 0, sizeof(ns__Dispatch_Media_Message_Notification_Response), 0, soap_copy_ns__Dispatch_Media_Message_Notification_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_messages1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Media_Message_Notification_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Media_Message_Notification_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Media-Message-Notification-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Media_Message_Notification_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Media_Message_Notification_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Media_Message_Notification_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Media_Message_Notification_Response(struct soap *soap, ns__Dispatch_Media_Message_Notification_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Media_Message_Notification_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Media_Message_Notification_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Media_Message_Notification_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Media_Message_Notification_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Media_Message_Notification_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Media_Message_Notification_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Media_Message_Notification_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Media_Message_Notification_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Media_Message_Notification_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Media_Message_Notification_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Media_Message_Notification_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Media_Message_Notification_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Media_Message_Notification_Response*)p = *(ns__Dispatch_Media_Message_Notification_Response*)q;
}

void ns__Media_Message::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Media_Message::id.ns__Entity::soap_default(soap);
	this->ns__Media_Message::messages.ns__MediaMessage::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Media_Message::leave_message_count);
}

void ns__Media_Message::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Media_Message::id.soap_serialize(soap);
	this->ns__Media_Message::messages.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Media_Message::leave_message_count);
#endif
}

int ns__Media_Message::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Media_Message(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Media_Message(struct soap *soap, const char *tag, int id, const ns__Media_Message *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Media_Message), type))
		return soap->error;
	if ((a->ns__Media_Message::id).soap_out(soap, "id", -1, ""))
		return soap->error;
	if ((a->ns__Media_Message::messages).soap_out(soap, "messages", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "leave-message-count", -1, &(a->ns__Media_Message::leave_message_count), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Media_Message::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Media_Message(soap, tag, this, type);
}

SOAP_FMAC3 ns__Media_Message * SOAP_FMAC4 soap_in_ns__Media_Message(struct soap *soap, const char *tag, ns__Media_Message *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Media_Message *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Media_Message, sizeof(ns__Media_Message), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Media_Message)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Media_Message *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_messages1 = 1;
	size_t soap_flag_leave_message_count1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Media_Message::id).soap_in(soap, "id", "ns:Entity"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_messages1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Media_Message::messages).soap_in(soap, "messages", "ns:MediaMessage"))
				{	soap_flag_messages1--;
					continue;
				}
			if (soap_flag_leave_message_count1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "leave-message-count", &(a->ns__Media_Message::leave_message_count), "xsd:string"))
				{	soap_flag_leave_message_count1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Media_Message *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Media_Message, 0, sizeof(ns__Media_Message), 0, soap_copy_ns__Media_Message);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_messages1 > 0 || soap_flag_leave_message_count1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Media_Message::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Media_Message);
	if (this->soap_out(soap, tag?tag:"ns:Media-Message", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Media_Message::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Media_Message(soap, this, tag, type);
}

SOAP_FMAC3 ns__Media_Message * SOAP_FMAC4 soap_get_ns__Media_Message(struct soap *soap, ns__Media_Message *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Media_Message(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Media_Message * SOAP_FMAC2 soap_instantiate_ns__Media_Message(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Media_Message(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Media_Message, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Media_Message);
		if (size)
			*size = sizeof(ns__Media_Message);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Media_Message, n);
		if (size)
			*size = n * sizeof(ns__Media_Message);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Media_Message*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Media_Message(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Media_Message %p -> %p\n", q, p));
	*(ns__Media_Message*)p = *(ns__Media_Message*)q;
}

void ns__Dispatch_Media_Message_Request_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__listTemplateOfns__MediaMessage(soap, &this->ns__Dispatch_Media_Message_Request_Response::data);
	soap_default_std__string(soap, &this->ns__Dispatch_Media_Message_Request_Response::size);
	soap_default_std__string(soap, &this->ns__Dispatch_Media_Message_Request_Response::leave_message_count);
	soap_default_std__string(soap, &this->ns__Dispatch_Media_Message_Request_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Media_Message_Request_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Media_Message_Request_Response::result);
}

void ns__Dispatch_Media_Message_Request_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__listTemplateOfns__MediaMessage(soap, &this->ns__Dispatch_Media_Message_Request_Response::data);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Media_Message_Request_Response::size);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Media_Message_Request_Response::leave_message_count);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Media_Message_Request_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Media_Message_Request_Response::error_describe);
#endif
}

int ns__Dispatch_Media_Message_Request_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Media_Message_Request_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Media_Message_Request_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Media_Message_Request_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Media_Message_Request_Response), type))
		return soap->error;
	if (soap_out_std__listTemplateOfns__MediaMessage(soap, "data", -1, &(a->ns__Dispatch_Media_Message_Request_Response::data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "size", -1, &(a->ns__Dispatch_Media_Message_Request_Response::size), ""))
		return soap->error;
	if (soap_out_std__string(soap, "leave-message-count", -1, &(a->ns__Dispatch_Media_Message_Request_Response::leave_message_count), ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Media_Message_Request_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Media_Message_Request_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Media_Message_Request_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Media_Message_Request_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Media_Message_Request_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Media_Message_Request_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Media_Message_Request_Response(struct soap *soap, const char *tag, ns__Dispatch_Media_Message_Request_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Media_Message_Request_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Media_Message_Request_Response, sizeof(ns__Dispatch_Media_Message_Request_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Media_Message_Request_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Media_Message_Request_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_size1 = 1;
	size_t soap_flag_leave_message_count1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__listTemplateOfns__MediaMessage(soap, "data", &(a->ns__Dispatch_Media_Message_Request_Response::data), "ns:MediaMessage"))
					continue;
			if (soap_flag_size1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "size", &(a->ns__Dispatch_Media_Message_Request_Response::size), "xsd:string"))
				{	soap_flag_size1--;
					continue;
				}
			if (soap_flag_leave_message_count1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "leave-message-count", &(a->ns__Dispatch_Media_Message_Request_Response::leave_message_count), "xsd:string"))
				{	soap_flag_leave_message_count1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Media_Message_Request_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Media_Message_Request_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Media_Message_Request_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Media_Message_Request_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Media_Message_Request_Response, 0, sizeof(ns__Dispatch_Media_Message_Request_Response), 0, soap_copy_ns__Dispatch_Media_Message_Request_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_size1 > 0 || soap_flag_leave_message_count1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Media_Message_Request_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Media_Message_Request_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Media-Message-Request-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Media_Message_Request_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Media_Message_Request_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Media_Message_Request_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Media_Message_Request_Response(struct soap *soap, ns__Dispatch_Media_Message_Request_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Media_Message_Request_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Media_Message_Request_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Media_Message_Request_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Media_Message_Request_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Media_Message_Request_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Media_Message_Request_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Media_Message_Request_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Media_Message_Request_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Media_Message_Request_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Media_Message_Request_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Media_Message_Request_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Media_Message_Request_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Media_Message_Request_Response*)p = *(ns__Dispatch_Media_Message_Request_Response*)q;
}

void ns__MediaMessage::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->ns__MediaMessage::id);
	soap_default_std__string(soap, &this->ns__MediaMessage::sender);
	soap_default_std__string(soap, &this->ns__MediaMessage::text);
	soap_default_std__string(soap, &this->ns__MediaMessage::picture_uri);
	soap_default_std__string(soap, &this->ns__MediaMessage::audio_uri);
	soap_default_std__string(soap, &this->ns__MediaMessage::audio_length);
	soap_default_std__string(soap, &this->ns__MediaMessage::video_uri);
	soap_default_std__string(soap, &this->ns__MediaMessage::video_length);
	soap_default_std__string(soap, &this->ns__MediaMessage::timestamp);
}

void ns__MediaMessage::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns__MediaMessage::id);
	soap_serialize_std__string(soap, &this->ns__MediaMessage::sender);
	soap_serialize_std__string(soap, &this->ns__MediaMessage::text);
	soap_serialize_std__string(soap, &this->ns__MediaMessage::picture_uri);
	soap_serialize_std__string(soap, &this->ns__MediaMessage::audio_uri);
	soap_serialize_std__string(soap, &this->ns__MediaMessage::audio_length);
	soap_serialize_std__string(soap, &this->ns__MediaMessage::video_uri);
	soap_serialize_std__string(soap, &this->ns__MediaMessage::video_length);
	soap_serialize_std__string(soap, &this->ns__MediaMessage::timestamp);
#endif
}

int ns__MediaMessage::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__MediaMessage(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__MediaMessage(struct soap *soap, const char *tag, int id, const ns__MediaMessage *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__MediaMessage), type))
		return soap->error;
	if (soap_out_std__string(soap, "id", -1, &(a->ns__MediaMessage::id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sender", -1, &(a->ns__MediaMessage::sender), ""))
		return soap->error;
	if (soap_out_std__string(soap, "text", -1, &(a->ns__MediaMessage::text), ""))
		return soap->error;
	if (soap_out_std__string(soap, "picture-uri", -1, &(a->ns__MediaMessage::picture_uri), ""))
		return soap->error;
	if (soap_out_std__string(soap, "audio-uri", -1, &(a->ns__MediaMessage::audio_uri), ""))
		return soap->error;
	if (soap_out_std__string(soap, "audio-length", -1, &(a->ns__MediaMessage::audio_length), ""))
		return soap->error;
	if (soap_out_std__string(soap, "video-uri", -1, &(a->ns__MediaMessage::video_uri), ""))
		return soap->error;
	if (soap_out_std__string(soap, "video-length", -1, &(a->ns__MediaMessage::video_length), ""))
		return soap->error;
	if (soap_out_std__string(soap, "timestamp", -1, &(a->ns__MediaMessage::timestamp), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__MediaMessage::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__MediaMessage(soap, tag, this, type);
}

SOAP_FMAC3 ns__MediaMessage * SOAP_FMAC4 soap_in_ns__MediaMessage(struct soap *soap, const char *tag, ns__MediaMessage *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__MediaMessage *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__MediaMessage, sizeof(ns__MediaMessage), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__MediaMessage)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__MediaMessage *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_sender1 = 1;
	size_t soap_flag_text1 = 1;
	size_t soap_flag_picture_uri1 = 1;
	size_t soap_flag_audio_uri1 = 1;
	size_t soap_flag_audio_length1 = 1;
	size_t soap_flag_video_uri1 = 1;
	size_t soap_flag_video_length1 = 1;
	size_t soap_flag_timestamp1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "id", &(a->ns__MediaMessage::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_sender1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sender", &(a->ns__MediaMessage::sender), "xsd:string"))
				{	soap_flag_sender1--;
					continue;
				}
			if (soap_flag_text1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "text", &(a->ns__MediaMessage::text), "xsd:string"))
				{	soap_flag_text1--;
					continue;
				}
			if (soap_flag_picture_uri1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "picture-uri", &(a->ns__MediaMessage::picture_uri), "xsd:string"))
				{	soap_flag_picture_uri1--;
					continue;
				}
			if (soap_flag_audio_uri1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "audio-uri", &(a->ns__MediaMessage::audio_uri), "xsd:string"))
				{	soap_flag_audio_uri1--;
					continue;
				}
			if (soap_flag_audio_length1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "audio-length", &(a->ns__MediaMessage::audio_length), "xsd:string"))
				{	soap_flag_audio_length1--;
					continue;
				}
			if (soap_flag_video_uri1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "video-uri", &(a->ns__MediaMessage::video_uri), "xsd:string"))
				{	soap_flag_video_uri1--;
					continue;
				}
			if (soap_flag_video_length1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "video-length", &(a->ns__MediaMessage::video_length), "xsd:string"))
				{	soap_flag_video_length1--;
					continue;
				}
			if (soap_flag_timestamp1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "timestamp", &(a->ns__MediaMessage::timestamp), "xsd:string"))
				{	soap_flag_timestamp1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__MediaMessage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__MediaMessage, 0, sizeof(ns__MediaMessage), 0, soap_copy_ns__MediaMessage);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_sender1 > 0 || soap_flag_text1 > 0 || soap_flag_picture_uri1 > 0 || soap_flag_audio_uri1 > 0 || soap_flag_audio_length1 > 0 || soap_flag_video_uri1 > 0 || soap_flag_video_length1 > 0 || soap_flag_timestamp1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__MediaMessage::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__MediaMessage);
	if (this->soap_out(soap, tag?tag:"ns:MediaMessage", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__MediaMessage::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__MediaMessage(soap, this, tag, type);
}

SOAP_FMAC3 ns__MediaMessage * SOAP_FMAC4 soap_get_ns__MediaMessage(struct soap *soap, ns__MediaMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__MediaMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__MediaMessage * SOAP_FMAC2 soap_instantiate_ns__MediaMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__MediaMessage(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__MediaMessage, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__MediaMessage);
		if (size)
			*size = sizeof(ns__MediaMessage);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__MediaMessage, n);
		if (size)
			*size = n * sizeof(ns__MediaMessage);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__MediaMessage*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__MediaMessage(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__MediaMessage %p -> %p\n", q, p));
	*(ns__MediaMessage*)p = *(ns__MediaMessage*)q;
}

void ns__Dispatch_Participant_Status_Notification_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Participant_Status_Notification_Response::group_id.ns__Entity::soap_default(soap);
	this->ns__Dispatch_Participant_Status_Notification_Response::account_id.ns__Entity::soap_default(soap);
	soap_default_ns__SessionStatus(soap, &this->ns__Dispatch_Participant_Status_Notification_Response::status);
	soap_default_std__string(soap, &this->ns__Dispatch_Participant_Status_Notification_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Participant_Status_Notification_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Participant_Status_Notification_Response::result);
}

void ns__Dispatch_Participant_Status_Notification_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Participant_Status_Notification_Response::group_id.soap_serialize(soap);
	this->ns__Dispatch_Participant_Status_Notification_Response::account_id.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Participant_Status_Notification_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Participant_Status_Notification_Response::error_describe);
#endif
}

int ns__Dispatch_Participant_Status_Notification_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Participant_Status_Notification_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Participant_Status_Notification_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Participant_Status_Notification_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Participant_Status_Notification_Response), type))
		return soap->error;
	if ((a->ns__Dispatch_Participant_Status_Notification_Response::group_id).soap_out(soap, "group-id", -1, ""))
		return soap->error;
	if ((a->ns__Dispatch_Participant_Status_Notification_Response::account_id).soap_out(soap, "account-id", -1, ""))
		return soap->error;
	if (soap_out_ns__SessionStatus(soap, "status", -1, &(a->ns__Dispatch_Participant_Status_Notification_Response::status), ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Participant_Status_Notification_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Participant_Status_Notification_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Participant_Status_Notification_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Participant_Status_Notification_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Participant_Status_Notification_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Participant_Status_Notification_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Participant_Status_Notification_Response(struct soap *soap, const char *tag, ns__Dispatch_Participant_Status_Notification_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Participant_Status_Notification_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Participant_Status_Notification_Response, sizeof(ns__Dispatch_Participant_Status_Notification_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Participant_Status_Notification_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Participant_Status_Notification_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_group_id1 = 1;
	size_t soap_flag_account_id1 = 1;
	size_t soap_flag_status1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_group_id1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Participant_Status_Notification_Response::group_id).soap_in(soap, "group-id", "ns:Entity"))
				{	soap_flag_group_id1--;
					continue;
				}
			if (soap_flag_account_id1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Participant_Status_Notification_Response::account_id).soap_in(soap, "account-id", "ns:Entity"))
				{	soap_flag_account_id1--;
					continue;
				}
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__SessionStatus(soap, "status", &(a->ns__Dispatch_Participant_Status_Notification_Response::status), "ns:SessionStatus"))
				{	soap_flag_status1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Participant_Status_Notification_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Participant_Status_Notification_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Participant_Status_Notification_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Participant_Status_Notification_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Participant_Status_Notification_Response, 0, sizeof(ns__Dispatch_Participant_Status_Notification_Response), 0, soap_copy_ns__Dispatch_Participant_Status_Notification_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_group_id1 > 0 || soap_flag_account_id1 > 0 || soap_flag_status1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Participant_Status_Notification_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Participant_Status_Notification_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Participant-Status-Notification-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Participant_Status_Notification_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Participant_Status_Notification_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Participant_Status_Notification_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Participant_Status_Notification_Response(struct soap *soap, ns__Dispatch_Participant_Status_Notification_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Participant_Status_Notification_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Participant_Status_Notification_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Participant_Status_Notification_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Participant_Status_Notification_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Participant_Status_Notification_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Participant_Status_Notification_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Participant_Status_Notification_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Participant_Status_Notification_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Participant_Status_Notification_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Participant_Status_Notification_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Participant_Status_Notification_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Participant_Status_Notification_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Participant_Status_Notification_Response*)p = *(ns__Dispatch_Participant_Status_Notification_Response*)q;
}

void ns__Dispatch_Join_Group_Request_Nofitication_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Join_Group_Request_Nofitication_Response::group_id.ns__Entity::soap_default(soap);
	this->ns__Dispatch_Join_Group_Request_Nofitication_Response::account_id.ns__Entity::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Dispatch_Join_Group_Request_Nofitication_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Join_Group_Request_Nofitication_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Join_Group_Request_Nofitication_Response::result);
}

void ns__Dispatch_Join_Group_Request_Nofitication_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Join_Group_Request_Nofitication_Response::group_id.soap_serialize(soap);
	this->ns__Dispatch_Join_Group_Request_Nofitication_Response::account_id.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Join_Group_Request_Nofitication_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Join_Group_Request_Nofitication_Response::error_describe);
#endif
}

int ns__Dispatch_Join_Group_Request_Nofitication_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Join_Group_Request_Nofitication_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Join_Group_Request_Nofitication_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Join_Group_Request_Nofitication_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication_Response), type))
		return soap->error;
	if ((a->ns__Dispatch_Join_Group_Request_Nofitication_Response::group_id).soap_out(soap, "group-id", -1, ""))
		return soap->error;
	if ((a->ns__Dispatch_Join_Group_Request_Nofitication_Response::account_id).soap_out(soap, "account-id", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Join_Group_Request_Nofitication_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Join_Group_Request_Nofitication_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Join_Group_Request_Nofitication_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Join_Group_Request_Nofitication_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Join_Group_Request_Nofitication_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Join_Group_Request_Nofitication_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Join_Group_Request_Nofitication_Response(struct soap *soap, const char *tag, ns__Dispatch_Join_Group_Request_Nofitication_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Join_Group_Request_Nofitication_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication_Response, sizeof(ns__Dispatch_Join_Group_Request_Nofitication_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Join_Group_Request_Nofitication_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_group_id1 = 1;
	size_t soap_flag_account_id1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_group_id1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Join_Group_Request_Nofitication_Response::group_id).soap_in(soap, "group-id", "ns:Entity"))
				{	soap_flag_group_id1--;
					continue;
				}
			if (soap_flag_account_id1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Join_Group_Request_Nofitication_Response::account_id).soap_in(soap, "account-id", "ns:Entity"))
				{	soap_flag_account_id1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Join_Group_Request_Nofitication_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Join_Group_Request_Nofitication_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Join_Group_Request_Nofitication_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Join_Group_Request_Nofitication_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication_Response, 0, sizeof(ns__Dispatch_Join_Group_Request_Nofitication_Response), 0, soap_copy_ns__Dispatch_Join_Group_Request_Nofitication_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_group_id1 > 0 || soap_flag_account_id1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Join_Group_Request_Nofitication_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Join-Group-Request-Nofitication-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Join_Group_Request_Nofitication_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Join_Group_Request_Nofitication_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Join_Group_Request_Nofitication_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Join_Group_Request_Nofitication_Response(struct soap *soap, ns__Dispatch_Join_Group_Request_Nofitication_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Join_Group_Request_Nofitication_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Join_Group_Request_Nofitication_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Join_Group_Request_Nofitication_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Join_Group_Request_Nofitication_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Join_Group_Request_Nofitication_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Join_Group_Request_Nofitication_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Join_Group_Request_Nofitication_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Join_Group_Request_Nofitication_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Join_Group_Request_Nofitication_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Join_Group_Request_Nofitication_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Join_Group_Request_Nofitication_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Join_Group_Request_Nofitication_Response*)p = *(ns__Dispatch_Join_Group_Request_Nofitication_Response*)q;
}

void ns__Dispatch_Dispatch_Participants_Notification_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Dispatch_Participants_Notification_Response::data.ns__Modify_Participant::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Dispatch_Dispatch_Participants_Notification_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Dispatch_Participants_Notification_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Dispatch_Participants_Notification_Response::result);
}

void ns__Dispatch_Dispatch_Participants_Notification_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Dispatch_Participants_Notification_Response::data.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Dispatch_Participants_Notification_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Dispatch_Participants_Notification_Response::error_describe);
#endif
}

int ns__Dispatch_Dispatch_Participants_Notification_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Dispatch_Participants_Notification_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Dispatch_Participants_Notification_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Dispatch_Participants_Notification_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification_Response), type))
		return soap->error;
	if ((a->ns__Dispatch_Dispatch_Participants_Notification_Response::data).soap_out(soap, "data", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Dispatch_Participants_Notification_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Dispatch_Participants_Notification_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Dispatch_Participants_Notification_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Dispatch_Participants_Notification_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Dispatch_Participants_Notification_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Dispatch_Participants_Notification_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Dispatch_Participants_Notification_Response(struct soap *soap, const char *tag, ns__Dispatch_Dispatch_Participants_Notification_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Dispatch_Participants_Notification_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification_Response, sizeof(ns__Dispatch_Dispatch_Participants_Notification_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Dispatch_Participants_Notification_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_data1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_data1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Dispatch_Participants_Notification_Response::data).soap_in(soap, "data", "ns:Modify-Participant"))
				{	soap_flag_data1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Dispatch_Participants_Notification_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Dispatch_Participants_Notification_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Dispatch_Participants_Notification_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Dispatch_Participants_Notification_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification_Response, 0, sizeof(ns__Dispatch_Dispatch_Participants_Notification_Response), 0, soap_copy_ns__Dispatch_Dispatch_Participants_Notification_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_data1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Dispatch_Participants_Notification_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Dispatch-Participants-Notification-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Dispatch_Participants_Notification_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Dispatch_Participants_Notification_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Dispatch_Participants_Notification_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Dispatch_Participants_Notification_Response(struct soap *soap, ns__Dispatch_Dispatch_Participants_Notification_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Dispatch_Participants_Notification_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Dispatch_Participants_Notification_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Dispatch_Participants_Notification_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Dispatch_Participants_Notification_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Dispatch_Participants_Notification_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Dispatch_Participants_Notification_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Dispatch_Participants_Notification_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Dispatch_Participants_Notification_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Dispatch_Participants_Notification_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Dispatch_Participants_Notification_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Dispatch_Participants_Notification_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Dispatch_Participants_Notification_Response*)p = *(ns__Dispatch_Dispatch_Participants_Notification_Response*)q;
}

void ns__Dispatch_Modify_Participants_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Modify_Participants_Response::data.ns__Modify_Participant::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Dispatch_Modify_Participants_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Modify_Participants_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Modify_Participants_Response::result);
}

void ns__Dispatch_Modify_Participants_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Modify_Participants_Response::data.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Modify_Participants_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Modify_Participants_Response::error_describe);
#endif
}

int ns__Dispatch_Modify_Participants_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Modify_Participants_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Modify_Participants_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Modify_Participants_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Modify_Participants_Response), type))
		return soap->error;
	if ((a->ns__Dispatch_Modify_Participants_Response::data).soap_out(soap, "data", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Modify_Participants_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Modify_Participants_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Modify_Participants_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Modify_Participants_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Modify_Participants_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Modify_Participants_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Modify_Participants_Response(struct soap *soap, const char *tag, ns__Dispatch_Modify_Participants_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Modify_Participants_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Modify_Participants_Response, sizeof(ns__Dispatch_Modify_Participants_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Modify_Participants_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Modify_Participants_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_data1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_data1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Modify_Participants_Response::data).soap_in(soap, "data", "ns:Modify-Participant"))
				{	soap_flag_data1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Modify_Participants_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Modify_Participants_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Modify_Participants_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Modify_Participants_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Modify_Participants_Response, 0, sizeof(ns__Dispatch_Modify_Participants_Response), 0, soap_copy_ns__Dispatch_Modify_Participants_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_data1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Modify_Participants_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Modify_Participants_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Modify-Participants-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Modify_Participants_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Modify_Participants_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Modify_Participants_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Modify_Participants_Response(struct soap *soap, ns__Dispatch_Modify_Participants_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Modify_Participants_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Modify_Participants_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Modify_Participants_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Modify_Participants_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Modify_Participants_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Modify_Participants_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Modify_Participants_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Modify_Participants_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Modify_Participants_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Modify_Participants_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Modify_Participants_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Modify_Participants_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Modify_Participants_Response*)p = *(ns__Dispatch_Modify_Participants_Response*)q;
}

void ns__Modify_Participant::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Modify_Participant::group_id.ns__Entity::soap_default(soap);
	soap_default_ns__ListModifyType(soap, &this->ns__Modify_Participant::modify_type);
	soap_default_std__listTemplateOfns__Participant(soap, &this->ns__Modify_Participant::participants);
	soap_default_std__string(soap, &this->ns__Modify_Participant::size);
}

void ns__Modify_Participant::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Modify_Participant::group_id.soap_serialize(soap);
	soap_serialize_std__listTemplateOfns__Participant(soap, &this->ns__Modify_Participant::participants);
	soap_serialize_std__string(soap, &this->ns__Modify_Participant::size);
#endif
}

int ns__Modify_Participant::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Modify_Participant(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Modify_Participant(struct soap *soap, const char *tag, int id, const ns__Modify_Participant *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Modify_Participant), type))
		return soap->error;
	if ((a->ns__Modify_Participant::group_id).soap_out(soap, "group-id", -1, ""))
		return soap->error;
	if (soap_out_ns__ListModifyType(soap, "modify-type", -1, &(a->ns__Modify_Participant::modify_type), ""))
		return soap->error;
	if (soap_out_std__listTemplateOfns__Participant(soap, "participants", -1, &(a->ns__Modify_Participant::participants), ""))
		return soap->error;
	if (soap_out_std__string(soap, "size", -1, &(a->ns__Modify_Participant::size), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Modify_Participant::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Modify_Participant(soap, tag, this, type);
}

SOAP_FMAC3 ns__Modify_Participant * SOAP_FMAC4 soap_in_ns__Modify_Participant(struct soap *soap, const char *tag, ns__Modify_Participant *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Modify_Participant *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Modify_Participant, sizeof(ns__Modify_Participant), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Modify_Participant)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Modify_Participant *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_group_id1 = 1;
	size_t soap_flag_modify_type1 = 1;
	size_t soap_flag_size1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_group_id1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Modify_Participant::group_id).soap_in(soap, "group-id", "ns:Entity"))
				{	soap_flag_group_id1--;
					continue;
				}
			if (soap_flag_modify_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__ListModifyType(soap, "modify-type", &(a->ns__Modify_Participant::modify_type), "ns:ListModifyType"))
				{	soap_flag_modify_type1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__listTemplateOfns__Participant(soap, "participants", &(a->ns__Modify_Participant::participants), "ns:Participant"))
					continue;
			if (soap_flag_size1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "size", &(a->ns__Modify_Participant::size), "xsd:string"))
				{	soap_flag_size1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Modify_Participant *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Modify_Participant, 0, sizeof(ns__Modify_Participant), 0, soap_copy_ns__Modify_Participant);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_group_id1 > 0 || soap_flag_modify_type1 > 0 || soap_flag_size1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Modify_Participant::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Modify_Participant);
	if (this->soap_out(soap, tag?tag:"ns:Modify-Participant", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Modify_Participant::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Modify_Participant(soap, this, tag, type);
}

SOAP_FMAC3 ns__Modify_Participant * SOAP_FMAC4 soap_get_ns__Modify_Participant(struct soap *soap, ns__Modify_Participant *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Modify_Participant(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Modify_Participant * SOAP_FMAC2 soap_instantiate_ns__Modify_Participant(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Modify_Participant(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Modify_Participant, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Modify_Participant);
		if (size)
			*size = sizeof(ns__Modify_Participant);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Modify_Participant, n);
		if (size)
			*size = n * sizeof(ns__Modify_Participant);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Modify_Participant*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Modify_Participant(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Modify_Participant %p -> %p\n", q, p));
	*(ns__Modify_Participant*)p = *(ns__Modify_Participant*)q;
}

void ns__Entity_Status_Notification::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Entity_Status_Notification::id.ns__Entity::soap_default(soap);
	soap_default_ns__RegisterStatus(soap, &this->ns__Entity_Status_Notification::status);
	soap_default_ns__RegisterStatus(soap, &this->ns__Entity_Status_Notification::sip_status);
}

void ns__Entity_Status_Notification::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Entity_Status_Notification::id.soap_serialize(soap);
#endif
}

int ns__Entity_Status_Notification::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Entity_Status_Notification(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Entity_Status_Notification(struct soap *soap, const char *tag, int id, const ns__Entity_Status_Notification *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Entity_Status_Notification), type))
		return soap->error;
	if ((a->ns__Entity_Status_Notification::id).soap_out(soap, "id", -1, ""))
		return soap->error;
	if (soap_out_ns__RegisterStatus(soap, "status", -1, &(a->ns__Entity_Status_Notification::status), ""))
		return soap->error;
	if (soap_out_ns__RegisterStatus(soap, "sip-status", -1, &(a->ns__Entity_Status_Notification::sip_status), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Entity_Status_Notification::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Entity_Status_Notification(soap, tag, this, type);
}

SOAP_FMAC3 ns__Entity_Status_Notification * SOAP_FMAC4 soap_in_ns__Entity_Status_Notification(struct soap *soap, const char *tag, ns__Entity_Status_Notification *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Entity_Status_Notification *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Entity_Status_Notification, sizeof(ns__Entity_Status_Notification), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Entity_Status_Notification)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Entity_Status_Notification *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_status1 = 1;
	size_t soap_flag_sip_status1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Entity_Status_Notification::id).soap_in(soap, "id", "ns:Entity"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__RegisterStatus(soap, "status", &(a->ns__Entity_Status_Notification::status), "ns:RegisterStatus"))
				{	soap_flag_status1--;
					continue;
				}
			if (soap_flag_sip_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__RegisterStatus(soap, "sip-status", &(a->ns__Entity_Status_Notification::sip_status), "ns:RegisterStatus"))
				{	soap_flag_sip_status1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Entity_Status_Notification *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Entity_Status_Notification, 0, sizeof(ns__Entity_Status_Notification), 0, soap_copy_ns__Entity_Status_Notification);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_status1 > 0 || soap_flag_sip_status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Entity_Status_Notification::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Entity_Status_Notification);
	if (this->soap_out(soap, tag?tag:"ns:Entity-Status-Notification", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Entity_Status_Notification::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Entity_Status_Notification(soap, this, tag, type);
}

SOAP_FMAC3 ns__Entity_Status_Notification * SOAP_FMAC4 soap_get_ns__Entity_Status_Notification(struct soap *soap, ns__Entity_Status_Notification *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Entity_Status_Notification(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Entity_Status_Notification * SOAP_FMAC2 soap_instantiate_ns__Entity_Status_Notification(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Entity_Status_Notification(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Entity_Status_Notification, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Entity_Status_Notification);
		if (size)
			*size = sizeof(ns__Entity_Status_Notification);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Entity_Status_Notification, n);
		if (size)
			*size = n * sizeof(ns__Entity_Status_Notification);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Entity_Status_Notification*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Entity_Status_Notification(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Entity_Status_Notification %p -> %p\n", q, p));
	*(ns__Entity_Status_Notification*)p = *(ns__Entity_Status_Notification*)q;
}

void ns__Dispatch_Entity_Nofitication_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_ns__EntityNotifyType(soap, &this->ns__Dispatch_Entity_Nofitication_Response::notify_type);
	this->ns__Dispatch_Entity_Nofitication_Response::data.ns__EntityData::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Dispatch_Entity_Nofitication_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Entity_Nofitication_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Entity_Nofitication_Response::result);
}

void ns__Dispatch_Entity_Nofitication_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Entity_Nofitication_Response::data.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Entity_Nofitication_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Entity_Nofitication_Response::error_describe);
#endif
}

int ns__Dispatch_Entity_Nofitication_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Entity_Nofitication_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Entity_Nofitication_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Entity_Nofitication_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Entity_Nofitication_Response), type))
		return soap->error;
	if (soap_out_ns__EntityNotifyType(soap, "notify-type", -1, &(a->ns__Dispatch_Entity_Nofitication_Response::notify_type), ""))
		return soap->error;
	if ((a->ns__Dispatch_Entity_Nofitication_Response::data).soap_out(soap, "data", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Entity_Nofitication_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Entity_Nofitication_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Entity_Nofitication_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Entity_Nofitication_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Entity_Nofitication_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Entity_Nofitication_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Entity_Nofitication_Response(struct soap *soap, const char *tag, ns__Dispatch_Entity_Nofitication_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Entity_Nofitication_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Entity_Nofitication_Response, sizeof(ns__Dispatch_Entity_Nofitication_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Entity_Nofitication_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Entity_Nofitication_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_notify_type1 = 1;
	size_t soap_flag_data1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_notify_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__EntityNotifyType(soap, "notify-type", &(a->ns__Dispatch_Entity_Nofitication_Response::notify_type), "ns:EntityNotifyType"))
				{	soap_flag_notify_type1--;
					continue;
				}
			if (soap_flag_data1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Entity_Nofitication_Response::data).soap_in(soap, "data", "ns:EntityData"))
				{	soap_flag_data1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Entity_Nofitication_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Entity_Nofitication_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Entity_Nofitication_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Entity_Nofitication_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Entity_Nofitication_Response, 0, sizeof(ns__Dispatch_Entity_Nofitication_Response), 0, soap_copy_ns__Dispatch_Entity_Nofitication_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_notify_type1 > 0 || soap_flag_data1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Entity_Nofitication_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Entity_Nofitication_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Entity-Nofitication-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Entity_Nofitication_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Entity_Nofitication_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Entity_Nofitication_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Entity_Nofitication_Response(struct soap *soap, ns__Dispatch_Entity_Nofitication_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Entity_Nofitication_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Entity_Nofitication_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Entity_Nofitication_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Entity_Nofitication_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Entity_Nofitication_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Entity_Nofitication_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Entity_Nofitication_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Entity_Nofitication_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Entity_Nofitication_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Entity_Nofitication_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Entity_Nofitication_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Entity_Nofitication_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Entity_Nofitication_Response*)p = *(ns__Dispatch_Entity_Nofitication_Response*)q;
}

void ns__Dispatch_Entity_Request_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Entity_Request_Response::data.ns__EntityData::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Dispatch_Entity_Request_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Entity_Request_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Entity_Request_Response::result);
}

void ns__Dispatch_Entity_Request_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Entity_Request_Response::data.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Entity_Request_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Entity_Request_Response::error_describe);
#endif
}

int ns__Dispatch_Entity_Request_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Entity_Request_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Entity_Request_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Entity_Request_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Entity_Request_Response), type))
		return soap->error;
	if ((a->ns__Dispatch_Entity_Request_Response::data).soap_out(soap, "data", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Entity_Request_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Entity_Request_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Entity_Request_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Entity_Request_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Entity_Request_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Entity_Request_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Entity_Request_Response(struct soap *soap, const char *tag, ns__Dispatch_Entity_Request_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Entity_Request_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Entity_Request_Response, sizeof(ns__Dispatch_Entity_Request_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Entity_Request_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Entity_Request_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_data1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_data1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Entity_Request_Response::data).soap_in(soap, "data", "ns:EntityData"))
				{	soap_flag_data1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Entity_Request_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Entity_Request_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Entity_Request_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Entity_Request_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Entity_Request_Response, 0, sizeof(ns__Dispatch_Entity_Request_Response), 0, soap_copy_ns__Dispatch_Entity_Request_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_data1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Entity_Request_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Entity_Request_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Entity-Request-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Entity_Request_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Entity_Request_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Entity_Request_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Entity_Request_Response(struct soap *soap, ns__Dispatch_Entity_Request_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Entity_Request_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Entity_Request_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Entity_Request_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Entity_Request_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Entity_Request_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Entity_Request_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Entity_Request_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Entity_Request_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Entity_Request_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Entity_Request_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Entity_Request_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Entity_Request_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Entity_Request_Response*)p = *(ns__Dispatch_Entity_Request_Response*)q;
}

void ns__EntityData::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__EntityData::id.ns__Entity::soap_default(soap);
	this->ns__EntityData::unit.ns__Unit::soap_default(soap);
	this->ns__EntityData::account.ns__Account::soap_default(soap);
	this->ns__EntityData::user.ns__User::soap_default(soap);
	this->ns__EntityData::group.ns__Group::soap_default(soap);
	this->ns__EntityData::alert.ns__Alert::soap_default(soap);
	this->ns__EntityData::organization.ns__Organization::soap_default(soap);
}

void ns__EntityData::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__EntityData::id.soap_serialize(soap);
	this->ns__EntityData::unit.soap_serialize(soap);
	this->ns__EntityData::account.soap_serialize(soap);
	this->ns__EntityData::user.soap_serialize(soap);
	this->ns__EntityData::group.soap_serialize(soap);
	this->ns__EntityData::alert.soap_serialize(soap);
	this->ns__EntityData::organization.soap_serialize(soap);
#endif
}

int ns__EntityData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__EntityData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__EntityData(struct soap *soap, const char *tag, int id, const ns__EntityData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__EntityData), type))
		return soap->error;
	if ((a->ns__EntityData::id).soap_out(soap, "id", -1, ""))
		return soap->error;
	if ((a->ns__EntityData::unit).soap_out(soap, "unit", -1, ""))
		return soap->error;
	if ((a->ns__EntityData::account).soap_out(soap, "account", -1, ""))
		return soap->error;
	if ((a->ns__EntityData::user).soap_out(soap, "user", -1, ""))
		return soap->error;
	if ((a->ns__EntityData::group).soap_out(soap, "group", -1, ""))
		return soap->error;
	if ((a->ns__EntityData::alert).soap_out(soap, "alert", -1, ""))
		return soap->error;
	if ((a->ns__EntityData::organization).soap_out(soap, "organization", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__EntityData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__EntityData(soap, tag, this, type);
}

SOAP_FMAC3 ns__EntityData * SOAP_FMAC4 soap_in_ns__EntityData(struct soap *soap, const char *tag, ns__EntityData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__EntityData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__EntityData, sizeof(ns__EntityData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__EntityData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__EntityData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_unit1 = 1;
	size_t soap_flag_account1 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_group1 = 1;
	size_t soap_flag_alert1 = 1;
	size_t soap_flag_organization1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__EntityData::id).soap_in(soap, "id", "ns:Entity"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_unit1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__EntityData::unit).soap_in(soap, "unit", "ns:Unit"))
				{	soap_flag_unit1--;
					continue;
				}
			if (soap_flag_account1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__EntityData::account).soap_in(soap, "account", "ns:Account"))
				{	soap_flag_account1--;
					continue;
				}
			if (soap_flag_user1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__EntityData::user).soap_in(soap, "user", "ns:User"))
				{	soap_flag_user1--;
					continue;
				}
			if (soap_flag_group1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__EntityData::group).soap_in(soap, "group", "ns:Group"))
				{	soap_flag_group1--;
					continue;
				}
			if (soap_flag_alert1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__EntityData::alert).soap_in(soap, "alert", "ns:Alert"))
				{	soap_flag_alert1--;
					continue;
				}
			if (soap_flag_organization1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__EntityData::organization).soap_in(soap, "organization", "ns:Organization"))
				{	soap_flag_organization1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__EntityData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__EntityData, 0, sizeof(ns__EntityData), 0, soap_copy_ns__EntityData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_unit1 > 0 || soap_flag_account1 > 0 || soap_flag_user1 > 0 || soap_flag_group1 > 0 || soap_flag_alert1 > 0 || soap_flag_organization1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__EntityData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__EntityData);
	if (this->soap_out(soap, tag?tag:"ns:EntityData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__EntityData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__EntityData(soap, this, tag, type);
}

SOAP_FMAC3 ns__EntityData * SOAP_FMAC4 soap_get_ns__EntityData(struct soap *soap, ns__EntityData *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__EntityData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__EntityData * SOAP_FMAC2 soap_instantiate_ns__EntityData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__EntityData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__EntityData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__EntityData);
		if (size)
			*size = sizeof(ns__EntityData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__EntityData, n);
		if (size)
			*size = n * sizeof(ns__EntityData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__EntityData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__EntityData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__EntityData %p -> %p\n", q, p));
	*(ns__EntityData*)p = *(ns__EntityData*)q;
}

void ns__Organization::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Organization::base.ns__Entity::soap_default(soap);
	this->ns__Organization::members.ns__Entity::soap_default(soap);
}

void ns__Organization::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Organization::base.soap_serialize(soap);
	this->ns__Organization::members.soap_serialize(soap);
#endif
}

int ns__Organization::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Organization(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Organization(struct soap *soap, const char *tag, int id, const ns__Organization *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Organization), type))
		return soap->error;
	if ((a->ns__Organization::base).soap_out(soap, "base", -1, ""))
		return soap->error;
	if ((a->ns__Organization::members).soap_out(soap, "members", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Organization::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Organization(soap, tag, this, type);
}

SOAP_FMAC3 ns__Organization * SOAP_FMAC4 soap_in_ns__Organization(struct soap *soap, const char *tag, ns__Organization *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Organization *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Organization, sizeof(ns__Organization), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Organization)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Organization *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_base1 = 1;
	size_t soap_flag_members1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_base1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Organization::base).soap_in(soap, "base", "ns:Entity"))
				{	soap_flag_base1--;
					continue;
				}
			if (soap_flag_members1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Organization::members).soap_in(soap, "members", "ns:Entity"))
				{	soap_flag_members1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Organization *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Organization, 0, sizeof(ns__Organization), 0, soap_copy_ns__Organization);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_base1 > 0 || soap_flag_members1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Organization::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Organization);
	if (this->soap_out(soap, tag?tag:"ns:Organization", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Organization::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Organization(soap, this, tag, type);
}

SOAP_FMAC3 ns__Organization * SOAP_FMAC4 soap_get_ns__Organization(struct soap *soap, ns__Organization *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Organization(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Organization * SOAP_FMAC2 soap_instantiate_ns__Organization(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Organization(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Organization, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Organization);
		if (size)
			*size = sizeof(ns__Organization);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Organization, n);
		if (size)
			*size = n * sizeof(ns__Organization);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Organization*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Organization(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Organization %p -> %p\n", q, p));
	*(ns__Organization*)p = *(ns__Organization*)q;
}

void ns__Dispatch_Append_Alert_Request_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Append_Alert_Request_Response::data.ns__Alert::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Dispatch_Append_Alert_Request_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Append_Alert_Request_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Append_Alert_Request_Response::result);
}

void ns__Dispatch_Append_Alert_Request_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Append_Alert_Request_Response::data.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Append_Alert_Request_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Append_Alert_Request_Response::error_describe);
#endif
}

int ns__Dispatch_Append_Alert_Request_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Append_Alert_Request_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Append_Alert_Request_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Append_Alert_Request_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Append_Alert_Request_Response), type))
		return soap->error;
	if ((a->ns__Dispatch_Append_Alert_Request_Response::data).soap_out(soap, "data", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Append_Alert_Request_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Append_Alert_Request_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Append_Alert_Request_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Append_Alert_Request_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Append_Alert_Request_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Append_Alert_Request_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Append_Alert_Request_Response(struct soap *soap, const char *tag, ns__Dispatch_Append_Alert_Request_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Append_Alert_Request_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Append_Alert_Request_Response, sizeof(ns__Dispatch_Append_Alert_Request_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Append_Alert_Request_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Append_Alert_Request_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_data1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_data1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Append_Alert_Request_Response::data).soap_in(soap, "data", "ns:Alert"))
				{	soap_flag_data1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Append_Alert_Request_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Append_Alert_Request_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Append_Alert_Request_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Append_Alert_Request_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Append_Alert_Request_Response, 0, sizeof(ns__Dispatch_Append_Alert_Request_Response), 0, soap_copy_ns__Dispatch_Append_Alert_Request_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_data1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Append_Alert_Request_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Append_Alert_Request_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Append-Alert-Request-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Append_Alert_Request_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Append_Alert_Request_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Append_Alert_Request_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Append_Alert_Request_Response(struct soap *soap, ns__Dispatch_Append_Alert_Request_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Append_Alert_Request_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Append_Alert_Request_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Append_Alert_Request_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Append_Alert_Request_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Append_Alert_Request_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Append_Alert_Request_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Append_Alert_Request_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Append_Alert_Request_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Append_Alert_Request_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Append_Alert_Request_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Append_Alert_Request_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Append_Alert_Request_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Append_Alert_Request_Response*)p = *(ns__Dispatch_Append_Alert_Request_Response*)q;
}

void ns__Alert::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Alert::base.ns__Entity::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Alert::group_id);
	soap_default_std__string(soap, &this->ns__Alert::describe);
	soap_default_ns__AlertLevel(soap, &this->ns__Alert::level);
	soap_default_std__string(soap, &this->ns__Alert::alram_time);
	soap_default_std__string(soap, &this->ns__Alert::use_cars);
	soap_default_std__string(soap, &this->ns__Alert::create_time);
	soap_default_ns__AlertStatus(soap, &this->ns__Alert::status);
}

void ns__Alert::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Alert::base.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Alert::group_id);
	soap_serialize_std__string(soap, &this->ns__Alert::describe);
	soap_serialize_std__string(soap, &this->ns__Alert::alram_time);
	soap_serialize_std__string(soap, &this->ns__Alert::use_cars);
	soap_serialize_std__string(soap, &this->ns__Alert::create_time);
#endif
}

int ns__Alert::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Alert(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Alert(struct soap *soap, const char *tag, int id, const ns__Alert *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Alert), type))
		return soap->error;
	if ((a->ns__Alert::base).soap_out(soap, "base", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "group-id", -1, &(a->ns__Alert::group_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "describe", -1, &(a->ns__Alert::describe), ""))
		return soap->error;
	if (soap_out_ns__AlertLevel(soap, "level", -1, &(a->ns__Alert::level), ""))
		return soap->error;
	if (soap_out_std__string(soap, "alram-time", -1, &(a->ns__Alert::alram_time), ""))
		return soap->error;
	if (soap_out_std__string(soap, "use-cars", -1, &(a->ns__Alert::use_cars), ""))
		return soap->error;
	if (soap_out_std__string(soap, "create-time", -1, &(a->ns__Alert::create_time), ""))
		return soap->error;
	if (soap_out_ns__AlertStatus(soap, "status", -1, &(a->ns__Alert::status), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Alert::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Alert(soap, tag, this, type);
}

SOAP_FMAC3 ns__Alert * SOAP_FMAC4 soap_in_ns__Alert(struct soap *soap, const char *tag, ns__Alert *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Alert *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Alert, sizeof(ns__Alert), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Alert)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Alert *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_base1 = 1;
	size_t soap_flag_group_id1 = 1;
	size_t soap_flag_describe1 = 1;
	size_t soap_flag_level1 = 1;
	size_t soap_flag_alram_time1 = 1;
	size_t soap_flag_use_cars1 = 1;
	size_t soap_flag_create_time1 = 1;
	size_t soap_flag_status1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_base1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Alert::base).soap_in(soap, "base", "ns:Entity"))
				{	soap_flag_base1--;
					continue;
				}
			if (soap_flag_group_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "group-id", &(a->ns__Alert::group_id), "xsd:string"))
				{	soap_flag_group_id1--;
					continue;
				}
			if (soap_flag_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "describe", &(a->ns__Alert::describe), "xsd:string"))
				{	soap_flag_describe1--;
					continue;
				}
			if (soap_flag_level1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__AlertLevel(soap, "level", &(a->ns__Alert::level), "ns:AlertLevel"))
				{	soap_flag_level1--;
					continue;
				}
			if (soap_flag_alram_time1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "alram-time", &(a->ns__Alert::alram_time), "xsd:string"))
				{	soap_flag_alram_time1--;
					continue;
				}
			if (soap_flag_use_cars1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "use-cars", &(a->ns__Alert::use_cars), "xsd:string"))
				{	soap_flag_use_cars1--;
					continue;
				}
			if (soap_flag_create_time1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "create-time", &(a->ns__Alert::create_time), "xsd:string"))
				{	soap_flag_create_time1--;
					continue;
				}
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__AlertStatus(soap, "status", &(a->ns__Alert::status), "ns:AlertStatus"))
				{	soap_flag_status1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Alert *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Alert, 0, sizeof(ns__Alert), 0, soap_copy_ns__Alert);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_base1 > 0 || soap_flag_group_id1 > 0 || soap_flag_describe1 > 0 || soap_flag_level1 > 0 || soap_flag_alram_time1 > 0 || soap_flag_use_cars1 > 0 || soap_flag_create_time1 > 0 || soap_flag_status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Alert::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Alert);
	if (this->soap_out(soap, tag?tag:"ns:Alert", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Alert::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Alert(soap, this, tag, type);
}

SOAP_FMAC3 ns__Alert * SOAP_FMAC4 soap_get_ns__Alert(struct soap *soap, ns__Alert *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Alert(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Alert * SOAP_FMAC2 soap_instantiate_ns__Alert(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Alert(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Alert, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Alert);
		if (size)
			*size = sizeof(ns__Alert);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Alert, n);
		if (size)
			*size = n * sizeof(ns__Alert);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Alert*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Alert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Alert %p -> %p\n", q, p));
	*(ns__Alert*)p = *(ns__Alert*)q;
}

void ns__Dispatch_Modify_Group_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Modify_Group_Response::data.ns__Group::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Dispatch_Modify_Group_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Modify_Group_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Modify_Group_Response::result);
}

void ns__Dispatch_Modify_Group_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Modify_Group_Response::data.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Modify_Group_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Modify_Group_Response::error_describe);
#endif
}

int ns__Dispatch_Modify_Group_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Modify_Group_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Modify_Group_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Modify_Group_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Modify_Group_Response), type))
		return soap->error;
	if ((a->ns__Dispatch_Modify_Group_Response::data).soap_out(soap, "data", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Modify_Group_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Modify_Group_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Modify_Group_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Modify_Group_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Modify_Group_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Modify_Group_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Modify_Group_Response(struct soap *soap, const char *tag, ns__Dispatch_Modify_Group_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Modify_Group_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Modify_Group_Response, sizeof(ns__Dispatch_Modify_Group_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Modify_Group_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Modify_Group_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_data1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_data1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Modify_Group_Response::data).soap_in(soap, "data", "ns:Group"))
				{	soap_flag_data1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Modify_Group_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Modify_Group_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Modify_Group_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Modify_Group_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Modify_Group_Response, 0, sizeof(ns__Dispatch_Modify_Group_Response), 0, soap_copy_ns__Dispatch_Modify_Group_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_data1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Modify_Group_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Modify_Group_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Modify-Group-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Modify_Group_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Modify_Group_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Modify_Group_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Modify_Group_Response(struct soap *soap, ns__Dispatch_Modify_Group_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Modify_Group_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Modify_Group_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Modify_Group_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Modify_Group_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Modify_Group_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Modify_Group_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Modify_Group_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Modify_Group_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Modify_Group_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Modify_Group_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Modify_Group_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Modify_Group_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Modify_Group_Response*)p = *(ns__Dispatch_Modify_Group_Response*)q;
}

void ns__Dispatch_Append_Group_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Append_Group_Response::data.ns__Group::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Dispatch_Append_Group_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Append_Group_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Append_Group_Response::result);
}

void ns__Dispatch_Append_Group_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Dispatch_Append_Group_Response::data.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Append_Group_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Append_Group_Response::error_describe);
#endif
}

int ns__Dispatch_Append_Group_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Append_Group_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Append_Group_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Append_Group_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Append_Group_Response), type))
		return soap->error;
	if ((a->ns__Dispatch_Append_Group_Response::data).soap_out(soap, "data", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Append_Group_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Append_Group_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Append_Group_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Append_Group_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Append_Group_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Append_Group_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Append_Group_Response(struct soap *soap, const char *tag, ns__Dispatch_Append_Group_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Append_Group_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Append_Group_Response, sizeof(ns__Dispatch_Append_Group_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Append_Group_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Append_Group_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_data1 = 1;
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_data1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Dispatch_Append_Group_Response::data).soap_in(soap, "data", "ns:Group"))
				{	soap_flag_data1--;
					continue;
				}
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Append_Group_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Append_Group_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Append_Group_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Append_Group_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Append_Group_Response, 0, sizeof(ns__Dispatch_Append_Group_Response), 0, soap_copy_ns__Dispatch_Append_Group_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_data1 > 0 || soap_flag_session_id1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Append_Group_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Append_Group_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Append-Group-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Append_Group_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Append_Group_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Append_Group_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Append_Group_Response(struct soap *soap, ns__Dispatch_Append_Group_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Append_Group_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Append_Group_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Append_Group_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Append_Group_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Append_Group_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Append_Group_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Append_Group_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Append_Group_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Append_Group_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Append_Group_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Append_Group_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Append_Group_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Append_Group_Response*)p = *(ns__Dispatch_Append_Group_Response*)q;
}

void ns__Group::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->ns__Group::id);
	soap_default_std__string(soap, &this->ns__Group::name);
	soap_default_std__string(soap, &this->ns__Group::owner_id);
	soap_default_std__string(soap, &this->ns__Group::number);
	soap_default_std__string(soap, &this->ns__Group::short_number);
	soap_default_std__listTemplateOfns__Participant(soap, &this->ns__Group::participants);
	soap_default_std__string(soap, &this->ns__Group::size);
	soap_default_ns__RecordType(soap, &this->ns__Group::record_type);
	soap_default_ns__RecordStatus(soap, &this->ns__Group::record_status);
}

void ns__Group::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns__Group::id);
	soap_serialize_std__string(soap, &this->ns__Group::name);
	soap_serialize_std__string(soap, &this->ns__Group::owner_id);
	soap_serialize_std__string(soap, &this->ns__Group::number);
	soap_serialize_std__string(soap, &this->ns__Group::short_number);
	soap_serialize_std__listTemplateOfns__Participant(soap, &this->ns__Group::participants);
	soap_serialize_std__string(soap, &this->ns__Group::size);
#endif
}

int ns__Group::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Group(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Group(struct soap *soap, const char *tag, int id, const ns__Group *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Group), type))
		return soap->error;
	if (soap_out_std__string(soap, "id", -1, &(a->ns__Group::id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "name", -1, &(a->ns__Group::name), ""))
		return soap->error;
	if (soap_out_std__string(soap, "owner-id", -1, &(a->ns__Group::owner_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "number", -1, &(a->ns__Group::number), ""))
		return soap->error;
	if (soap_out_std__string(soap, "short-number", -1, &(a->ns__Group::short_number), ""))
		return soap->error;
	if (soap_out_std__listTemplateOfns__Participant(soap, "participants", -1, &(a->ns__Group::participants), ""))
		return soap->error;
	if (soap_out_std__string(soap, "size", -1, &(a->ns__Group::size), ""))
		return soap->error;
	if (soap_out_ns__RecordType(soap, "record-type", -1, &(a->ns__Group::record_type), ""))
		return soap->error;
	if (soap_out_ns__RecordStatus(soap, "record-status", -1, &(a->ns__Group::record_status), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Group::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Group(soap, tag, this, type);
}

SOAP_FMAC3 ns__Group * SOAP_FMAC4 soap_in_ns__Group(struct soap *soap, const char *tag, ns__Group *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Group *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Group, sizeof(ns__Group), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Group)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Group *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_owner_id1 = 1;
	size_t soap_flag_number1 = 1;
	size_t soap_flag_short_number1 = 1;
	size_t soap_flag_size1 = 1;
	size_t soap_flag_record_type1 = 1;
	size_t soap_flag_record_status1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "id", &(a->ns__Group::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "name", &(a->ns__Group::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_owner_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "owner-id", &(a->ns__Group::owner_id), "xsd:string"))
				{	soap_flag_owner_id1--;
					continue;
				}
			if (soap_flag_number1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "number", &(a->ns__Group::number), "xsd:string"))
				{	soap_flag_number1--;
					continue;
				}
			if (soap_flag_short_number1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "short-number", &(a->ns__Group::short_number), "xsd:string"))
				{	soap_flag_short_number1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__listTemplateOfns__Participant(soap, "participants", &(a->ns__Group::participants), "ns:Participant"))
					continue;
			if (soap_flag_size1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "size", &(a->ns__Group::size), "xsd:string"))
				{	soap_flag_size1--;
					continue;
				}
			if (soap_flag_record_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__RecordType(soap, "record-type", &(a->ns__Group::record_type), "ns:RecordType"))
				{	soap_flag_record_type1--;
					continue;
				}
			if (soap_flag_record_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__RecordStatus(soap, "record-status", &(a->ns__Group::record_status), "ns:RecordStatus"))
				{	soap_flag_record_status1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Group *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Group, 0, sizeof(ns__Group), 0, soap_copy_ns__Group);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_name1 > 0 || soap_flag_owner_id1 > 0 || soap_flag_number1 > 0 || soap_flag_short_number1 > 0 || soap_flag_size1 > 0 || soap_flag_record_type1 > 0 || soap_flag_record_status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Group::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Group);
	if (this->soap_out(soap, tag?tag:"ns:Group", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Group::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Group(soap, this, tag, type);
}

SOAP_FMAC3 ns__Group * SOAP_FMAC4 soap_get_ns__Group(struct soap *soap, ns__Group *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Group(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Group * SOAP_FMAC2 soap_instantiate_ns__Group(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Group(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Group, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Group);
		if (size)
			*size = sizeof(ns__Group);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Group, n);
		if (size)
			*size = n * sizeof(ns__Group);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Group*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Group(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Group %p -> %p\n", q, p));
	*(ns__Group*)p = *(ns__Group*)q;
}

void ns__Participant::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Participant::account.ns__Entity::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Participant::priority);
	soap_default_ns__CallPrivilege(soap, &this->ns__Participant::call_privilege);
	soap_default_ns__TokenPrivilege(soap, &this->ns__Participant::token_privilege);
	soap_default_ns__SessionStatus(soap, &this->ns__Participant::status);
}

void ns__Participant::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Participant::account.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Participant::priority);
#endif
}

int ns__Participant::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Participant(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Participant(struct soap *soap, const char *tag, int id, const ns__Participant *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Participant), type))
		return soap->error;
	if ((a->ns__Participant::account).soap_out(soap, "account", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "priority", -1, &(a->ns__Participant::priority), ""))
		return soap->error;
	if (soap_out_ns__CallPrivilege(soap, "call-privilege", -1, &(a->ns__Participant::call_privilege), ""))
		return soap->error;
	if (soap_out_ns__TokenPrivilege(soap, "token-privilege", -1, &(a->ns__Participant::token_privilege), ""))
		return soap->error;
	if (soap_out_ns__SessionStatus(soap, "status", -1, &(a->ns__Participant::status), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Participant::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Participant(soap, tag, this, type);
}

SOAP_FMAC3 ns__Participant * SOAP_FMAC4 soap_in_ns__Participant(struct soap *soap, const char *tag, ns__Participant *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Participant *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Participant, sizeof(ns__Participant), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Participant)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Participant *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_account1 = 1;
	size_t soap_flag_priority1 = 1;
	size_t soap_flag_call_privilege1 = 1;
	size_t soap_flag_token_privilege1 = 1;
	size_t soap_flag_status1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_account1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Participant::account).soap_in(soap, "account", "ns:Entity"))
				{	soap_flag_account1--;
					continue;
				}
			if (soap_flag_priority1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "priority", &(a->ns__Participant::priority), "xsd:string"))
				{	soap_flag_priority1--;
					continue;
				}
			if (soap_flag_call_privilege1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__CallPrivilege(soap, "call-privilege", &(a->ns__Participant::call_privilege), "ns:CallPrivilege"))
				{	soap_flag_call_privilege1--;
					continue;
				}
			if (soap_flag_token_privilege1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__TokenPrivilege(soap, "token-privilege", &(a->ns__Participant::token_privilege), "ns:TokenPrivilege"))
				{	soap_flag_token_privilege1--;
					continue;
				}
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__SessionStatus(soap, "status", &(a->ns__Participant::status), "ns:SessionStatus"))
				{	soap_flag_status1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Participant *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Participant, 0, sizeof(ns__Participant), 0, soap_copy_ns__Participant);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_account1 > 0 || soap_flag_priority1 > 0 || soap_flag_call_privilege1 > 0 || soap_flag_token_privilege1 > 0 || soap_flag_status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Participant::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Participant);
	if (this->soap_out(soap, tag?tag:"ns:Participant", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Participant::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Participant(soap, this, tag, type);
}

SOAP_FMAC3 ns__Participant * SOAP_FMAC4 soap_get_ns__Participant(struct soap *soap, ns__Participant *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Participant(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Participant * SOAP_FMAC2 soap_instantiate_ns__Participant(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Participant(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Participant, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Participant);
		if (size)
			*size = sizeof(ns__Participant);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Participant, n);
		if (size)
			*size = n * sizeof(ns__Participant);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Participant*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Participant(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Participant %p -> %p\n", q, p));
	*(ns__Participant*)p = *(ns__Participant*)q;
}

void ns__Unit::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Unit::base.ns__Entity::soap_default(soap);
	soap_default_std__listTemplateOfns__Entity(soap, &this->ns__Unit::members);
	soap_default_std__string(soap, &this->ns__Unit::size);
}

void ns__Unit::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Unit::base.soap_serialize(soap);
	soap_serialize_std__listTemplateOfns__Entity(soap, &this->ns__Unit::members);
	soap_serialize_std__string(soap, &this->ns__Unit::size);
#endif
}

int ns__Unit::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Unit(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Unit(struct soap *soap, const char *tag, int id, const ns__Unit *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Unit), type))
		return soap->error;
	if ((a->ns__Unit::base).soap_out(soap, "base", -1, ""))
		return soap->error;
	if (soap_out_std__listTemplateOfns__Entity(soap, "members", -1, &(a->ns__Unit::members), ""))
		return soap->error;
	if (soap_out_std__string(soap, "size", -1, &(a->ns__Unit::size), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Unit::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Unit(soap, tag, this, type);
}

SOAP_FMAC3 ns__Unit * SOAP_FMAC4 soap_in_ns__Unit(struct soap *soap, const char *tag, ns__Unit *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Unit *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Unit, sizeof(ns__Unit), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Unit)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Unit *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_base1 = 1;
	size_t soap_flag_size1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_base1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Unit::base).soap_in(soap, "base", "ns:Entity"))
				{	soap_flag_base1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__listTemplateOfns__Entity(soap, "members", &(a->ns__Unit::members), "ns:Entity"))
					continue;
			if (soap_flag_size1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "size", &(a->ns__Unit::size), "xsd:string"))
				{	soap_flag_size1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Unit *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Unit, 0, sizeof(ns__Unit), 0, soap_copy_ns__Unit);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_base1 > 0 || soap_flag_size1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Unit::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Unit);
	if (this->soap_out(soap, tag?tag:"ns:Unit", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Unit::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Unit(soap, this, tag, type);
}

SOAP_FMAC3 ns__Unit * SOAP_FMAC4 soap_get_ns__Unit(struct soap *soap, ns__Unit *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Unit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Unit * SOAP_FMAC2 soap_instantiate_ns__Unit(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Unit(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Unit, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Unit);
		if (size)
			*size = sizeof(ns__Unit);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Unit, n);
		if (size)
			*size = n * sizeof(ns__Unit);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Unit*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Unit(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Unit %p -> %p\n", q, p));
	*(ns__Unit*)p = *(ns__Unit*)q;
}

void ns__Dispatch_Login_Response::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->ns__Dispatch_Login_Response::session_id);
	soap_default_std__string(soap, &this->ns__Dispatch_Login_Response::id);
	soap_default_std__string(soap, &this->ns__Dispatch_Login_Response::parentid);
	soap_default_std__string(soap, &this->ns__Dispatch_Login_Response::error_describe);
	soap_default_bool(soap, &this->ns__Dispatch_Login_Response::result);
}

void ns__Dispatch_Login_Response::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns__Dispatch_Login_Response::session_id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Login_Response::id);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Login_Response::parentid);
	soap_serialize_std__string(soap, &this->ns__Dispatch_Login_Response::error_describe);
#endif
}

int ns__Dispatch_Login_Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Dispatch_Login_Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Login_Response(struct soap *soap, const char *tag, int id, const ns__Dispatch_Login_Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Login_Response), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &(a->ns__Dispatch_Login_Response::session_id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "id", -1, &(a->ns__Dispatch_Login_Response::id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "parentid", -1, &(a->ns__Dispatch_Login_Response::parentid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "error-describe", -1, &(a->ns__Dispatch_Login_Response::error_describe), ""))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &(a->ns__Dispatch_Login_Response::result), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Dispatch_Login_Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Dispatch_Login_Response(soap, tag, this, type);
}

SOAP_FMAC3 ns__Dispatch_Login_Response * SOAP_FMAC4 soap_in_ns__Dispatch_Login_Response(struct soap *soap, const char *tag, ns__Dispatch_Login_Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Dispatch_Login_Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Login_Response, sizeof(ns__Dispatch_Login_Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Dispatch_Login_Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Dispatch_Login_Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session_id1 = 1;
	size_t soap_flag_id1 = 1;
	size_t soap_flag_parentid1 = 1;
	size_t soap_flag_error_describe1 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &(a->ns__Dispatch_Login_Response::session_id), "xsd:string"))
				{	soap_flag_session_id1--;
					continue;
				}
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "id", &(a->ns__Dispatch_Login_Response::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_parentid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "parentid", &(a->ns__Dispatch_Login_Response::parentid), "xsd:string"))
				{	soap_flag_parentid1--;
					continue;
				}
			if (soap_flag_error_describe1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "error-describe", &(a->ns__Dispatch_Login_Response::error_describe), "xsd:string"))
				{	soap_flag_error_describe1--;
					continue;
				}
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &(a->ns__Dispatch_Login_Response::result), "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Dispatch_Login_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Login_Response, 0, sizeof(ns__Dispatch_Login_Response), 0, soap_copy_ns__Dispatch_Login_Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id1 > 0 || soap_flag_id1 > 0 || soap_flag_parentid1 > 0 || soap_flag_error_describe1 > 0 || soap_flag_result1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Dispatch_Login_Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Login_Response);
	if (this->soap_out(soap, tag?tag:"ns:Dispatch-Login-Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Dispatch_Login_Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Dispatch_Login_Response(soap, this, tag, type);
}

SOAP_FMAC3 ns__Dispatch_Login_Response * SOAP_FMAC4 soap_get_ns__Dispatch_Login_Response(struct soap *soap, ns__Dispatch_Login_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Login_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Dispatch_Login_Response * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Login_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Login_Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Login_Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Dispatch_Login_Response);
		if (size)
			*size = sizeof(ns__Dispatch_Login_Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Dispatch_Login_Response, n);
		if (size)
			*size = n * sizeof(ns__Dispatch_Login_Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Dispatch_Login_Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Login_Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Dispatch_Login_Response %p -> %p\n", q, p));
	*(ns__Dispatch_Login_Response*)p = *(ns__Dispatch_Login_Response*)q;
}

void ns__Account::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__Account::base.ns__Entity::soap_default(soap);
	soap_default_std__string(soap, &this->ns__Account::number);
	soap_default_std__string(soap, &this->ns__Account::short_number);
	soap_default_std__string(soap, &this->ns__Account::priority);
	soap_default_ns__CallPrivilege(soap, &this->ns__Account::call_privilege);
	soap_default_ns__TokenPrivilege(soap, &this->ns__Account::token_privilege);
	soap_default_ns__RegisterStatus(soap, &this->ns__Account::status);
	soap_default_ns__RegisterStatus(soap, &this->ns__Account::sip_status);
}

void ns__Account::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__Account::base.soap_serialize(soap);
	soap_serialize_std__string(soap, &this->ns__Account::number);
	soap_serialize_std__string(soap, &this->ns__Account::short_number);
	soap_serialize_std__string(soap, &this->ns__Account::priority);
#endif
}

int ns__Account::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Account(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Account(struct soap *soap, const char *tag, int id, const ns__Account *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Account), type))
		return soap->error;
	if ((a->ns__Account::base).soap_out(soap, "base", -1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "number", -1, &(a->ns__Account::number), ""))
		return soap->error;
	if (soap_out_std__string(soap, "short-number", -1, &(a->ns__Account::short_number), ""))
		return soap->error;
	if (soap_out_std__string(soap, "priority", -1, &(a->ns__Account::priority), ""))
		return soap->error;
	if (soap_out_ns__CallPrivilege(soap, "call-privilege", -1, &(a->ns__Account::call_privilege), ""))
		return soap->error;
	if (soap_out_ns__TokenPrivilege(soap, "token-privilege", -1, &(a->ns__Account::token_privilege), ""))
		return soap->error;
	if (soap_out_ns__RegisterStatus(soap, "status", -1, &(a->ns__Account::status), ""))
		return soap->error;
	if (soap_out_ns__RegisterStatus(soap, "sip-status", -1, &(a->ns__Account::sip_status), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Account::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Account(soap, tag, this, type);
}

SOAP_FMAC3 ns__Account * SOAP_FMAC4 soap_in_ns__Account(struct soap *soap, const char *tag, ns__Account *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Account *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Account, sizeof(ns__Account), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Account)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Account *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_base1 = 1;
	size_t soap_flag_number1 = 1;
	size_t soap_flag_short_number1 = 1;
	size_t soap_flag_priority1 = 1;
	size_t soap_flag_call_privilege1 = 1;
	size_t soap_flag_token_privilege1 = 1;
	size_t soap_flag_status1 = 1;
	size_t soap_flag_sip_status1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_base1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__Account::base).soap_in(soap, "base", "ns:Entity"))
				{	soap_flag_base1--;
					continue;
				}
			if (soap_flag_number1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "number", &(a->ns__Account::number), "xsd:string"))
				{	soap_flag_number1--;
					continue;
				}
			if (soap_flag_short_number1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "short-number", &(a->ns__Account::short_number), "xsd:string"))
				{	soap_flag_short_number1--;
					continue;
				}
			if (soap_flag_priority1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "priority", &(a->ns__Account::priority), "xsd:string"))
				{	soap_flag_priority1--;
					continue;
				}
			if (soap_flag_call_privilege1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__CallPrivilege(soap, "call-privilege", &(a->ns__Account::call_privilege), "ns:CallPrivilege"))
				{	soap_flag_call_privilege1--;
					continue;
				}
			if (soap_flag_token_privilege1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__TokenPrivilege(soap, "token-privilege", &(a->ns__Account::token_privilege), "ns:TokenPrivilege"))
				{	soap_flag_token_privilege1--;
					continue;
				}
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__RegisterStatus(soap, "status", &(a->ns__Account::status), "ns:RegisterStatus"))
				{	soap_flag_status1--;
					continue;
				}
			if (soap_flag_sip_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__RegisterStatus(soap, "sip-status", &(a->ns__Account::sip_status), "ns:RegisterStatus"))
				{	soap_flag_sip_status1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Account *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Account, 0, sizeof(ns__Account), 0, soap_copy_ns__Account);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_base1 > 0 || soap_flag_number1 > 0 || soap_flag_short_number1 > 0 || soap_flag_priority1 > 0 || soap_flag_call_privilege1 > 0 || soap_flag_token_privilege1 > 0 || soap_flag_status1 > 0 || soap_flag_sip_status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Account::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Account);
	if (this->soap_out(soap, tag?tag:"ns:Account", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Account::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Account(soap, this, tag, type);
}

SOAP_FMAC3 ns__Account * SOAP_FMAC4 soap_get_ns__Account(struct soap *soap, ns__Account *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Account(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Account * SOAP_FMAC2 soap_instantiate_ns__Account(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Account(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Account, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Account);
		if (size)
			*size = sizeof(ns__Account);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Account, n);
		if (size)
			*size = n * sizeof(ns__Account);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Account*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Account(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Account %p -> %p\n", q, p));
	*(ns__Account*)p = *(ns__Account*)q;
}

void ns__User::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->ns__User::base.ns__Entity::soap_default(soap);
	this->ns__User::account.ns__Entity::soap_default(soap);
	soap_default_ns__RegisterStatus(soap, &this->ns__User::status);
}

void ns__User::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->ns__User::base.soap_serialize(soap);
	this->ns__User::account.soap_serialize(soap);
#endif
}

int ns__User::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__User(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__User(struct soap *soap, const char *tag, int id, const ns__User *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__User), type))
		return soap->error;
	if ((a->ns__User::base).soap_out(soap, "base", -1, ""))
		return soap->error;
	if ((a->ns__User::account).soap_out(soap, "account", -1, ""))
		return soap->error;
	if (soap_out_ns__RegisterStatus(soap, "status", -1, &(a->ns__User::status), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__User::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__User(soap, tag, this, type);
}

SOAP_FMAC3 ns__User * SOAP_FMAC4 soap_in_ns__User(struct soap *soap, const char *tag, ns__User *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__User *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__User, sizeof(ns__User), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__User)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__User *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_base1 = 1;
	size_t soap_flag_account1 = 1;
	size_t soap_flag_status1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_base1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__User::base).soap_in(soap, "base", "ns:Entity"))
				{	soap_flag_base1--;
					continue;
				}
			if (soap_flag_account1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns__User::account).soap_in(soap, "account", "ns:Entity"))
				{	soap_flag_account1--;
					continue;
				}
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__RegisterStatus(soap, "status", &(a->ns__User::status), "ns:RegisterStatus"))
				{	soap_flag_status1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__User *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__User, 0, sizeof(ns__User), 0, soap_copy_ns__User);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_base1 > 0 || soap_flag_account1 > 0 || soap_flag_status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__User::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__User);
	if (this->soap_out(soap, tag?tag:"ns:User", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__User::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__User(soap, this, tag, type);
}

SOAP_FMAC3 ns__User * SOAP_FMAC4 soap_get_ns__User(struct soap *soap, ns__User *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__User(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__User * SOAP_FMAC2 soap_instantiate_ns__User(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__User(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__User, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__User);
		if (size)
			*size = sizeof(ns__User);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__User, n);
		if (size)
			*size = n * sizeof(ns__User);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__User*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__User(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__User %p -> %p\n", q, p));
	*(ns__User*)p = *(ns__User*)q;
}

void ns__Address::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->ns__Address::ip);
	soap_default_std__string(soap, &this->ns__Address::port);
}

void ns__Address::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns__Address::ip);
	soap_serialize_std__string(soap, &this->ns__Address::port);
#endif
}

int ns__Address::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Address(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Address(struct soap *soap, const char *tag, int id, const ns__Address *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Address), type))
		return soap->error;
	if (soap_out_std__string(soap, "ip", -1, &(a->ns__Address::ip), ""))
		return soap->error;
	if (soap_out_std__string(soap, "port", -1, &(a->ns__Address::port), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Address::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Address(soap, tag, this, type);
}

SOAP_FMAC3 ns__Address * SOAP_FMAC4 soap_in_ns__Address(struct soap *soap, const char *tag, ns__Address *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Address *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Address, sizeof(ns__Address), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Address)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Address *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ip1 = 1;
	size_t soap_flag_port1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ip", &(a->ns__Address::ip), "xsd:string"))
				{	soap_flag_ip1--;
					continue;
				}
			if (soap_flag_port1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "port", &(a->ns__Address::port), "xsd:string"))
				{	soap_flag_port1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Address *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Address, 0, sizeof(ns__Address), 0, soap_copy_ns__Address);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ip1 > 0 || soap_flag_port1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Address::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Address);
	if (this->soap_out(soap, tag?tag:"ns:Address", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Address::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Address(soap, this, tag, type);
}

SOAP_FMAC3 ns__Address * SOAP_FMAC4 soap_get_ns__Address(struct soap *soap, ns__Address *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Address(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Address * SOAP_FMAC2 soap_instantiate_ns__Address(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Address(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Address, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Address);
		if (size)
			*size = sizeof(ns__Address);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Address, n);
		if (size)
			*size = n * sizeof(ns__Address);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Address*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Address(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Address %p -> %p\n", q, p));
	*(ns__Address*)p = *(ns__Address*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void ns__Entity::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->ns__Entity::id);
	soap_default_std__string(soap, &this->ns__Entity::name);
	soap_default_std__string(soap, &this->ns__Entity::parentid);
	soap_default_ns__EntityType(soap, &this->ns__Entity::entity_type);
}

void ns__Entity::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns__Entity::id);
	soap_serialize_std__string(soap, &this->ns__Entity::name);
	soap_serialize_std__string(soap, &this->ns__Entity::parentid);
#endif
}

int ns__Entity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__Entity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Entity(struct soap *soap, const char *tag, int id, const ns__Entity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Entity), type))
		return soap->error;
	if (soap_out_std__string(soap, "id", -1, &(a->ns__Entity::id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "name", -1, &(a->ns__Entity::name), ""))
		return soap->error;
	if (soap_out_std__string(soap, "parentid", -1, &(a->ns__Entity::parentid), ""))
		return soap->error;
	if (soap_out_ns__EntityType(soap, "entity-type", -1, &(a->ns__Entity::entity_type), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Entity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Entity(soap, tag, this, type);
}

SOAP_FMAC3 ns__Entity * SOAP_FMAC4 soap_in_ns__Entity(struct soap *soap, const char *tag, ns__Entity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__Entity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Entity, sizeof(ns__Entity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__Entity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__Entity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_parentid1 = 1;
	size_t soap_flag_entity_type1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "id", &(a->ns__Entity::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "name", &(a->ns__Entity::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_parentid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "parentid", &(a->ns__Entity::parentid), "xsd:string"))
				{	soap_flag_parentid1--;
					continue;
				}
			if (soap_flag_entity_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__EntityType(soap, "entity-type", &(a->ns__Entity::entity_type), "ns:EntityType"))
				{	soap_flag_entity_type1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__Entity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Entity, 0, sizeof(ns__Entity), 0, soap_copy_ns__Entity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_name1 > 0 || soap_flag_parentid1 > 0 || soap_flag_entity_type1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__Entity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__Entity);
	if (this->soap_out(soap, tag?tag:"ns:Entity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Entity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Entity(soap, this, tag, type);
}

SOAP_FMAC3 ns__Entity * SOAP_FMAC4 soap_get_ns__Entity(struct soap *soap, ns__Entity *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Entity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Entity * SOAP_FMAC2 soap_instantiate_ns__Entity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Entity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Entity, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__Entity);
		if (size)
			*size = sizeof(ns__Entity);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__Entity, n);
		if (size)
			*size = n * sizeof(ns__Entity);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Entity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Entity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Entity %p -> %p\n", q, p));
	*(ns__Entity*)p = *(ns__Entity*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Delete_History_Alert_Request(struct soap *soap, struct ns__Dispatch_Delete_History_Alert_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->history_alert_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Delete_History_Alert_Request(struct soap *soap, const struct ns__Dispatch_Delete_History_Alert_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->history_alert_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Delete_History_Alert_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Delete_History_Alert_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Delete_History_Alert_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "history-alert-id", -1, &a->history_alert_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Delete_History_Alert_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Delete_History_Alert_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Delete_History_Alert_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_history_alert_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Delete_History_Alert_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Delete_History_Alert_Request, sizeof(struct ns__Dispatch_Delete_History_Alert_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Delete_History_Alert_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_history_alert_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "history-alert-id", &a->history_alert_id, "xsd:string"))
				{	soap_flag_history_alert_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Delete_History_Alert_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Delete_History_Alert_Request, 0, sizeof(struct ns__Dispatch_Delete_History_Alert_Request), 0, soap_copy_ns__Dispatch_Delete_History_Alert_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_history_alert_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Delete_History_Alert_Request(struct soap *soap, const struct ns__Dispatch_Delete_History_Alert_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Delete_History_Alert_Request);
	if (soap_out_ns__Dispatch_Delete_History_Alert_Request(soap, tag?tag:"ns:Dispatch-Delete-History-Alert-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Delete_History_Alert_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Delete_History_Alert_Request(struct soap *soap, struct ns__Dispatch_Delete_History_Alert_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Delete_History_Alert_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Delete_History_Alert_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Delete_History_Alert_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Delete_History_Alert_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Delete_History_Alert_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Delete_History_Alert_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Delete_History_Alert_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Delete_History_Alert_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Delete_History_Alert_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Delete_History_Alert_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Delete_History_Alert_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Delete_History_Alert_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Delete_History_Alert_Request*)p = *(struct ns__Dispatch_Delete_History_Alert_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_History_Alert_Message_Request(struct soap *soap, struct ns__Dispatch_History_Alert_Message_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->history_alert_id);
	soap_default_std__string(soap, &a->from_message_id);
	soap_default_std__string(soap, &a->from_time);
	soap_default_std__string(soap, &a->max_message_count);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_History_Alert_Message_Request(struct soap *soap, const struct ns__Dispatch_History_Alert_Message_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->history_alert_id);
	soap_serialize_std__string(soap, &a->from_message_id);
	soap_serialize_std__string(soap, &a->from_time);
	soap_serialize_std__string(soap, &a->max_message_count);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_History_Alert_Message_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_History_Alert_Message_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "history-alert-id", -1, &a->history_alert_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "from-message-id", -1, &a->from_message_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "from-time", -1, &a->from_time, ""))
		return soap->error;
	if (soap_out_std__string(soap, "max-message-count", -1, &a->max_message_count, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_History_Alert_Message_Request * SOAP_FMAC4 soap_in_ns__Dispatch_History_Alert_Message_Request(struct soap *soap, const char *tag, struct ns__Dispatch_History_Alert_Message_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_history_alert_id = 1;
	size_t soap_flag_from_message_id = 1;
	size_t soap_flag_from_time = 1;
	size_t soap_flag_max_message_count = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_History_Alert_Message_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request, sizeof(struct ns__Dispatch_History_Alert_Message_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_History_Alert_Message_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_history_alert_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "history-alert-id", &a->history_alert_id, "xsd:string"))
				{	soap_flag_history_alert_id--;
					continue;
				}
			if (soap_flag_from_message_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "from-message-id", &a->from_message_id, "xsd:string"))
				{	soap_flag_from_message_id--;
					continue;
				}
			if (soap_flag_from_time && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "from-time", &a->from_time, "xsd:string"))
				{	soap_flag_from_time--;
					continue;
				}
			if (soap_flag_max_message_count && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "max-message-count", &a->max_message_count, "xsd:string"))
				{	soap_flag_max_message_count--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_History_Alert_Message_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request, 0, sizeof(struct ns__Dispatch_History_Alert_Message_Request), 0, soap_copy_ns__Dispatch_History_Alert_Message_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_history_alert_id > 0 || soap_flag_from_message_id > 0 || soap_flag_from_time > 0 || soap_flag_max_message_count > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_History_Alert_Message_Request(struct soap *soap, const struct ns__Dispatch_History_Alert_Message_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request);
	if (soap_out_ns__Dispatch_History_Alert_Message_Request(soap, tag?tag:"ns:Dispatch-History-Alert-Message-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_History_Alert_Message_Request * SOAP_FMAC4 soap_get_ns__Dispatch_History_Alert_Message_Request(struct soap *soap, struct ns__Dispatch_History_Alert_Message_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_History_Alert_Message_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_History_Alert_Message_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_History_Alert_Message_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_History_Alert_Message_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_History_Alert_Message_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_History_Alert_Message_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_History_Alert_Message_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_History_Alert_Message_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_History_Alert_Message_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_History_Alert_Message_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_History_Alert_Message_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_History_Alert_Message_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_History_Alert_Message_Request*)p = *(struct ns__Dispatch_History_Alert_Message_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Alert_Request(struct soap *soap, struct ns__Dispatch_Alert_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->alert_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Alert_Request(struct soap *soap, const struct ns__Dispatch_Alert_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->alert_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Alert_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Alert_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Alert_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "alert-id", -1, &a->alert_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Alert_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Alert_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Alert_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_alert_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Alert_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Alert_Request, sizeof(struct ns__Dispatch_Alert_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Alert_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_alert_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "alert-id", &a->alert_id, "xsd:string"))
				{	soap_flag_alert_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Alert_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Alert_Request, 0, sizeof(struct ns__Dispatch_Alert_Request), 0, soap_copy_ns__Dispatch_Alert_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_alert_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Alert_Request(struct soap *soap, const struct ns__Dispatch_Alert_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Alert_Request);
	if (soap_out_ns__Dispatch_Alert_Request(soap, tag?tag:"ns:Dispatch-Alert-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Alert_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Alert_Request(struct soap *soap, struct ns__Dispatch_Alert_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Alert_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Alert_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Alert_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Alert_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Alert_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Alert_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Alert_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Alert_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Alert_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Alert_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Alert_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Alert_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Alert_Request*)p = *(struct ns__Dispatch_Alert_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_History_Alert_Request(struct soap *soap, struct ns__Dispatch_History_Alert_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->name);
	soap_default_std__string(soap, &a->create_time_from);
	soap_default_std__string(soap, &a->create_time_to);
	soap_default_std__string(soap, &a->alram_time_from);
	soap_default_std__string(soap, &a->alram_time_to);
	soap_default_std__string(soap, &a->over_time_from);
	soap_default_std__string(soap, &a->over_time_to);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_History_Alert_Request(struct soap *soap, const struct ns__Dispatch_History_Alert_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->name);
	soap_serialize_std__string(soap, &a->create_time_from);
	soap_serialize_std__string(soap, &a->create_time_to);
	soap_serialize_std__string(soap, &a->alram_time_from);
	soap_serialize_std__string(soap, &a->alram_time_to);
	soap_serialize_std__string(soap, &a->over_time_from);
	soap_serialize_std__string(soap, &a->over_time_to);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_History_Alert_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_History_Alert_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_History_Alert_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "name", -1, &a->name, ""))
		return soap->error;
	if (soap_out_std__string(soap, "create-time-from", -1, &a->create_time_from, ""))
		return soap->error;
	if (soap_out_std__string(soap, "create-time-to", -1, &a->create_time_to, ""))
		return soap->error;
	if (soap_out_std__string(soap, "alram-time-from", -1, &a->alram_time_from, ""))
		return soap->error;
	if (soap_out_std__string(soap, "alram-time-to", -1, &a->alram_time_to, ""))
		return soap->error;
	if (soap_out_std__string(soap, "over-time-from", -1, &a->over_time_from, ""))
		return soap->error;
	if (soap_out_std__string(soap, "over-time-to", -1, &a->over_time_to, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_History_Alert_Request * SOAP_FMAC4 soap_in_ns__Dispatch_History_Alert_Request(struct soap *soap, const char *tag, struct ns__Dispatch_History_Alert_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_name = 1;
	size_t soap_flag_create_time_from = 1;
	size_t soap_flag_create_time_to = 1;
	size_t soap_flag_alram_time_from = 1;
	size_t soap_flag_alram_time_to = 1;
	size_t soap_flag_over_time_from = 1;
	size_t soap_flag_over_time_to = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_History_Alert_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_History_Alert_Request, sizeof(struct ns__Dispatch_History_Alert_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_History_Alert_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_name && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name--;
					continue;
				}
			if (soap_flag_create_time_from && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "create-time-from", &a->create_time_from, "xsd:string"))
				{	soap_flag_create_time_from--;
					continue;
				}
			if (soap_flag_create_time_to && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "create-time-to", &a->create_time_to, "xsd:string"))
				{	soap_flag_create_time_to--;
					continue;
				}
			if (soap_flag_alram_time_from && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "alram-time-from", &a->alram_time_from, "xsd:string"))
				{	soap_flag_alram_time_from--;
					continue;
				}
			if (soap_flag_alram_time_to && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "alram-time-to", &a->alram_time_to, "xsd:string"))
				{	soap_flag_alram_time_to--;
					continue;
				}
			if (soap_flag_over_time_from && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "over-time-from", &a->over_time_from, "xsd:string"))
				{	soap_flag_over_time_from--;
					continue;
				}
			if (soap_flag_over_time_to && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "over-time-to", &a->over_time_to, "xsd:string"))
				{	soap_flag_over_time_to--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_History_Alert_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_History_Alert_Request, 0, sizeof(struct ns__Dispatch_History_Alert_Request), 0, soap_copy_ns__Dispatch_History_Alert_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_name > 0 || soap_flag_create_time_from > 0 || soap_flag_create_time_to > 0 || soap_flag_alram_time_from > 0 || soap_flag_alram_time_to > 0 || soap_flag_over_time_from > 0 || soap_flag_over_time_to > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_History_Alert_Request(struct soap *soap, const struct ns__Dispatch_History_Alert_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_History_Alert_Request);
	if (soap_out_ns__Dispatch_History_Alert_Request(soap, tag?tag:"ns:Dispatch-History-Alert-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_History_Alert_Request * SOAP_FMAC4 soap_get_ns__Dispatch_History_Alert_Request(struct soap *soap, struct ns__Dispatch_History_Alert_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_History_Alert_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_History_Alert_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_History_Alert_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_History_Alert_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_History_Alert_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_History_Alert_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_History_Alert_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_History_Alert_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_History_Alert_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_History_Alert_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_History_Alert_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_History_Alert_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_History_Alert_Request*)p = *(struct ns__Dispatch_History_Alert_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Alert_Overed_Notification(struct soap *soap, struct ns__Dispatch_Alert_Overed_Notification *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Alert_Overed_Notification(struct soap *soap, const struct ns__Dispatch_Alert_Overed_Notification *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Alert_Overed_Notification(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Alert_Overed_Notification *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Alert_Overed_Notification * SOAP_FMAC4 soap_in_ns__Dispatch_Alert_Overed_Notification(struct soap *soap, const char *tag, struct ns__Dispatch_Alert_Overed_Notification *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Alert_Overed_Notification *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification, sizeof(struct ns__Dispatch_Alert_Overed_Notification), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Alert_Overed_Notification(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Alert_Overed_Notification *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification, 0, sizeof(struct ns__Dispatch_Alert_Overed_Notification), 0, soap_copy_ns__Dispatch_Alert_Overed_Notification);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Alert_Overed_Notification(struct soap *soap, const struct ns__Dispatch_Alert_Overed_Notification *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification);
	if (soap_out_ns__Dispatch_Alert_Overed_Notification(soap, tag?tag:"ns:Dispatch-Alert-Overed-Notification", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Alert_Overed_Notification * SOAP_FMAC4 soap_get_ns__Dispatch_Alert_Overed_Notification(struct soap *soap, struct ns__Dispatch_Alert_Overed_Notification *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Alert_Overed_Notification(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Alert_Overed_Notification * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Alert_Overed_Notification(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Alert_Overed_Notification(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Alert_Overed_Notification, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Alert_Overed_Notification);
		if (size)
			*size = sizeof(struct ns__Dispatch_Alert_Overed_Notification);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Alert_Overed_Notification, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Alert_Overed_Notification);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Alert_Overed_Notification*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Alert_Overed_Notification(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Alert_Overed_Notification %p -> %p\n", q, p));
	*(struct ns__Dispatch_Alert_Overed_Notification*)p = *(struct ns__Dispatch_Alert_Overed_Notification*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Stop_Alert_Request(struct soap *soap, struct ns__Dispatch_Stop_Alert_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->alert_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Stop_Alert_Request(struct soap *soap, const struct ns__Dispatch_Stop_Alert_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->alert_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Stop_Alert_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Stop_Alert_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Stop_Alert_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "alert-id", -1, &a->alert_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Stop_Alert_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Stop_Alert_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Stop_Alert_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_alert_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Stop_Alert_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Stop_Alert_Request, sizeof(struct ns__Dispatch_Stop_Alert_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Stop_Alert_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_alert_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "alert-id", &a->alert_id, "xsd:string"))
				{	soap_flag_alert_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Stop_Alert_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Stop_Alert_Request, 0, sizeof(struct ns__Dispatch_Stop_Alert_Request), 0, soap_copy_ns__Dispatch_Stop_Alert_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_alert_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Stop_Alert_Request(struct soap *soap, const struct ns__Dispatch_Stop_Alert_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Stop_Alert_Request);
	if (soap_out_ns__Dispatch_Stop_Alert_Request(soap, tag?tag:"ns:Dispatch-Stop-Alert-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Stop_Alert_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Stop_Alert_Request(struct soap *soap, struct ns__Dispatch_Stop_Alert_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Stop_Alert_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Stop_Alert_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Stop_Alert_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Stop_Alert_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Stop_Alert_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Stop_Alert_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Stop_Alert_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Stop_Alert_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Stop_Alert_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Stop_Alert_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Stop_Alert_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Stop_Alert_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Stop_Alert_Request*)p = *(struct ns__Dispatch_Stop_Alert_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Modify_Alert_Request(struct soap *soap, struct ns__Dispatch_Modify_Alert_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	a->alert.ns__Alert::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Modify_Alert_Request(struct soap *soap, const struct ns__Dispatch_Modify_Alert_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	a->alert.soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Modify_Alert_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Modify_Alert_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Modify_Alert_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (a->alert.soap_out(soap, "alert", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Modify_Alert_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Modify_Alert_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Modify_Alert_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_alert = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Modify_Alert_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Modify_Alert_Request, sizeof(struct ns__Dispatch_Modify_Alert_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Modify_Alert_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_alert && soap->error == SOAP_TAG_MISMATCH)
				if (a->alert.soap_in(soap, "alert", "ns:Alert"))
				{	soap_flag_alert--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Modify_Alert_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Modify_Alert_Request, 0, sizeof(struct ns__Dispatch_Modify_Alert_Request), 0, soap_copy_ns__Dispatch_Modify_Alert_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_alert > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Modify_Alert_Request(struct soap *soap, const struct ns__Dispatch_Modify_Alert_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Modify_Alert_Request);
	if (soap_out_ns__Dispatch_Modify_Alert_Request(soap, tag?tag:"ns:Dispatch-Modify-Alert-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Modify_Alert_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Modify_Alert_Request(struct soap *soap, struct ns__Dispatch_Modify_Alert_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Modify_Alert_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Modify_Alert_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Modify_Alert_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Modify_Alert_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Modify_Alert_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Modify_Alert_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Modify_Alert_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Modify_Alert_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Modify_Alert_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Modify_Alert_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Modify_Alert_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Modify_Alert_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Modify_Alert_Request*)p = *(struct ns__Dispatch_Modify_Alert_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Append_Alert_Request(struct soap *soap, struct ns__Dispatch_Append_Alert_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	a->alert.ns__Alert::soap_default(soap);
	soap_default_std__listTemplateOfns__Account(soap, &a->members);
	soap_default_std__string(soap, &a->size);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Append_Alert_Request(struct soap *soap, const struct ns__Dispatch_Append_Alert_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	a->alert.soap_serialize(soap);
	soap_serialize_std__listTemplateOfns__Account(soap, &a->members);
	soap_serialize_std__string(soap, &a->size);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Append_Alert_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Append_Alert_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Append_Alert_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (a->alert.soap_out(soap, "alert", -1, ""))
		return soap->error;
	if (soap_out_std__listTemplateOfns__Account(soap, "members", -1, &a->members, ""))
		return soap->error;
	if (soap_out_std__string(soap, "size", -1, &a->size, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Append_Alert_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Append_Alert_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Append_Alert_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_alert = 1;
	size_t soap_flag_size = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Append_Alert_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Append_Alert_Request, sizeof(struct ns__Dispatch_Append_Alert_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Append_Alert_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_alert && soap->error == SOAP_TAG_MISMATCH)
				if (a->alert.soap_in(soap, "alert", "ns:Alert"))
				{	soap_flag_alert--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__listTemplateOfns__Account(soap, "members", &a->members, "ns:Account"))
					continue;
			if (soap_flag_size && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "size", &a->size, "xsd:string"))
				{	soap_flag_size--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Append_Alert_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Append_Alert_Request, 0, sizeof(struct ns__Dispatch_Append_Alert_Request), 0, soap_copy_ns__Dispatch_Append_Alert_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_alert > 0 || a->members.size() < 1 || soap_flag_size > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Append_Alert_Request(struct soap *soap, const struct ns__Dispatch_Append_Alert_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Append_Alert_Request);
	if (soap_out_ns__Dispatch_Append_Alert_Request(soap, tag?tag:"ns:Dispatch-Append-Alert-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Append_Alert_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Append_Alert_Request(struct soap *soap, struct ns__Dispatch_Append_Alert_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Append_Alert_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Append_Alert_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Append_Alert_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Append_Alert_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Append_Alert_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Append_Alert_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Append_Alert_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Append_Alert_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Append_Alert_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Append_Alert_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Append_Alert_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Append_Alert_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Append_Alert_Request*)p = *(struct ns__Dispatch_Append_Alert_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Account_Info_Notification(struct soap *soap, struct ns__Dispatch_Account_Info_Notification *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Account_Info_Notification(struct soap *soap, const struct ns__Dispatch_Account_Info_Notification *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Account_Info_Notification(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Account_Info_Notification *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Account_Info_Notification), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Account_Info_Notification * SOAP_FMAC4 soap_in_ns__Dispatch_Account_Info_Notification(struct soap *soap, const char *tag, struct ns__Dispatch_Account_Info_Notification *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Account_Info_Notification *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Account_Info_Notification, sizeof(struct ns__Dispatch_Account_Info_Notification), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Account_Info_Notification(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Account_Info_Notification *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Account_Info_Notification, 0, sizeof(struct ns__Dispatch_Account_Info_Notification), 0, soap_copy_ns__Dispatch_Account_Info_Notification);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Account_Info_Notification(struct soap *soap, const struct ns__Dispatch_Account_Info_Notification *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Account_Info_Notification);
	if (soap_out_ns__Dispatch_Account_Info_Notification(soap, tag?tag:"ns:Dispatch-Account-Info-Notification", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Account_Info_Notification * SOAP_FMAC4 soap_get_ns__Dispatch_Account_Info_Notification(struct soap *soap, struct ns__Dispatch_Account_Info_Notification *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Account_Info_Notification(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Account_Info_Notification * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Account_Info_Notification(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Account_Info_Notification(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Account_Info_Notification, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Account_Info_Notification);
		if (size)
			*size = sizeof(struct ns__Dispatch_Account_Info_Notification);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Account_Info_Notification, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Account_Info_Notification);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Account_Info_Notification*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Account_Info_Notification(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Account_Info_Notification %p -> %p\n", q, p));
	*(struct ns__Dispatch_Account_Info_Notification*)p = *(struct ns__Dispatch_Account_Info_Notification*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Subscribe_Account_Info_Request(struct soap *soap, struct ns__Dispatch_Subscribe_Account_Info_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_bool(soap, &a->subscribing);
	soap_default_std__listTemplateOfstd__string(soap, &a->account_id);
	soap_default_ns__SubscribeType(soap, &a->type);
	soap_default_std__string(soap, &a->ttl);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Subscribe_Account_Info_Request(struct soap *soap, const struct ns__Dispatch_Subscribe_Account_Info_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__listTemplateOfstd__string(soap, &a->account_id);
	soap_serialize_std__string(soap, &a->ttl);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Subscribe_Account_Info_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Subscribe_Account_Info_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Subscribe_Account_Info_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_bool(soap, "subscribing", -1, &a->subscribing, ""))
		return soap->error;
	if (soap_out_std__listTemplateOfstd__string(soap, "account-id", -1, &a->account_id, ""))
		return soap->error;
	if (soap_out_ns__SubscribeType(soap, "type", -1, &a->type, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ttl", -1, &a->ttl, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Subscribe_Account_Info_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Subscribe_Account_Info_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Subscribe_Account_Info_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_subscribing = 1;
	size_t soap_flag_type = 1;
	size_t soap_flag_ttl = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Subscribe_Account_Info_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Subscribe_Account_Info_Request, sizeof(struct ns__Dispatch_Subscribe_Account_Info_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Subscribe_Account_Info_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_subscribing && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "subscribing", &a->subscribing, "xsd:boolean"))
				{	soap_flag_subscribing--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__listTemplateOfstd__string(soap, "account-id", &a->account_id, "xsd:string"))
					continue;
			if (soap_flag_type && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__SubscribeType(soap, "type", &a->type, "ns:SubscribeType"))
				{	soap_flag_type--;
					continue;
				}
			if (soap_flag_ttl && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ttl", &a->ttl, "xsd:string"))
				{	soap_flag_ttl--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Subscribe_Account_Info_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Subscribe_Account_Info_Request, 0, sizeof(struct ns__Dispatch_Subscribe_Account_Info_Request), 0, soap_copy_ns__Dispatch_Subscribe_Account_Info_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_subscribing > 0 || a->account_id.size() < 1 || soap_flag_type > 0 || soap_flag_ttl > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Subscribe_Account_Info_Request(struct soap *soap, const struct ns__Dispatch_Subscribe_Account_Info_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Subscribe_Account_Info_Request);
	if (soap_out_ns__Dispatch_Subscribe_Account_Info_Request(soap, tag?tag:"ns:Dispatch-Subscribe-Account-Info-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Subscribe_Account_Info_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Subscribe_Account_Info_Request(struct soap *soap, struct ns__Dispatch_Subscribe_Account_Info_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Subscribe_Account_Info_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Subscribe_Account_Info_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Subscribe_Account_Info_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Subscribe_Account_Info_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Subscribe_Account_Info_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Subscribe_Account_Info_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Subscribe_Account_Info_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Subscribe_Account_Info_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Subscribe_Account_Info_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Subscribe_Account_Info_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Subscribe_Account_Info_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Subscribe_Account_Info_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Subscribe_Account_Info_Request*)p = *(struct ns__Dispatch_Subscribe_Account_Info_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Record_Status_Notification(struct soap *soap, struct ns__Dispatch_Record_Status_Notification *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Record_Status_Notification(struct soap *soap, const struct ns__Dispatch_Record_Status_Notification *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Record_Status_Notification(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Record_Status_Notification *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Record_Status_Notification), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Record_Status_Notification * SOAP_FMAC4 soap_in_ns__Dispatch_Record_Status_Notification(struct soap *soap, const char *tag, struct ns__Dispatch_Record_Status_Notification *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Record_Status_Notification *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Record_Status_Notification, sizeof(struct ns__Dispatch_Record_Status_Notification), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Record_Status_Notification(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Record_Status_Notification *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Record_Status_Notification, 0, sizeof(struct ns__Dispatch_Record_Status_Notification), 0, soap_copy_ns__Dispatch_Record_Status_Notification);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Record_Status_Notification(struct soap *soap, const struct ns__Dispatch_Record_Status_Notification *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Record_Status_Notification);
	if (soap_out_ns__Dispatch_Record_Status_Notification(soap, tag?tag:"ns:Dispatch-Record-Status-Notification", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Record_Status_Notification * SOAP_FMAC4 soap_get_ns__Dispatch_Record_Status_Notification(struct soap *soap, struct ns__Dispatch_Record_Status_Notification *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Record_Status_Notification(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Record_Status_Notification * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Record_Status_Notification(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Record_Status_Notification(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Record_Status_Notification, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Record_Status_Notification);
		if (size)
			*size = sizeof(struct ns__Dispatch_Record_Status_Notification);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Record_Status_Notification, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Record_Status_Notification);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Record_Status_Notification*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Record_Status_Notification(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Record_Status_Notification %p -> %p\n", q, p));
	*(struct ns__Dispatch_Record_Status_Notification*)p = *(struct ns__Dispatch_Record_Status_Notification*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Stop_Record_Request(struct soap *soap, struct ns__Dispatch_Stop_Record_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->group_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Stop_Record_Request(struct soap *soap, const struct ns__Dispatch_Stop_Record_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->group_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Stop_Record_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Stop_Record_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Stop_Record_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "group-id", -1, &a->group_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Stop_Record_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Stop_Record_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Stop_Record_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_group_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Stop_Record_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Stop_Record_Request, sizeof(struct ns__Dispatch_Stop_Record_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Stop_Record_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_group_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "group-id", &a->group_id, "xsd:string"))
				{	soap_flag_group_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Stop_Record_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Stop_Record_Request, 0, sizeof(struct ns__Dispatch_Stop_Record_Request), 0, soap_copy_ns__Dispatch_Stop_Record_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_group_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Stop_Record_Request(struct soap *soap, const struct ns__Dispatch_Stop_Record_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Stop_Record_Request);
	if (soap_out_ns__Dispatch_Stop_Record_Request(soap, tag?tag:"ns:Dispatch-Stop-Record-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Stop_Record_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Stop_Record_Request(struct soap *soap, struct ns__Dispatch_Stop_Record_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Stop_Record_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Stop_Record_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Stop_Record_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Stop_Record_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Stop_Record_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Stop_Record_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Stop_Record_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Stop_Record_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Stop_Record_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Stop_Record_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Stop_Record_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Stop_Record_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Stop_Record_Request*)p = *(struct ns__Dispatch_Stop_Record_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Start_Record_Request(struct soap *soap, struct ns__Dispatch_Start_Record_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->group_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Start_Record_Request(struct soap *soap, const struct ns__Dispatch_Start_Record_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->group_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Start_Record_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Start_Record_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Start_Record_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "group-id", -1, &a->group_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Start_Record_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Start_Record_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Start_Record_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_group_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Start_Record_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Start_Record_Request, sizeof(struct ns__Dispatch_Start_Record_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Start_Record_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_group_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "group-id", &a->group_id, "xsd:string"))
				{	soap_flag_group_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Start_Record_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Start_Record_Request, 0, sizeof(struct ns__Dispatch_Start_Record_Request), 0, soap_copy_ns__Dispatch_Start_Record_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_group_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Start_Record_Request(struct soap *soap, const struct ns__Dispatch_Start_Record_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Start_Record_Request);
	if (soap_out_ns__Dispatch_Start_Record_Request(soap, tag?tag:"ns:Dispatch-Start-Record-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Start_Record_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Start_Record_Request(struct soap *soap, struct ns__Dispatch_Start_Record_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Start_Record_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Start_Record_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Start_Record_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Start_Record_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Start_Record_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Start_Record_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Start_Record_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Start_Record_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Start_Record_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Start_Record_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Start_Record_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Start_Record_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Start_Record_Request*)p = *(struct ns__Dispatch_Start_Record_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Send_Message_Request(struct soap *soap, struct ns__Dispatch_Send_Message_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->group_id);
	a->mediamessage.ns__MediaMessage::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Send_Message_Request(struct soap *soap, const struct ns__Dispatch_Send_Message_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->group_id);
	a->mediamessage.soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Send_Message_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Send_Message_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Send_Message_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "group-id", -1, &a->group_id, ""))
		return soap->error;
	if (a->mediamessage.soap_out(soap, "mediamessage", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Send_Message_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Send_Message_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Send_Message_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_group_id = 1;
	size_t soap_flag_mediamessage = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Send_Message_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Send_Message_Request, sizeof(struct ns__Dispatch_Send_Message_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Send_Message_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_group_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "group-id", &a->group_id, "xsd:string"))
				{	soap_flag_group_id--;
					continue;
				}
			if (soap_flag_mediamessage && soap->error == SOAP_TAG_MISMATCH)
				if (a->mediamessage.soap_in(soap, "mediamessage", "ns:MediaMessage"))
				{	soap_flag_mediamessage--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Send_Message_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Send_Message_Request, 0, sizeof(struct ns__Dispatch_Send_Message_Request), 0, soap_copy_ns__Dispatch_Send_Message_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_group_id > 0 || soap_flag_mediamessage > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Send_Message_Request(struct soap *soap, const struct ns__Dispatch_Send_Message_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Send_Message_Request);
	if (soap_out_ns__Dispatch_Send_Message_Request(soap, tag?tag:"ns:Dispatch-Send-Message-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Send_Message_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Send_Message_Request(struct soap *soap, struct ns__Dispatch_Send_Message_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Send_Message_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Send_Message_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Send_Message_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Send_Message_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Send_Message_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Send_Message_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Send_Message_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Send_Message_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Send_Message_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Send_Message_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Send_Message_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Send_Message_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Send_Message_Request*)p = *(struct ns__Dispatch_Send_Message_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Session_Status_Notification(struct soap *soap, struct ns__Dispatch_Session_Status_Notification *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Session_Status_Notification(struct soap *soap, const struct ns__Dispatch_Session_Status_Notification *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Session_Status_Notification(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Session_Status_Notification *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Session_Status_Notification), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Session_Status_Notification * SOAP_FMAC4 soap_in_ns__Dispatch_Session_Status_Notification(struct soap *soap, const char *tag, struct ns__Dispatch_Session_Status_Notification *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Session_Status_Notification *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Session_Status_Notification, sizeof(struct ns__Dispatch_Session_Status_Notification), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Session_Status_Notification(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Session_Status_Notification *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Session_Status_Notification, 0, sizeof(struct ns__Dispatch_Session_Status_Notification), 0, soap_copy_ns__Dispatch_Session_Status_Notification);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Session_Status_Notification(struct soap *soap, const struct ns__Dispatch_Session_Status_Notification *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Session_Status_Notification);
	if (soap_out_ns__Dispatch_Session_Status_Notification(soap, tag?tag:"ns:Dispatch-Session-Status-Notification", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Session_Status_Notification * SOAP_FMAC4 soap_get_ns__Dispatch_Session_Status_Notification(struct soap *soap, struct ns__Dispatch_Session_Status_Notification *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Session_Status_Notification(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Session_Status_Notification * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Session_Status_Notification(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Session_Status_Notification(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Session_Status_Notification, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Session_Status_Notification);
		if (size)
			*size = sizeof(struct ns__Dispatch_Session_Status_Notification);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Session_Status_Notification, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Session_Status_Notification);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Session_Status_Notification*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Session_Status_Notification(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Session_Status_Notification %p -> %p\n", q, p));
	*(struct ns__Dispatch_Session_Status_Notification*)p = *(struct ns__Dispatch_Session_Status_Notification*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Leave_Group_Request(struct soap *soap, struct ns__Dispatch_Leave_Group_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->group_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Leave_Group_Request(struct soap *soap, const struct ns__Dispatch_Leave_Group_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->group_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Leave_Group_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Leave_Group_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Leave_Group_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "group-id", -1, &a->group_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Leave_Group_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Leave_Group_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Leave_Group_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_group_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Leave_Group_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Leave_Group_Request, sizeof(struct ns__Dispatch_Leave_Group_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Leave_Group_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_group_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "group-id", &a->group_id, "xsd:string"))
				{	soap_flag_group_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Leave_Group_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Leave_Group_Request, 0, sizeof(struct ns__Dispatch_Leave_Group_Request), 0, soap_copy_ns__Dispatch_Leave_Group_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_group_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Leave_Group_Request(struct soap *soap, const struct ns__Dispatch_Leave_Group_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Leave_Group_Request);
	if (soap_out_ns__Dispatch_Leave_Group_Request(soap, tag?tag:"ns:Dispatch-Leave-Group-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Leave_Group_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Leave_Group_Request(struct soap *soap, struct ns__Dispatch_Leave_Group_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Leave_Group_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Leave_Group_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Leave_Group_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Leave_Group_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Leave_Group_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Leave_Group_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Leave_Group_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Leave_Group_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Leave_Group_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Leave_Group_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Leave_Group_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Leave_Group_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Leave_Group_Request*)p = *(struct ns__Dispatch_Leave_Group_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Jion_Group_Request(struct soap *soap, struct ns__Dispatch_Jion_Group_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->group_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Jion_Group_Request(struct soap *soap, const struct ns__Dispatch_Jion_Group_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->group_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Jion_Group_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Jion_Group_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Jion_Group_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "group-id", -1, &a->group_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Jion_Group_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Jion_Group_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Jion_Group_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_group_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Jion_Group_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Jion_Group_Request, sizeof(struct ns__Dispatch_Jion_Group_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Jion_Group_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_group_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "group-id", &a->group_id, "xsd:string"))
				{	soap_flag_group_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Jion_Group_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Jion_Group_Request, 0, sizeof(struct ns__Dispatch_Jion_Group_Request), 0, soap_copy_ns__Dispatch_Jion_Group_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_group_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Jion_Group_Request(struct soap *soap, const struct ns__Dispatch_Jion_Group_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Jion_Group_Request);
	if (soap_out_ns__Dispatch_Jion_Group_Request(soap, tag?tag:"ns:Dispatch-Jion-Group-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Jion_Group_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Jion_Group_Request(struct soap *soap, struct ns__Dispatch_Jion_Group_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Jion_Group_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Jion_Group_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Jion_Group_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Jion_Group_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Jion_Group_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Jion_Group_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Jion_Group_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Jion_Group_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Jion_Group_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Jion_Group_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Jion_Group_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Jion_Group_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Jion_Group_Request*)p = *(struct ns__Dispatch_Jion_Group_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Appoint_Participant_Speak_Request(struct soap *soap, struct ns__Dispatch_Appoint_Participant_Speak_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->group_id);
	soap_default_std__string(soap, &a->account_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Appoint_Participant_Speak_Request(struct soap *soap, const struct ns__Dispatch_Appoint_Participant_Speak_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->group_id);
	soap_serialize_std__string(soap, &a->account_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Appoint_Participant_Speak_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Appoint_Participant_Speak_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Appoint_Participant_Speak_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "group-id", -1, &a->group_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "account-id", -1, &a->account_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Appoint_Participant_Speak_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Appoint_Participant_Speak_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Appoint_Participant_Speak_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_group_id = 1;
	size_t soap_flag_account_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Appoint_Participant_Speak_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Appoint_Participant_Speak_Request, sizeof(struct ns__Dispatch_Appoint_Participant_Speak_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Appoint_Participant_Speak_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_group_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "group-id", &a->group_id, "xsd:string"))
				{	soap_flag_group_id--;
					continue;
				}
			if (soap_flag_account_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "account-id", &a->account_id, "xsd:string"))
				{	soap_flag_account_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Appoint_Participant_Speak_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Appoint_Participant_Speak_Request, 0, sizeof(struct ns__Dispatch_Appoint_Participant_Speak_Request), 0, soap_copy_ns__Dispatch_Appoint_Participant_Speak_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_group_id > 0 || soap_flag_account_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Appoint_Participant_Speak_Request(struct soap *soap, const struct ns__Dispatch_Appoint_Participant_Speak_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Appoint_Participant_Speak_Request);
	if (soap_out_ns__Dispatch_Appoint_Participant_Speak_Request(soap, tag?tag:"ns:Dispatch-Appoint-Participant-Speak-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Appoint_Participant_Speak_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Appoint_Participant_Speak_Request(struct soap *soap, struct ns__Dispatch_Appoint_Participant_Speak_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Appoint_Participant_Speak_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Appoint_Participant_Speak_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Appoint_Participant_Speak_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Appoint_Participant_Speak_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Appoint_Participant_Speak_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Appoint_Participant_Speak_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Appoint_Participant_Speak_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Appoint_Participant_Speak_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Appoint_Participant_Speak_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Appoint_Participant_Speak_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Appoint_Participant_Speak_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Appoint_Participant_Speak_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Appoint_Participant_Speak_Request*)p = *(struct ns__Dispatch_Appoint_Participant_Speak_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Release_Participant_Token_Request(struct soap *soap, struct ns__Dispatch_Release_Participant_Token_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->group_id);
	soap_default_std__string(soap, &a->account_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Release_Participant_Token_Request(struct soap *soap, const struct ns__Dispatch_Release_Participant_Token_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->group_id);
	soap_serialize_std__string(soap, &a->account_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Release_Participant_Token_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Release_Participant_Token_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Release_Participant_Token_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "group-id", -1, &a->group_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "account-id", -1, &a->account_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Release_Participant_Token_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Release_Participant_Token_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Release_Participant_Token_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_group_id = 1;
	size_t soap_flag_account_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Release_Participant_Token_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Release_Participant_Token_Request, sizeof(struct ns__Dispatch_Release_Participant_Token_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Release_Participant_Token_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_group_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "group-id", &a->group_id, "xsd:string"))
				{	soap_flag_group_id--;
					continue;
				}
			if (soap_flag_account_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "account-id", &a->account_id, "xsd:string"))
				{	soap_flag_account_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Release_Participant_Token_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Release_Participant_Token_Request, 0, sizeof(struct ns__Dispatch_Release_Participant_Token_Request), 0, soap_copy_ns__Dispatch_Release_Participant_Token_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_group_id > 0 || soap_flag_account_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Release_Participant_Token_Request(struct soap *soap, const struct ns__Dispatch_Release_Participant_Token_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Release_Participant_Token_Request);
	if (soap_out_ns__Dispatch_Release_Participant_Token_Request(soap, tag?tag:"ns:Dispatch-Release-Participant-Token-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Release_Participant_Token_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Release_Participant_Token_Request(struct soap *soap, struct ns__Dispatch_Release_Participant_Token_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Release_Participant_Token_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Release_Participant_Token_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Release_Participant_Token_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Release_Participant_Token_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Release_Participant_Token_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Release_Participant_Token_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Release_Participant_Token_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Release_Participant_Token_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Release_Participant_Token_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Release_Participant_Token_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Release_Participant_Token_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Release_Participant_Token_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Release_Participant_Token_Request*)p = *(struct ns__Dispatch_Release_Participant_Token_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Drop_Participant_Request(struct soap *soap, struct ns__Dispatch_Drop_Participant_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->group_id);
	soap_default_std__string(soap, &a->account_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Drop_Participant_Request(struct soap *soap, const struct ns__Dispatch_Drop_Participant_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->group_id);
	soap_serialize_std__string(soap, &a->account_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Drop_Participant_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Drop_Participant_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Drop_Participant_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "group-id", -1, &a->group_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "account-id", -1, &a->account_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Drop_Participant_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Drop_Participant_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Drop_Participant_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_group_id = 1;
	size_t soap_flag_account_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Drop_Participant_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Drop_Participant_Request, sizeof(struct ns__Dispatch_Drop_Participant_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Drop_Participant_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_group_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "group-id", &a->group_id, "xsd:string"))
				{	soap_flag_group_id--;
					continue;
				}
			if (soap_flag_account_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "account-id", &a->account_id, "xsd:string"))
				{	soap_flag_account_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Drop_Participant_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Drop_Participant_Request, 0, sizeof(struct ns__Dispatch_Drop_Participant_Request), 0, soap_copy_ns__Dispatch_Drop_Participant_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_group_id > 0 || soap_flag_account_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Drop_Participant_Request(struct soap *soap, const struct ns__Dispatch_Drop_Participant_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Drop_Participant_Request);
	if (soap_out_ns__Dispatch_Drop_Participant_Request(soap, tag?tag:"ns:Dispatch-Drop-Participant-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Drop_Participant_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Drop_Participant_Request(struct soap *soap, struct ns__Dispatch_Drop_Participant_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Drop_Participant_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Drop_Participant_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Drop_Participant_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Drop_Participant_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Drop_Participant_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Drop_Participant_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Drop_Participant_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Drop_Participant_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Drop_Participant_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Drop_Participant_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Drop_Participant_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Drop_Participant_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Drop_Participant_Request*)p = *(struct ns__Dispatch_Drop_Participant_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Invite_Participant_Request(struct soap *soap, struct ns__Dispatch_Invite_Participant_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->group_id);
	soap_default_std__string(soap, &a->account_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Invite_Participant_Request(struct soap *soap, const struct ns__Dispatch_Invite_Participant_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->group_id);
	soap_serialize_std__string(soap, &a->account_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Invite_Participant_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Invite_Participant_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Invite_Participant_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "group-id", -1, &a->group_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "account-id", -1, &a->account_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Invite_Participant_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Invite_Participant_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Invite_Participant_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_group_id = 1;
	size_t soap_flag_account_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Invite_Participant_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Invite_Participant_Request, sizeof(struct ns__Dispatch_Invite_Participant_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Invite_Participant_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_group_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "group-id", &a->group_id, "xsd:string"))
				{	soap_flag_group_id--;
					continue;
				}
			if (soap_flag_account_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "account-id", &a->account_id, "xsd:string"))
				{	soap_flag_account_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Invite_Participant_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Invite_Participant_Request, 0, sizeof(struct ns__Dispatch_Invite_Participant_Request), 0, soap_copy_ns__Dispatch_Invite_Participant_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_group_id > 0 || soap_flag_account_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Invite_Participant_Request(struct soap *soap, const struct ns__Dispatch_Invite_Participant_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Invite_Participant_Request);
	if (soap_out_ns__Dispatch_Invite_Participant_Request(soap, tag?tag:"ns:Dispatch-Invite-Participant-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Invite_Participant_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Invite_Participant_Request(struct soap *soap, struct ns__Dispatch_Invite_Participant_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Invite_Participant_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Invite_Participant_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Invite_Participant_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Invite_Participant_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Invite_Participant_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Invite_Participant_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Invite_Participant_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Invite_Participant_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Invite_Participant_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Invite_Participant_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Invite_Participant_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Invite_Participant_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Invite_Participant_Request*)p = *(struct ns__Dispatch_Invite_Participant_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Participant_Speak_Request_Notification(struct soap *soap, struct ns__Dispatch_Participant_Speak_Request_Notification *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Participant_Speak_Request_Notification(struct soap *soap, const struct ns__Dispatch_Participant_Speak_Request_Notification *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Participant_Speak_Request_Notification(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Participant_Speak_Request_Notification *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Participant_Speak_Request_Notification * SOAP_FMAC4 soap_in_ns__Dispatch_Participant_Speak_Request_Notification(struct soap *soap, const char *tag, struct ns__Dispatch_Participant_Speak_Request_Notification *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Participant_Speak_Request_Notification *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification, sizeof(struct ns__Dispatch_Participant_Speak_Request_Notification), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Participant_Speak_Request_Notification(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Participant_Speak_Request_Notification *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification, 0, sizeof(struct ns__Dispatch_Participant_Speak_Request_Notification), 0, soap_copy_ns__Dispatch_Participant_Speak_Request_Notification);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Participant_Speak_Request_Notification(struct soap *soap, const struct ns__Dispatch_Participant_Speak_Request_Notification *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification);
	if (soap_out_ns__Dispatch_Participant_Speak_Request_Notification(soap, tag?tag:"ns:Dispatch-Participant-Speak-Request-Notification", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Participant_Speak_Request_Notification * SOAP_FMAC4 soap_get_ns__Dispatch_Participant_Speak_Request_Notification(struct soap *soap, struct ns__Dispatch_Participant_Speak_Request_Notification *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Participant_Speak_Request_Notification(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Participant_Speak_Request_Notification * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Participant_Speak_Request_Notification(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Participant_Speak_Request_Notification(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Participant_Speak_Request_Notification, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Participant_Speak_Request_Notification);
		if (size)
			*size = sizeof(struct ns__Dispatch_Participant_Speak_Request_Notification);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Participant_Speak_Request_Notification, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Participant_Speak_Request_Notification);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Participant_Speak_Request_Notification*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Participant_Speak_Request_Notification(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Participant_Speak_Request_Notification %p -> %p\n", q, p));
	*(struct ns__Dispatch_Participant_Speak_Request_Notification*)p = *(struct ns__Dispatch_Participant_Speak_Request_Notification*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Participant_Connect_Request_Notification(struct soap *soap, struct ns__Dispatch_Participant_Connect_Request_Notification *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Participant_Connect_Request_Notification(struct soap *soap, const struct ns__Dispatch_Participant_Connect_Request_Notification *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Participant_Connect_Request_Notification(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Participant_Connect_Request_Notification *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Participant_Connect_Request_Notification * SOAP_FMAC4 soap_in_ns__Dispatch_Participant_Connect_Request_Notification(struct soap *soap, const char *tag, struct ns__Dispatch_Participant_Connect_Request_Notification *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Participant_Connect_Request_Notification *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification, sizeof(struct ns__Dispatch_Participant_Connect_Request_Notification), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Participant_Connect_Request_Notification(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Participant_Connect_Request_Notification *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification, 0, sizeof(struct ns__Dispatch_Participant_Connect_Request_Notification), 0, soap_copy_ns__Dispatch_Participant_Connect_Request_Notification);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Participant_Connect_Request_Notification(struct soap *soap, const struct ns__Dispatch_Participant_Connect_Request_Notification *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification);
	if (soap_out_ns__Dispatch_Participant_Connect_Request_Notification(soap, tag?tag:"ns:Dispatch-Participant-Connect-Request-Notification", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Participant_Connect_Request_Notification * SOAP_FMAC4 soap_get_ns__Dispatch_Participant_Connect_Request_Notification(struct soap *soap, struct ns__Dispatch_Participant_Connect_Request_Notification *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Participant_Connect_Request_Notification(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Participant_Connect_Request_Notification * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Participant_Connect_Request_Notification(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Participant_Connect_Request_Notification(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Participant_Connect_Request_Notification, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Participant_Connect_Request_Notification);
		if (size)
			*size = sizeof(struct ns__Dispatch_Participant_Connect_Request_Notification);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Participant_Connect_Request_Notification, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Participant_Connect_Request_Notification);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Participant_Connect_Request_Notification*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Participant_Connect_Request_Notification(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Participant_Connect_Request_Notification %p -> %p\n", q, p));
	*(struct ns__Dispatch_Participant_Connect_Request_Notification*)p = *(struct ns__Dispatch_Participant_Connect_Request_Notification*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Media_Message_Notification(struct soap *soap, struct ns__Dispatch_Media_Message_Notification *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Media_Message_Notification(struct soap *soap, const struct ns__Dispatch_Media_Message_Notification *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Media_Message_Notification(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Media_Message_Notification *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Media_Message_Notification), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Media_Message_Notification * SOAP_FMAC4 soap_in_ns__Dispatch_Media_Message_Notification(struct soap *soap, const char *tag, struct ns__Dispatch_Media_Message_Notification *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Media_Message_Notification *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Media_Message_Notification, sizeof(struct ns__Dispatch_Media_Message_Notification), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Media_Message_Notification(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Media_Message_Notification *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Media_Message_Notification, 0, sizeof(struct ns__Dispatch_Media_Message_Notification), 0, soap_copy_ns__Dispatch_Media_Message_Notification);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Media_Message_Notification(struct soap *soap, const struct ns__Dispatch_Media_Message_Notification *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Media_Message_Notification);
	if (soap_out_ns__Dispatch_Media_Message_Notification(soap, tag?tag:"ns:Dispatch-Media-Message-Notification", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Media_Message_Notification * SOAP_FMAC4 soap_get_ns__Dispatch_Media_Message_Notification(struct soap *soap, struct ns__Dispatch_Media_Message_Notification *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Media_Message_Notification(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Media_Message_Notification * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Media_Message_Notification(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Media_Message_Notification(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Media_Message_Notification, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Media_Message_Notification);
		if (size)
			*size = sizeof(struct ns__Dispatch_Media_Message_Notification);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Media_Message_Notification, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Media_Message_Notification);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Media_Message_Notification*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Media_Message_Notification(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Media_Message_Notification %p -> %p\n", q, p));
	*(struct ns__Dispatch_Media_Message_Notification*)p = *(struct ns__Dispatch_Media_Message_Notification*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Media_Message_Request(struct soap *soap, struct ns__Dispatch_Media_Message_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->group_id);
	soap_default_std__string(soap, &a->from_message_id);
	soap_default_std__string(soap, &a->from_time);
	soap_default_std__string(soap, &a->max_message_count);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Media_Message_Request(struct soap *soap, const struct ns__Dispatch_Media_Message_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->group_id);
	soap_serialize_std__string(soap, &a->from_message_id);
	soap_serialize_std__string(soap, &a->from_time);
	soap_serialize_std__string(soap, &a->max_message_count);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Media_Message_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Media_Message_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Media_Message_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "group-id", -1, &a->group_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "from-message-id", -1, &a->from_message_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "from-time", -1, &a->from_time, ""))
		return soap->error;
	if (soap_out_std__string(soap, "max-message-count", -1, &a->max_message_count, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Media_Message_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Media_Message_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Media_Message_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_group_id = 1;
	size_t soap_flag_from_message_id = 1;
	size_t soap_flag_from_time = 1;
	size_t soap_flag_max_message_count = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Media_Message_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Media_Message_Request, sizeof(struct ns__Dispatch_Media_Message_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Media_Message_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_group_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "group-id", &a->group_id, "xsd:string"))
				{	soap_flag_group_id--;
					continue;
				}
			if (soap_flag_from_message_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "from-message-id", &a->from_message_id, "xsd:string"))
				{	soap_flag_from_message_id--;
					continue;
				}
			if (soap_flag_from_time && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "from-time", &a->from_time, "xsd:string"))
				{	soap_flag_from_time--;
					continue;
				}
			if (soap_flag_max_message_count && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "max-message-count", &a->max_message_count, "xsd:string"))
				{	soap_flag_max_message_count--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Media_Message_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Media_Message_Request, 0, sizeof(struct ns__Dispatch_Media_Message_Request), 0, soap_copy_ns__Dispatch_Media_Message_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_group_id > 0 || soap_flag_from_message_id > 0 || soap_flag_from_time > 0 || soap_flag_max_message_count > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Media_Message_Request(struct soap *soap, const struct ns__Dispatch_Media_Message_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Media_Message_Request);
	if (soap_out_ns__Dispatch_Media_Message_Request(soap, tag?tag:"ns:Dispatch-Media-Message-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Media_Message_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Media_Message_Request(struct soap *soap, struct ns__Dispatch_Media_Message_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Media_Message_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Media_Message_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Media_Message_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Media_Message_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Media_Message_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Media_Message_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Media_Message_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Media_Message_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Media_Message_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Media_Message_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Media_Message_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Media_Message_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Media_Message_Request*)p = *(struct ns__Dispatch_Media_Message_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Participant_Status_Notification(struct soap *soap, struct ns__Dispatch_Participant_Status_Notification *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Participant_Status_Notification(struct soap *soap, const struct ns__Dispatch_Participant_Status_Notification *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Participant_Status_Notification(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Participant_Status_Notification *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Participant_Status_Notification), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Participant_Status_Notification * SOAP_FMAC4 soap_in_ns__Dispatch_Participant_Status_Notification(struct soap *soap, const char *tag, struct ns__Dispatch_Participant_Status_Notification *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Participant_Status_Notification *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Participant_Status_Notification, sizeof(struct ns__Dispatch_Participant_Status_Notification), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Participant_Status_Notification(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Participant_Status_Notification *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Participant_Status_Notification, 0, sizeof(struct ns__Dispatch_Participant_Status_Notification), 0, soap_copy_ns__Dispatch_Participant_Status_Notification);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Participant_Status_Notification(struct soap *soap, const struct ns__Dispatch_Participant_Status_Notification *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Participant_Status_Notification);
	if (soap_out_ns__Dispatch_Participant_Status_Notification(soap, tag?tag:"ns:Dispatch-Participant-Status-Notification", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Participant_Status_Notification * SOAP_FMAC4 soap_get_ns__Dispatch_Participant_Status_Notification(struct soap *soap, struct ns__Dispatch_Participant_Status_Notification *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Participant_Status_Notification(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Participant_Status_Notification * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Participant_Status_Notification(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Participant_Status_Notification(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Participant_Status_Notification, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Participant_Status_Notification);
		if (size)
			*size = sizeof(struct ns__Dispatch_Participant_Status_Notification);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Participant_Status_Notification, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Participant_Status_Notification);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Participant_Status_Notification*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Participant_Status_Notification(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Participant_Status_Notification %p -> %p\n", q, p));
	*(struct ns__Dispatch_Participant_Status_Notification*)p = *(struct ns__Dispatch_Participant_Status_Notification*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Join_Group_Request_Nofitication(struct soap *soap, struct ns__Dispatch_Join_Group_Request_Nofitication *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Join_Group_Request_Nofitication(struct soap *soap, const struct ns__Dispatch_Join_Group_Request_Nofitication *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Join_Group_Request_Nofitication(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Join_Group_Request_Nofitication *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Join_Group_Request_Nofitication * SOAP_FMAC4 soap_in_ns__Dispatch_Join_Group_Request_Nofitication(struct soap *soap, const char *tag, struct ns__Dispatch_Join_Group_Request_Nofitication *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Join_Group_Request_Nofitication *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication, sizeof(struct ns__Dispatch_Join_Group_Request_Nofitication), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Join_Group_Request_Nofitication(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Join_Group_Request_Nofitication *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication, 0, sizeof(struct ns__Dispatch_Join_Group_Request_Nofitication), 0, soap_copy_ns__Dispatch_Join_Group_Request_Nofitication);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Join_Group_Request_Nofitication(struct soap *soap, const struct ns__Dispatch_Join_Group_Request_Nofitication *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication);
	if (soap_out_ns__Dispatch_Join_Group_Request_Nofitication(soap, tag?tag:"ns:Dispatch-Join-Group-Request-Nofitication", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Join_Group_Request_Nofitication * SOAP_FMAC4 soap_get_ns__Dispatch_Join_Group_Request_Nofitication(struct soap *soap, struct ns__Dispatch_Join_Group_Request_Nofitication *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Join_Group_Request_Nofitication(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Join_Group_Request_Nofitication * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Join_Group_Request_Nofitication(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Join_Group_Request_Nofitication(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Join_Group_Request_Nofitication, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Join_Group_Request_Nofitication);
		if (size)
			*size = sizeof(struct ns__Dispatch_Join_Group_Request_Nofitication);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Join_Group_Request_Nofitication, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Join_Group_Request_Nofitication);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Join_Group_Request_Nofitication*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Join_Group_Request_Nofitication(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Join_Group_Request_Nofitication %p -> %p\n", q, p));
	*(struct ns__Dispatch_Join_Group_Request_Nofitication*)p = *(struct ns__Dispatch_Join_Group_Request_Nofitication*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Dispatch_Participants_Notification(struct soap *soap, struct ns__Dispatch_Dispatch_Participants_Notification *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Dispatch_Participants_Notification(struct soap *soap, const struct ns__Dispatch_Dispatch_Participants_Notification *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Dispatch_Participants_Notification(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Dispatch_Participants_Notification *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Dispatch_Participants_Notification * SOAP_FMAC4 soap_in_ns__Dispatch_Dispatch_Participants_Notification(struct soap *soap, const char *tag, struct ns__Dispatch_Dispatch_Participants_Notification *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Dispatch_Participants_Notification *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification, sizeof(struct ns__Dispatch_Dispatch_Participants_Notification), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Dispatch_Participants_Notification(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Dispatch_Participants_Notification *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification, 0, sizeof(struct ns__Dispatch_Dispatch_Participants_Notification), 0, soap_copy_ns__Dispatch_Dispatch_Participants_Notification);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Dispatch_Participants_Notification(struct soap *soap, const struct ns__Dispatch_Dispatch_Participants_Notification *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification);
	if (soap_out_ns__Dispatch_Dispatch_Participants_Notification(soap, tag?tag:"ns:Dispatch-Dispatch-Participants-Notification", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Dispatch_Participants_Notification * SOAP_FMAC4 soap_get_ns__Dispatch_Dispatch_Participants_Notification(struct soap *soap, struct ns__Dispatch_Dispatch_Participants_Notification *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Dispatch_Participants_Notification(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Dispatch_Participants_Notification * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Dispatch_Participants_Notification(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Dispatch_Participants_Notification(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Dispatch_Participants_Notification, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Dispatch_Participants_Notification);
		if (size)
			*size = sizeof(struct ns__Dispatch_Dispatch_Participants_Notification);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Dispatch_Participants_Notification, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Dispatch_Participants_Notification);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Dispatch_Participants_Notification*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Dispatch_Participants_Notification(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Dispatch_Participants_Notification %p -> %p\n", q, p));
	*(struct ns__Dispatch_Dispatch_Participants_Notification*)p = *(struct ns__Dispatch_Dispatch_Participants_Notification*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Delete_Group(struct soap *soap, struct ns__Dispatch_Delete_Group *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->group_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Delete_Group(struct soap *soap, const struct ns__Dispatch_Delete_Group *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->group_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Delete_Group(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Delete_Group *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Delete_Group), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "group-id", -1, &a->group_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Delete_Group * SOAP_FMAC4 soap_in_ns__Dispatch_Delete_Group(struct soap *soap, const char *tag, struct ns__Dispatch_Delete_Group *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_group_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Delete_Group *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Delete_Group, sizeof(struct ns__Dispatch_Delete_Group), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Delete_Group(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_group_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "group-id", &a->group_id, "xsd:string"))
				{	soap_flag_group_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Delete_Group *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Delete_Group, 0, sizeof(struct ns__Dispatch_Delete_Group), 0, soap_copy_ns__Dispatch_Delete_Group);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_group_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Delete_Group(struct soap *soap, const struct ns__Dispatch_Delete_Group *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Delete_Group);
	if (soap_out_ns__Dispatch_Delete_Group(soap, tag?tag:"ns:Dispatch-Delete-Group", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Delete_Group * SOAP_FMAC4 soap_get_ns__Dispatch_Delete_Group(struct soap *soap, struct ns__Dispatch_Delete_Group *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Delete_Group(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Delete_Group * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Delete_Group(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Delete_Group(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Delete_Group, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Delete_Group);
		if (size)
			*size = sizeof(struct ns__Dispatch_Delete_Group);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Delete_Group, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Delete_Group);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Delete_Group*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Delete_Group(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Delete_Group %p -> %p\n", q, p));
	*(struct ns__Dispatch_Delete_Group*)p = *(struct ns__Dispatch_Delete_Group*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Modify_Participants(struct soap *soap, struct ns__Dispatch_Modify_Participants *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	a->request.ns__Modify_Participant::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Modify_Participants(struct soap *soap, const struct ns__Dispatch_Modify_Participants *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	a->request.soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Modify_Participants(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Modify_Participants *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Modify_Participants), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (a->request.soap_out(soap, "request", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Modify_Participants * SOAP_FMAC4 soap_in_ns__Dispatch_Modify_Participants(struct soap *soap, const char *tag, struct ns__Dispatch_Modify_Participants *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_request = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Modify_Participants *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Modify_Participants, sizeof(struct ns__Dispatch_Modify_Participants), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Modify_Participants(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_request && soap->error == SOAP_TAG_MISMATCH)
				if (a->request.soap_in(soap, "request", "ns:Modify-Participant"))
				{	soap_flag_request--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Modify_Participants *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Modify_Participants, 0, sizeof(struct ns__Dispatch_Modify_Participants), 0, soap_copy_ns__Dispatch_Modify_Participants);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_request > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Modify_Participants(struct soap *soap, const struct ns__Dispatch_Modify_Participants *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Modify_Participants);
	if (soap_out_ns__Dispatch_Modify_Participants(soap, tag?tag:"ns:Dispatch-Modify-Participants", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Modify_Participants * SOAP_FMAC4 soap_get_ns__Dispatch_Modify_Participants(struct soap *soap, struct ns__Dispatch_Modify_Participants *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Modify_Participants(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Modify_Participants * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Modify_Participants(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Modify_Participants(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Modify_Participants, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Modify_Participants);
		if (size)
			*size = sizeof(struct ns__Dispatch_Modify_Participants);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Modify_Participants, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Modify_Participants);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Modify_Participants*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Modify_Participants(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Modify_Participants %p -> %p\n", q, p));
	*(struct ns__Dispatch_Modify_Participants*)p = *(struct ns__Dispatch_Modify_Participants*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Modify_Group(struct soap *soap, struct ns__Dispatch_Modify_Group *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	a->group.ns__Group::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Modify_Group(struct soap *soap, const struct ns__Dispatch_Modify_Group *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	a->group.soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Modify_Group(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Modify_Group *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Modify_Group), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (a->group.soap_out(soap, "group", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Modify_Group * SOAP_FMAC4 soap_in_ns__Dispatch_Modify_Group(struct soap *soap, const char *tag, struct ns__Dispatch_Modify_Group *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_group = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Modify_Group *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Modify_Group, sizeof(struct ns__Dispatch_Modify_Group), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Modify_Group(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_group && soap->error == SOAP_TAG_MISMATCH)
				if (a->group.soap_in(soap, "group", "ns:Group"))
				{	soap_flag_group--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Modify_Group *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Modify_Group, 0, sizeof(struct ns__Dispatch_Modify_Group), 0, soap_copy_ns__Dispatch_Modify_Group);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_group > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Modify_Group(struct soap *soap, const struct ns__Dispatch_Modify_Group *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Modify_Group);
	if (soap_out_ns__Dispatch_Modify_Group(soap, tag?tag:"ns:Dispatch-Modify-Group", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Modify_Group * SOAP_FMAC4 soap_get_ns__Dispatch_Modify_Group(struct soap *soap, struct ns__Dispatch_Modify_Group *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Modify_Group(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Modify_Group * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Modify_Group(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Modify_Group(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Modify_Group, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Modify_Group);
		if (size)
			*size = sizeof(struct ns__Dispatch_Modify_Group);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Modify_Group, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Modify_Group);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Modify_Group*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Modify_Group(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Modify_Group %p -> %p\n", q, p));
	*(struct ns__Dispatch_Modify_Group*)p = *(struct ns__Dispatch_Modify_Group*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Append_Group(struct soap *soap, struct ns__Dispatch_Append_Group *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	a->group.ns__Group::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Append_Group(struct soap *soap, const struct ns__Dispatch_Append_Group *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	a->group.soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Append_Group(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Append_Group *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Append_Group), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (a->group.soap_out(soap, "group", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Append_Group * SOAP_FMAC4 soap_in_ns__Dispatch_Append_Group(struct soap *soap, const char *tag, struct ns__Dispatch_Append_Group *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_group = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Append_Group *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Append_Group, sizeof(struct ns__Dispatch_Append_Group), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Append_Group(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_group && soap->error == SOAP_TAG_MISMATCH)
				if (a->group.soap_in(soap, "group", "ns:Group"))
				{	soap_flag_group--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Append_Group *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Append_Group, 0, sizeof(struct ns__Dispatch_Append_Group), 0, soap_copy_ns__Dispatch_Append_Group);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_group > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Append_Group(struct soap *soap, const struct ns__Dispatch_Append_Group *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Append_Group);
	if (soap_out_ns__Dispatch_Append_Group(soap, tag?tag:"ns:Dispatch-Append-Group", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Append_Group * SOAP_FMAC4 soap_get_ns__Dispatch_Append_Group(struct soap *soap, struct ns__Dispatch_Append_Group *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Append_Group(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Append_Group * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Append_Group(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Append_Group(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Append_Group, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Append_Group);
		if (size)
			*size = sizeof(struct ns__Dispatch_Append_Group);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Append_Group, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Append_Group);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Append_Group*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Append_Group(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Append_Group %p -> %p\n", q, p));
	*(struct ns__Dispatch_Append_Group*)p = *(struct ns__Dispatch_Append_Group*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Entity_Nofitication(struct soap *soap, struct ns__Dispatch_Entity_Nofitication *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Entity_Nofitication(struct soap *soap, const struct ns__Dispatch_Entity_Nofitication *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Entity_Nofitication(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Entity_Nofitication *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Entity_Nofitication), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Entity_Nofitication * SOAP_FMAC4 soap_in_ns__Dispatch_Entity_Nofitication(struct soap *soap, const char *tag, struct ns__Dispatch_Entity_Nofitication *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Entity_Nofitication *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Entity_Nofitication, sizeof(struct ns__Dispatch_Entity_Nofitication), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Entity_Nofitication(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Entity_Nofitication *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Entity_Nofitication, 0, sizeof(struct ns__Dispatch_Entity_Nofitication), 0, soap_copy_ns__Dispatch_Entity_Nofitication);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Entity_Nofitication(struct soap *soap, const struct ns__Dispatch_Entity_Nofitication *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Entity_Nofitication);
	if (soap_out_ns__Dispatch_Entity_Nofitication(soap, tag?tag:"ns:Dispatch-Entity-Nofitication", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Entity_Nofitication * SOAP_FMAC4 soap_get_ns__Dispatch_Entity_Nofitication(struct soap *soap, struct ns__Dispatch_Entity_Nofitication *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Entity_Nofitication(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Entity_Nofitication * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Entity_Nofitication(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Entity_Nofitication(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Entity_Nofitication, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Entity_Nofitication);
		if (size)
			*size = sizeof(struct ns__Dispatch_Entity_Nofitication);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Entity_Nofitication, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Entity_Nofitication);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Entity_Nofitication*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Entity_Nofitication(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Entity_Nofitication %p -> %p\n", q, p));
	*(struct ns__Dispatch_Entity_Nofitication*)p = *(struct ns__Dispatch_Entity_Nofitication*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Entity_Request(struct soap *soap, struct ns__Dispatch_Entity_Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Entity_Request(struct soap *soap, const struct ns__Dispatch_Entity_Request *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Entity_Request(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Entity_Request *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Entity_Request), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "id", -1, &a->id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Entity_Request * SOAP_FMAC4 soap_in_ns__Dispatch_Entity_Request(struct soap *soap, const char *tag, struct ns__Dispatch_Entity_Request *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Entity_Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Entity_Request, sizeof(struct ns__Dispatch_Entity_Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Entity_Request(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "id", &a->id, "xsd:string"))
				{	soap_flag_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Entity_Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Entity_Request, 0, sizeof(struct ns__Dispatch_Entity_Request), 0, soap_copy_ns__Dispatch_Entity_Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Entity_Request(struct soap *soap, const struct ns__Dispatch_Entity_Request *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Entity_Request);
	if (soap_out_ns__Dispatch_Entity_Request(soap, tag?tag:"ns:Dispatch-Entity-Request", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Entity_Request * SOAP_FMAC4 soap_get_ns__Dispatch_Entity_Request(struct soap *soap, struct ns__Dispatch_Entity_Request *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Entity_Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Entity_Request * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Entity_Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Entity_Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Entity_Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Entity_Request);
		if (size)
			*size = sizeof(struct ns__Dispatch_Entity_Request);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Entity_Request, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Entity_Request);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Entity_Request*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Entity_Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Entity_Request %p -> %p\n", q, p));
	*(struct ns__Dispatch_Entity_Request*)p = *(struct ns__Dispatch_Entity_Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Logout(struct soap *soap, struct ns__Dispatch_Logout *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->session_id);
	soap_default_std__string(soap, &a->name);
	soap_default_std__string(soap, &a->password);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Logout(struct soap *soap, const struct ns__Dispatch_Logout *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->session_id);
	soap_serialize_std__string(soap, &a->name);
	soap_serialize_std__string(soap, &a->password);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Logout(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Logout *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Logout), type))
		return soap->error;
	if (soap_out_std__string(soap, "session-id", -1, &a->session_id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "name", -1, &a->name, ""))
		return soap->error;
	if (soap_out_std__string(soap, "password", -1, &a->password, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Logout * SOAP_FMAC4 soap_in_ns__Dispatch_Logout(struct soap *soap, const char *tag, struct ns__Dispatch_Logout *a, const char *type)
{
	size_t soap_flag_session_id = 1;
	size_t soap_flag_name = 1;
	size_t soap_flag_password = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Logout *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Logout, sizeof(struct ns__Dispatch_Logout), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Logout(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "session-id", &a->session_id, "xsd:string"))
				{	soap_flag_session_id--;
					continue;
				}
			if (soap_flag_name && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name--;
					continue;
				}
			if (soap_flag_password && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "password", &a->password, "xsd:string"))
				{	soap_flag_password--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Logout *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Logout, 0, sizeof(struct ns__Dispatch_Logout), 0, soap_copy_ns__Dispatch_Logout);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session_id > 0 || soap_flag_name > 0 || soap_flag_password > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Logout(struct soap *soap, const struct ns__Dispatch_Logout *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Logout);
	if (soap_out_ns__Dispatch_Logout(soap, tag?tag:"ns:Dispatch-Logout", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Logout * SOAP_FMAC4 soap_get_ns__Dispatch_Logout(struct soap *soap, struct ns__Dispatch_Logout *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Logout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Logout * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Logout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Logout(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Logout, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Logout);
		if (size)
			*size = sizeof(struct ns__Dispatch_Logout);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Logout, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Logout);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Logout*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Logout(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Logout %p -> %p\n", q, p));
	*(struct ns__Dispatch_Logout*)p = *(struct ns__Dispatch_Logout*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Dispatch_Login(struct soap *soap, struct ns__Dispatch_Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->username);
	soap_default_std__string(soap, &a->password);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Dispatch_Login(struct soap *soap, const struct ns__Dispatch_Login *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->username);
	soap_serialize_std__string(soap, &a->password);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Dispatch_Login(struct soap *soap, const char *tag, int id, const struct ns__Dispatch_Login *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Dispatch_Login), type))
		return soap->error;
	if (soap_out_std__string(soap, "username", -1, &a->username, ""))
		return soap->error;
	if (soap_out_std__string(soap, "password", -1, &a->password, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Dispatch_Login * SOAP_FMAC4 soap_in_ns__Dispatch_Login(struct soap *soap, const char *tag, struct ns__Dispatch_Login *a, const char *type)
{
	size_t soap_flag_username = 1;
	size_t soap_flag_password = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Dispatch_Login *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Dispatch_Login, sizeof(struct ns__Dispatch_Login), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Dispatch_Login(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_username && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "username", &a->username, "xsd:string"))
				{	soap_flag_username--;
					continue;
				}
			if (soap_flag_password && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "password", &a->password, "xsd:string"))
				{	soap_flag_password--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Dispatch_Login *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Dispatch_Login, 0, sizeof(struct ns__Dispatch_Login), 0, soap_copy_ns__Dispatch_Login);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_username > 0 || soap_flag_password > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Dispatch_Login(struct soap *soap, const struct ns__Dispatch_Login *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Dispatch_Login);
	if (soap_out_ns__Dispatch_Login(soap, tag?tag:"ns:Dispatch-Login", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Dispatch_Login * SOAP_FMAC4 soap_get_ns__Dispatch_Login(struct soap *soap, struct ns__Dispatch_Login *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Dispatch_Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Dispatch_Login * SOAP_FMAC2 soap_instantiate_ns__Dispatch_Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Dispatch_Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Dispatch_Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Dispatch_Login);
		if (size)
			*size = sizeof(struct ns__Dispatch_Login);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Dispatch_Login, n);
		if (size)
			*size = n * sizeof(struct ns__Dispatch_Login);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Dispatch_Login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Dispatch_Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Dispatch_Login %p -> %p\n", q, p));
	*(struct ns__Dispatch_Login*)p = *(struct ns__Dispatch_Login*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__listTemplateOfns__Account(struct soap *soap, std::list<ns__Account >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__listTemplateOfns__Account(struct soap *soap, const std::list<ns__Account >*a)
{
#ifndef WITH_NOIDREF
	for (std::list<ns__Account >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__listTemplateOfns__Account(struct soap *soap, const char *tag, int id, const std::list<ns__Account >*a, const char *type)
{
	for (std::list<ns__Account >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::list<ns__Account >* SOAP_FMAC4 soap_in_std__listTemplateOfns__Account(struct soap *soap, const char *tag, std::list<ns__Account >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns__Account n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n.soap_default(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns__Account, SOAP_TYPE_std__listTemplateOfns__Account, sizeof(ns__Account), 0))
				break;
			if (!soap_in_ns__Account(soap, tag, NULL, "ns:Account"))
				break;
		}
		else if (!soap_in_ns__Account(soap, tag, &n, "ns:Account"))
			break;
		if (!a && !(a = soap_new_std__listTemplateOfns__Account(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::list<ns__Account > * SOAP_FMAC2 soap_instantiate_std__listTemplateOfns__Account(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__listTemplateOfns__Account(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__listTemplateOfns__Account, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::list<ns__Account >);
		if (size)
			*size = sizeof(std::list<ns__Account >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::list<ns__Account >, n);
		if (size)
			*size = n * sizeof(std::list<ns__Account >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::list<ns__Account >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__listTemplateOfns__Account(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::list<ns__Account > %p -> %p\n", q, p));
	*(std::list<ns__Account >*)p = *(std::list<ns__Account >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__listTemplateOfstd__string(struct soap *soap, std::list<std::string >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__listTemplateOfstd__string(struct soap *soap, const std::list<std::string >*a)
{
#ifndef WITH_NOIDREF
	for (std::list<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__listTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::list<std::string >*a, const char *type)
{
	for (std::list<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::list<std::string >* SOAP_FMAC4 soap_in_std__listTemplateOfstd__string(struct soap *soap, const char *tag, std::list<std::string >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	std::string n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		soap_default_std__string(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_std__string, SOAP_TYPE_std__listTemplateOfstd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
			break;
		if (!a && !(a = soap_new_std__listTemplateOfstd__string(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::list<std::string > * SOAP_FMAC2 soap_instantiate_std__listTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__listTemplateOfstd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__listTemplateOfstd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::list<std::string >);
		if (size)
			*size = sizeof(std::list<std::string >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::list<std::string >, n);
		if (size)
			*size = n * sizeof(std::list<std::string >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::list<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__listTemplateOfstd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::list<std::string > %p -> %p\n", q, p));
	*(std::list<std::string >*)p = *(std::list<std::string >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__listTemplateOfns__HistoryAlert(struct soap *soap, std::list<ns__HistoryAlert >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__listTemplateOfns__HistoryAlert(struct soap *soap, const std::list<ns__HistoryAlert >*a)
{
#ifndef WITH_NOIDREF
	for (std::list<ns__HistoryAlert >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__listTemplateOfns__HistoryAlert(struct soap *soap, const char *tag, int id, const std::list<ns__HistoryAlert >*a, const char *type)
{
	for (std::list<ns__HistoryAlert >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::list<ns__HistoryAlert >* SOAP_FMAC4 soap_in_std__listTemplateOfns__HistoryAlert(struct soap *soap, const char *tag, std::list<ns__HistoryAlert >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns__HistoryAlert n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n.soap_default(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns__HistoryAlert, SOAP_TYPE_std__listTemplateOfns__HistoryAlert, sizeof(ns__HistoryAlert), 0))
				break;
			if (!soap_in_ns__HistoryAlert(soap, tag, NULL, "ns:HistoryAlert"))
				break;
		}
		else if (!soap_in_ns__HistoryAlert(soap, tag, &n, "ns:HistoryAlert"))
			break;
		if (!a && !(a = soap_new_std__listTemplateOfns__HistoryAlert(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::list<ns__HistoryAlert > * SOAP_FMAC2 soap_instantiate_std__listTemplateOfns__HistoryAlert(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__listTemplateOfns__HistoryAlert(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__listTemplateOfns__HistoryAlert, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::list<ns__HistoryAlert >);
		if (size)
			*size = sizeof(std::list<ns__HistoryAlert >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::list<ns__HistoryAlert >, n);
		if (size)
			*size = n * sizeof(std::list<ns__HistoryAlert >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::list<ns__HistoryAlert >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__listTemplateOfns__HistoryAlert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::list<ns__HistoryAlert > %p -> %p\n", q, p));
	*(std::list<ns__HistoryAlert >*)p = *(std::list<ns__HistoryAlert >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__listTemplateOfns__MediaMessage(struct soap *soap, std::list<ns__MediaMessage >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__listTemplateOfns__MediaMessage(struct soap *soap, const std::list<ns__MediaMessage >*a)
{
#ifndef WITH_NOIDREF
	for (std::list<ns__MediaMessage >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__listTemplateOfns__MediaMessage(struct soap *soap, const char *tag, int id, const std::list<ns__MediaMessage >*a, const char *type)
{
	for (std::list<ns__MediaMessage >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::list<ns__MediaMessage >* SOAP_FMAC4 soap_in_std__listTemplateOfns__MediaMessage(struct soap *soap, const char *tag, std::list<ns__MediaMessage >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns__MediaMessage n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n.soap_default(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns__MediaMessage, SOAP_TYPE_std__listTemplateOfns__MediaMessage, sizeof(ns__MediaMessage), 0))
				break;
			if (!soap_in_ns__MediaMessage(soap, tag, NULL, "ns:MediaMessage"))
				break;
		}
		else if (!soap_in_ns__MediaMessage(soap, tag, &n, "ns:MediaMessage"))
			break;
		if (!a && !(a = soap_new_std__listTemplateOfns__MediaMessage(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::list<ns__MediaMessage > * SOAP_FMAC2 soap_instantiate_std__listTemplateOfns__MediaMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__listTemplateOfns__MediaMessage(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__listTemplateOfns__MediaMessage, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::list<ns__MediaMessage >);
		if (size)
			*size = sizeof(std::list<ns__MediaMessage >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::list<ns__MediaMessage >, n);
		if (size)
			*size = n * sizeof(std::list<ns__MediaMessage >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::list<ns__MediaMessage >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__listTemplateOfns__MediaMessage(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::list<ns__MediaMessage > %p -> %p\n", q, p));
	*(std::list<ns__MediaMessage >*)p = *(std::list<ns__MediaMessage >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__listTemplateOfns__Participant(struct soap *soap, std::list<ns__Participant >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__listTemplateOfns__Participant(struct soap *soap, const std::list<ns__Participant >*a)
{
#ifndef WITH_NOIDREF
	for (std::list<ns__Participant >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__listTemplateOfns__Participant(struct soap *soap, const char *tag, int id, const std::list<ns__Participant >*a, const char *type)
{
	for (std::list<ns__Participant >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::list<ns__Participant >* SOAP_FMAC4 soap_in_std__listTemplateOfns__Participant(struct soap *soap, const char *tag, std::list<ns__Participant >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns__Participant n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n.soap_default(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns__Participant, SOAP_TYPE_std__listTemplateOfns__Participant, sizeof(ns__Participant), 0))
				break;
			if (!soap_in_ns__Participant(soap, tag, NULL, "ns:Participant"))
				break;
		}
		else if (!soap_in_ns__Participant(soap, tag, &n, "ns:Participant"))
			break;
		if (!a && !(a = soap_new_std__listTemplateOfns__Participant(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::list<ns__Participant > * SOAP_FMAC2 soap_instantiate_std__listTemplateOfns__Participant(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__listTemplateOfns__Participant(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__listTemplateOfns__Participant, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::list<ns__Participant >);
		if (size)
			*size = sizeof(std::list<ns__Participant >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::list<ns__Participant >, n);
		if (size)
			*size = n * sizeof(std::list<ns__Participant >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::list<ns__Participant >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__listTemplateOfns__Participant(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::list<ns__Participant > %p -> %p\n", q, p));
	*(std::list<ns__Participant >*)p = *(std::list<ns__Participant >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__listTemplateOfns__Entity(struct soap *soap, std::list<ns__Entity >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__listTemplateOfns__Entity(struct soap *soap, const std::list<ns__Entity >*a)
{
#ifndef WITH_NOIDREF
	for (std::list<ns__Entity >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__listTemplateOfns__Entity(struct soap *soap, const char *tag, int id, const std::list<ns__Entity >*a, const char *type)
{
	for (std::list<ns__Entity >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::list<ns__Entity >* SOAP_FMAC4 soap_in_std__listTemplateOfns__Entity(struct soap *soap, const char *tag, std::list<ns__Entity >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns__Entity n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n.soap_default(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns__Entity, SOAP_TYPE_std__listTemplateOfns__Entity, sizeof(ns__Entity), 0))
				break;
			if (!soap_in_ns__Entity(soap, tag, NULL, "ns:Entity"))
				break;
		}
		else if (!soap_in_ns__Entity(soap, tag, &n, "ns:Entity"))
			break;
		if (!a && !(a = soap_new_std__listTemplateOfns__Entity(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::list<ns__Entity > * SOAP_FMAC2 soap_instantiate_std__listTemplateOfns__Entity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__listTemplateOfns__Entity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__listTemplateOfns__Entity, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::list<ns__Entity >);
		if (size)
			*size = sizeof(std::list<ns__Entity >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::list<ns__Entity >, n);
		if (size)
			*size = n * sizeof(std::list<ns__Entity >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::list<ns__Entity >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__listTemplateOfns__Entity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::list<ns__Entity > %p -> %p\n", q, p));
	*(std::list<ns__Entity >*)p = *(std::list<ns__Entity >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
