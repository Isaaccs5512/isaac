/* soapxiaofangProxy.cpp
   Generated by gSOAP 2.8.17r from webservice.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapxiaofangProxy.h"

xiaofangProxy::xiaofangProxy()
{	xiaofangProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

xiaofangProxy::xiaofangProxy(const struct soap &_soap) : soap(_soap)
{ }

xiaofangProxy::xiaofangProxy(const char *url)
{	xiaofangProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

xiaofangProxy::xiaofangProxy(soap_mode iomode)
{	xiaofangProxy_init(iomode, iomode);
}

xiaofangProxy::xiaofangProxy(const char *url, soap_mode iomode)
{	xiaofangProxy_init(iomode, iomode);
	soap_endpoint = url;
}

xiaofangProxy::xiaofangProxy(soap_mode imode, soap_mode omode)
{	xiaofangProxy_init(imode, omode);
}

xiaofangProxy::~xiaofangProxy()
{ }

void xiaofangProxy::xiaofangProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:xiaofang", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void xiaofangProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void xiaofangProxy::reset()
{	destroy();
	soap_done(this);
	soap_initialize(this);
	xiaofangProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void xiaofangProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *xiaofangProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *xiaofangProxy::soap_fault()
{	return this->fault;
}

const char *xiaofangProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *xiaofangProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int xiaofangProxy::soap_close_socket()
{	return soap_closesock(this);
}

int xiaofangProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void xiaofangProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void xiaofangProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *xiaofangProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int xiaofangProxy::Dispatch_Login(const char *endpoint, const char *soap_action, std::string username, std::string password, ns__Dispatch_Login_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Login soap_tmp_ns__Dispatch_Login;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Login.username = username;
	soap_tmp_ns__Dispatch_Login.password = password;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Login(soap, &soap_tmp_ns__Dispatch_Login);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Login(soap, &soap_tmp_ns__Dispatch_Login, "ns:Dispatch-Login", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Login(soap, &soap_tmp_ns__Dispatch_Login, "ns:Dispatch-Login", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Logout(const char *endpoint, const char *soap_action, std::string session_id, std::string name, std::string password, ns__Normal_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Logout soap_tmp_ns__Dispatch_Logout;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Logout.session_id = session_id;
	soap_tmp_ns__Dispatch_Logout.name = name;
	soap_tmp_ns__Dispatch_Logout.password = password;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Logout(soap, &soap_tmp_ns__Dispatch_Logout);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Logout(soap, &soap_tmp_ns__Dispatch_Logout, "ns:Dispatch-Logout", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Logout(soap, &soap_tmp_ns__Dispatch_Logout, "ns:Dispatch-Logout", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Entity_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string id, ns__Dispatch_Entity_Request_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Entity_Request soap_tmp_ns__Dispatch_Entity_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Entity_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Entity_Request.id = id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Entity_Request(soap, &soap_tmp_ns__Dispatch_Entity_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Entity_Request(soap, &soap_tmp_ns__Dispatch_Entity_Request, "ns:Dispatch-Entity-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Entity_Request(soap, &soap_tmp_ns__Dispatch_Entity_Request, "ns:Dispatch-Entity-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Entity_Nofitication(const char *endpoint, const char *soap_action, std::string session_id, ns__Dispatch_Entity_Nofitication_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Entity_Nofitication soap_tmp_ns__Dispatch_Entity_Nofitication;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Entity_Nofitication.session_id = session_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Entity_Nofitication(soap, &soap_tmp_ns__Dispatch_Entity_Nofitication);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Entity_Nofitication(soap, &soap_tmp_ns__Dispatch_Entity_Nofitication, "ns:Dispatch-Entity-Nofitication", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Entity_Nofitication(soap, &soap_tmp_ns__Dispatch_Entity_Nofitication, "ns:Dispatch-Entity-Nofitication", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Append_Group(const char *endpoint, const char *soap_action, std::string session_id, ns__Group group, ns__Dispatch_Append_Group_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Append_Group soap_tmp_ns__Dispatch_Append_Group;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Append_Group.session_id = session_id;
	soap_tmp_ns__Dispatch_Append_Group.group = group;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Append_Group(soap, &soap_tmp_ns__Dispatch_Append_Group);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Append_Group(soap, &soap_tmp_ns__Dispatch_Append_Group, "ns:Dispatch-Append-Group", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Append_Group(soap, &soap_tmp_ns__Dispatch_Append_Group, "ns:Dispatch-Append-Group", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Modify_Group(const char *endpoint, const char *soap_action, std::string session_id, ns__Group group, ns__Dispatch_Modify_Group_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Modify_Group soap_tmp_ns__Dispatch_Modify_Group;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Modify_Group.session_id = session_id;
	soap_tmp_ns__Dispatch_Modify_Group.group = group;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Modify_Group(soap, &soap_tmp_ns__Dispatch_Modify_Group);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Modify_Group(soap, &soap_tmp_ns__Dispatch_Modify_Group, "ns:Dispatch-Modify-Group", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Modify_Group(soap, &soap_tmp_ns__Dispatch_Modify_Group, "ns:Dispatch-Modify-Group", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Modify_Participants(const char *endpoint, const char *soap_action, std::string session_id, ns__Modify_Participant request, ns__Dispatch_Modify_Participants_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Modify_Participants soap_tmp_ns__Dispatch_Modify_Participants;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Modify_Participants.session_id = session_id;
	soap_tmp_ns__Dispatch_Modify_Participants.request = request;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Modify_Participants(soap, &soap_tmp_ns__Dispatch_Modify_Participants);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Modify_Participants(soap, &soap_tmp_ns__Dispatch_Modify_Participants, "ns:Dispatch-Modify-Participants", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Modify_Participants(soap, &soap_tmp_ns__Dispatch_Modify_Participants, "ns:Dispatch-Modify-Participants", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Delete_Group(const char *endpoint, const char *soap_action, std::string session_id, std::string group_id, ns__Normal_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Delete_Group soap_tmp_ns__Dispatch_Delete_Group;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Delete_Group.session_id = session_id;
	soap_tmp_ns__Dispatch_Delete_Group.group_id = group_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Delete_Group(soap, &soap_tmp_ns__Dispatch_Delete_Group);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Delete_Group(soap, &soap_tmp_ns__Dispatch_Delete_Group, "ns:Dispatch-Delete-Group", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Delete_Group(soap, &soap_tmp_ns__Dispatch_Delete_Group, "ns:Dispatch-Delete-Group", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Dispatch_Participants_Notification(const char *endpoint, const char *soap_action, std::string session_id, ns__Dispatch_Dispatch_Participants_Notification_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Dispatch_Participants_Notification soap_tmp_ns__Dispatch_Dispatch_Participants_Notification;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Dispatch_Participants_Notification.session_id = session_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Dispatch_Participants_Notification(soap, &soap_tmp_ns__Dispatch_Dispatch_Participants_Notification);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Dispatch_Participants_Notification(soap, &soap_tmp_ns__Dispatch_Dispatch_Participants_Notification, "ns:Dispatch-Dispatch-Participants-Notification", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Dispatch_Participants_Notification(soap, &soap_tmp_ns__Dispatch_Dispatch_Participants_Notification, "ns:Dispatch-Dispatch-Participants-Notification", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Join_Group_Request_Nofitication(const char *endpoint, const char *soap_action, std::string session_id, ns__Dispatch_Join_Group_Request_Nofitication_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Join_Group_Request_Nofitication soap_tmp_ns__Dispatch_Join_Group_Request_Nofitication;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Join_Group_Request_Nofitication.session_id = session_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Join_Group_Request_Nofitication(soap, &soap_tmp_ns__Dispatch_Join_Group_Request_Nofitication);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Join_Group_Request_Nofitication(soap, &soap_tmp_ns__Dispatch_Join_Group_Request_Nofitication, "ns:Dispatch-Join-Group-Request-Nofitication", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Join_Group_Request_Nofitication(soap, &soap_tmp_ns__Dispatch_Join_Group_Request_Nofitication, "ns:Dispatch-Join-Group-Request-Nofitication", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Participant_Status_Notification(const char *endpoint, const char *soap_action, std::string session_id, ns__Dispatch_Participant_Status_Notification_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Participant_Status_Notification soap_tmp_ns__Dispatch_Participant_Status_Notification;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Participant_Status_Notification.session_id = session_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Participant_Status_Notification(soap, &soap_tmp_ns__Dispatch_Participant_Status_Notification);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Participant_Status_Notification(soap, &soap_tmp_ns__Dispatch_Participant_Status_Notification, "ns:Dispatch-Participant-Status-Notification", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Participant_Status_Notification(soap, &soap_tmp_ns__Dispatch_Participant_Status_Notification, "ns:Dispatch-Participant-Status-Notification", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Media_Message_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string group_id, std::string from_message_id, std::string from_time, std::string max_message_count, ns__Dispatch_Media_Message_Request_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Media_Message_Request soap_tmp_ns__Dispatch_Media_Message_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Media_Message_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Media_Message_Request.group_id = group_id;
	soap_tmp_ns__Dispatch_Media_Message_Request.from_message_id = from_message_id;
	soap_tmp_ns__Dispatch_Media_Message_Request.from_time = from_time;
	soap_tmp_ns__Dispatch_Media_Message_Request.max_message_count = max_message_count;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Media_Message_Request(soap, &soap_tmp_ns__Dispatch_Media_Message_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Media_Message_Request(soap, &soap_tmp_ns__Dispatch_Media_Message_Request, "ns:Dispatch-Media-Message-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Media_Message_Request(soap, &soap_tmp_ns__Dispatch_Media_Message_Request, "ns:Dispatch-Media-Message-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Media_Message_Notification(const char *endpoint, const char *soap_action, std::string session_id, ns__Dispatch_Media_Message_Notification_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Media_Message_Notification soap_tmp_ns__Dispatch_Media_Message_Notification;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Media_Message_Notification.session_id = session_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Media_Message_Notification(soap, &soap_tmp_ns__Dispatch_Media_Message_Notification);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Media_Message_Notification(soap, &soap_tmp_ns__Dispatch_Media_Message_Notification, "ns:Dispatch-Media-Message-Notification", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Media_Message_Notification(soap, &soap_tmp_ns__Dispatch_Media_Message_Notification, "ns:Dispatch-Media-Message-Notification", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Participant_Connect_Request_Notification(const char *endpoint, const char *soap_action, std::string session_id, ns__Dispatch_Participant_Connect_Request_Notification_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Participant_Connect_Request_Notification soap_tmp_ns__Dispatch_Participant_Connect_Request_Notification;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Participant_Connect_Request_Notification.session_id = session_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Participant_Connect_Request_Notification(soap, &soap_tmp_ns__Dispatch_Participant_Connect_Request_Notification);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Participant_Connect_Request_Notification(soap, &soap_tmp_ns__Dispatch_Participant_Connect_Request_Notification, "ns:Dispatch-Participant-Connect-Request-Notification", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Participant_Connect_Request_Notification(soap, &soap_tmp_ns__Dispatch_Participant_Connect_Request_Notification, "ns:Dispatch-Participant-Connect-Request-Notification", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Participant_Speak_Request_Notification(const char *endpoint, const char *soap_action, std::string session_id, ns__Dispatch_Participant_Speak_Request_Notification_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Participant_Speak_Request_Notification soap_tmp_ns__Dispatch_Participant_Speak_Request_Notification;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Participant_Speak_Request_Notification.session_id = session_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Participant_Speak_Request_Notification(soap, &soap_tmp_ns__Dispatch_Participant_Speak_Request_Notification);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Participant_Speak_Request_Notification(soap, &soap_tmp_ns__Dispatch_Participant_Speak_Request_Notification, "ns:Dispatch-Participant-Speak-Request-Notification", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Participant_Speak_Request_Notification(soap, &soap_tmp_ns__Dispatch_Participant_Speak_Request_Notification, "ns:Dispatch-Participant-Speak-Request-Notification", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Invite_Participant_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string group_id, std::string account_id, ns__Normal_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Invite_Participant_Request soap_tmp_ns__Dispatch_Invite_Participant_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Invite_Participant_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Invite_Participant_Request.group_id = group_id;
	soap_tmp_ns__Dispatch_Invite_Participant_Request.account_id = account_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Invite_Participant_Request(soap, &soap_tmp_ns__Dispatch_Invite_Participant_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Invite_Participant_Request(soap, &soap_tmp_ns__Dispatch_Invite_Participant_Request, "ns:Dispatch-Invite-Participant-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Invite_Participant_Request(soap, &soap_tmp_ns__Dispatch_Invite_Participant_Request, "ns:Dispatch-Invite-Participant-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Drop_Participant_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string group_id, std::string account_id, ns__Normal_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Drop_Participant_Request soap_tmp_ns__Dispatch_Drop_Participant_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Drop_Participant_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Drop_Participant_Request.group_id = group_id;
	soap_tmp_ns__Dispatch_Drop_Participant_Request.account_id = account_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Drop_Participant_Request(soap, &soap_tmp_ns__Dispatch_Drop_Participant_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Drop_Participant_Request(soap, &soap_tmp_ns__Dispatch_Drop_Participant_Request, "ns:Dispatch-Drop-Participant-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Drop_Participant_Request(soap, &soap_tmp_ns__Dispatch_Drop_Participant_Request, "ns:Dispatch-Drop-Participant-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Release_Participant_Token_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string group_id, std::string account_id, ns__Normal_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Release_Participant_Token_Request soap_tmp_ns__Dispatch_Release_Participant_Token_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Release_Participant_Token_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Release_Participant_Token_Request.group_id = group_id;
	soap_tmp_ns__Dispatch_Release_Participant_Token_Request.account_id = account_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Release_Participant_Token_Request(soap, &soap_tmp_ns__Dispatch_Release_Participant_Token_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Release_Participant_Token_Request(soap, &soap_tmp_ns__Dispatch_Release_Participant_Token_Request, "ns:Dispatch-Release-Participant-Token-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Release_Participant_Token_Request(soap, &soap_tmp_ns__Dispatch_Release_Participant_Token_Request, "ns:Dispatch-Release-Participant-Token-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Appoint_Participant_Speak_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string group_id, std::string account_id, ns__Normal_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Appoint_Participant_Speak_Request soap_tmp_ns__Dispatch_Appoint_Participant_Speak_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Appoint_Participant_Speak_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Appoint_Participant_Speak_Request.group_id = group_id;
	soap_tmp_ns__Dispatch_Appoint_Participant_Speak_Request.account_id = account_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Appoint_Participant_Speak_Request(soap, &soap_tmp_ns__Dispatch_Appoint_Participant_Speak_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Appoint_Participant_Speak_Request(soap, &soap_tmp_ns__Dispatch_Appoint_Participant_Speak_Request, "ns:Dispatch-Appoint-Participant-Speak-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Appoint_Participant_Speak_Request(soap, &soap_tmp_ns__Dispatch_Appoint_Participant_Speak_Request, "ns:Dispatch-Appoint-Participant-Speak-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Jion_Group_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string group_id, ns__Normal_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Jion_Group_Request soap_tmp_ns__Dispatch_Jion_Group_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Jion_Group_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Jion_Group_Request.group_id = group_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Jion_Group_Request(soap, &soap_tmp_ns__Dispatch_Jion_Group_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Jion_Group_Request(soap, &soap_tmp_ns__Dispatch_Jion_Group_Request, "ns:Dispatch-Jion-Group-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Jion_Group_Request(soap, &soap_tmp_ns__Dispatch_Jion_Group_Request, "ns:Dispatch-Jion-Group-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Leave_Group_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string group_id, ns__Normal_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Leave_Group_Request soap_tmp_ns__Dispatch_Leave_Group_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Leave_Group_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Leave_Group_Request.group_id = group_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Leave_Group_Request(soap, &soap_tmp_ns__Dispatch_Leave_Group_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Leave_Group_Request(soap, &soap_tmp_ns__Dispatch_Leave_Group_Request, "ns:Dispatch-Leave-Group-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Leave_Group_Request(soap, &soap_tmp_ns__Dispatch_Leave_Group_Request, "ns:Dispatch-Leave-Group-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Session_Status_Notification(const char *endpoint, const char *soap_action, std::string session_id, ns__Dispatch_Session_Status_Notification_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Session_Status_Notification soap_tmp_ns__Dispatch_Session_Status_Notification;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Session_Status_Notification.session_id = session_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Session_Status_Notification(soap, &soap_tmp_ns__Dispatch_Session_Status_Notification);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Session_Status_Notification(soap, &soap_tmp_ns__Dispatch_Session_Status_Notification, "ns:Dispatch-Session-Status-Notification", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Session_Status_Notification(soap, &soap_tmp_ns__Dispatch_Session_Status_Notification, "ns:Dispatch-Session-Status-Notification", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Send_Message_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string group_id, ns__MediaMessage mediamessage, ns__Normal_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Send_Message_Request soap_tmp_ns__Dispatch_Send_Message_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Send_Message_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Send_Message_Request.group_id = group_id;
	soap_tmp_ns__Dispatch_Send_Message_Request.mediamessage = mediamessage;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Send_Message_Request(soap, &soap_tmp_ns__Dispatch_Send_Message_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Send_Message_Request(soap, &soap_tmp_ns__Dispatch_Send_Message_Request, "ns:Dispatch-Send-Message-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Send_Message_Request(soap, &soap_tmp_ns__Dispatch_Send_Message_Request, "ns:Dispatch-Send-Message-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Start_Record_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string group_id, ns__Normal_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Start_Record_Request soap_tmp_ns__Dispatch_Start_Record_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Start_Record_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Start_Record_Request.group_id = group_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Start_Record_Request(soap, &soap_tmp_ns__Dispatch_Start_Record_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Start_Record_Request(soap, &soap_tmp_ns__Dispatch_Start_Record_Request, "ns:Dispatch-Start-Record-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Start_Record_Request(soap, &soap_tmp_ns__Dispatch_Start_Record_Request, "ns:Dispatch-Start-Record-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Stop_Record_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string group_id, ns__Normal_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Stop_Record_Request soap_tmp_ns__Dispatch_Stop_Record_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Stop_Record_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Stop_Record_Request.group_id = group_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Stop_Record_Request(soap, &soap_tmp_ns__Dispatch_Stop_Record_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Stop_Record_Request(soap, &soap_tmp_ns__Dispatch_Stop_Record_Request, "ns:Dispatch-Stop-Record-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Stop_Record_Request(soap, &soap_tmp_ns__Dispatch_Stop_Record_Request, "ns:Dispatch-Stop-Record-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Record_Status_Notification(const char *endpoint, const char *soap_action, std::string session_id, ns__Dispatch_Record_Status_Notification_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Record_Status_Notification soap_tmp_ns__Dispatch_Record_Status_Notification;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Record_Status_Notification.session_id = session_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Record_Status_Notification(soap, &soap_tmp_ns__Dispatch_Record_Status_Notification);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Record_Status_Notification(soap, &soap_tmp_ns__Dispatch_Record_Status_Notification, "ns:Dispatch-Record-Status-Notification", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Record_Status_Notification(soap, &soap_tmp_ns__Dispatch_Record_Status_Notification, "ns:Dispatch-Record-Status-Notification", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Subscribe_Account_Info_Request(const char *endpoint, const char *soap_action, std::string session_id, bool subscribing, std::list<std::string >account_id, enum ns__SubscribeType type, std::string ttl, ns__Normal_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Subscribe_Account_Info_Request soap_tmp_ns__Dispatch_Subscribe_Account_Info_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Subscribe_Account_Info_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Subscribe_Account_Info_Request.subscribing = subscribing;
	soap_tmp_ns__Dispatch_Subscribe_Account_Info_Request.account_id = account_id;
	soap_tmp_ns__Dispatch_Subscribe_Account_Info_Request.type = type;
	soap_tmp_ns__Dispatch_Subscribe_Account_Info_Request.ttl = ttl;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Subscribe_Account_Info_Request(soap, &soap_tmp_ns__Dispatch_Subscribe_Account_Info_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Subscribe_Account_Info_Request(soap, &soap_tmp_ns__Dispatch_Subscribe_Account_Info_Request, "ns:Dispatch-Subscribe-Account-Info-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Subscribe_Account_Info_Request(soap, &soap_tmp_ns__Dispatch_Subscribe_Account_Info_Request, "ns:Dispatch-Subscribe-Account-Info-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Account_Info_Notification(const char *endpoint, const char *soap_action, std::string session_id, ns__Dispatch_Account_Info_Notification_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Account_Info_Notification soap_tmp_ns__Dispatch_Account_Info_Notification;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Account_Info_Notification.session_id = session_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Account_Info_Notification(soap, &soap_tmp_ns__Dispatch_Account_Info_Notification);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Account_Info_Notification(soap, &soap_tmp_ns__Dispatch_Account_Info_Notification, "ns:Dispatch-Account-Info-Notification", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Account_Info_Notification(soap, &soap_tmp_ns__Dispatch_Account_Info_Notification, "ns:Dispatch-Account-Info-Notification", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Append_Alert_Request(const char *endpoint, const char *soap_action, std::string session_id, ns__Alert alert, std::list<ns__Account >members, std::string size, ns__Dispatch_Append_Alert_Request_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Append_Alert_Request soap_tmp_ns__Dispatch_Append_Alert_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Append_Alert_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Append_Alert_Request.alert = alert;
	soap_tmp_ns__Dispatch_Append_Alert_Request.members = members;
	soap_tmp_ns__Dispatch_Append_Alert_Request.size = size;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Append_Alert_Request(soap, &soap_tmp_ns__Dispatch_Append_Alert_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Append_Alert_Request(soap, &soap_tmp_ns__Dispatch_Append_Alert_Request, "ns:Dispatch-Append-Alert-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Append_Alert_Request(soap, &soap_tmp_ns__Dispatch_Append_Alert_Request, "ns:Dispatch-Append-Alert-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Modify_Alert_Request(const char *endpoint, const char *soap_action, std::string session_id, ns__Alert alert, ns__Normal_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Modify_Alert_Request soap_tmp_ns__Dispatch_Modify_Alert_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Modify_Alert_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Modify_Alert_Request.alert = alert;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Modify_Alert_Request(soap, &soap_tmp_ns__Dispatch_Modify_Alert_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Modify_Alert_Request(soap, &soap_tmp_ns__Dispatch_Modify_Alert_Request, "ns:Dispatch-Modify-Alert-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Modify_Alert_Request(soap, &soap_tmp_ns__Dispatch_Modify_Alert_Request, "ns:Dispatch-Modify-Alert-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Stop_Alert_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string alert_id, ns__Normal_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Stop_Alert_Request soap_tmp_ns__Dispatch_Stop_Alert_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Stop_Alert_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Stop_Alert_Request.alert_id = alert_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Stop_Alert_Request(soap, &soap_tmp_ns__Dispatch_Stop_Alert_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Stop_Alert_Request(soap, &soap_tmp_ns__Dispatch_Stop_Alert_Request, "ns:Dispatch-Stop-Alert-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Stop_Alert_Request(soap, &soap_tmp_ns__Dispatch_Stop_Alert_Request, "ns:Dispatch-Stop-Alert-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Alert_Overed_Notification(const char *endpoint, const char *soap_action, std::string session_id, ns__Dispatch_Alert_Overed_Notification_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Alert_Overed_Notification soap_tmp_ns__Dispatch_Alert_Overed_Notification;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Alert_Overed_Notification.session_id = session_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Alert_Overed_Notification(soap, &soap_tmp_ns__Dispatch_Alert_Overed_Notification);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Alert_Overed_Notification(soap, &soap_tmp_ns__Dispatch_Alert_Overed_Notification, "ns:Dispatch-Alert-Overed-Notification", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Alert_Overed_Notification(soap, &soap_tmp_ns__Dispatch_Alert_Overed_Notification, "ns:Dispatch-Alert-Overed-Notification", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_History_Alert_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string name, std::string create_time_from, std::string create_time_to, std::string alram_time_from, std::string alram_time_to, std::string over_time_from, std::string over_time_to, ns__Dispatch_History_Alert_Request_Reponse &response)
{	struct soap *soap = this;
	struct ns__Dispatch_History_Alert_Request soap_tmp_ns__Dispatch_History_Alert_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_History_Alert_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_History_Alert_Request.name = name;
	soap_tmp_ns__Dispatch_History_Alert_Request.create_time_from = create_time_from;
	soap_tmp_ns__Dispatch_History_Alert_Request.create_time_to = create_time_to;
	soap_tmp_ns__Dispatch_History_Alert_Request.alram_time_from = alram_time_from;
	soap_tmp_ns__Dispatch_History_Alert_Request.alram_time_to = alram_time_to;
	soap_tmp_ns__Dispatch_History_Alert_Request.over_time_from = over_time_from;
	soap_tmp_ns__Dispatch_History_Alert_Request.over_time_to = over_time_to;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_History_Alert_Request(soap, &soap_tmp_ns__Dispatch_History_Alert_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_History_Alert_Request(soap, &soap_tmp_ns__Dispatch_History_Alert_Request, "ns:Dispatch-History-Alert-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_History_Alert_Request(soap, &soap_tmp_ns__Dispatch_History_Alert_Request, "ns:Dispatch-History-Alert-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Alert_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string alert_id, ns__Dispatch_Alert_Request_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Alert_Request soap_tmp_ns__Dispatch_Alert_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Alert_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Alert_Request.alert_id = alert_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Alert_Request(soap, &soap_tmp_ns__Dispatch_Alert_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Alert_Request(soap, &soap_tmp_ns__Dispatch_Alert_Request, "ns:Dispatch-Alert-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Alert_Request(soap, &soap_tmp_ns__Dispatch_Alert_Request, "ns:Dispatch-Alert-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_History_Alert_Message_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string history_alert_id, std::string from_message_id, std::string from_time, std::string max_message_count, ns__Dispatch_History_Alert_Message_Request_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_History_Alert_Message_Request soap_tmp_ns__Dispatch_History_Alert_Message_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_History_Alert_Message_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_History_Alert_Message_Request.history_alert_id = history_alert_id;
	soap_tmp_ns__Dispatch_History_Alert_Message_Request.from_message_id = from_message_id;
	soap_tmp_ns__Dispatch_History_Alert_Message_Request.from_time = from_time;
	soap_tmp_ns__Dispatch_History_Alert_Message_Request.max_message_count = max_message_count;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_History_Alert_Message_Request(soap, &soap_tmp_ns__Dispatch_History_Alert_Message_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_History_Alert_Message_Request(soap, &soap_tmp_ns__Dispatch_History_Alert_Message_Request, "ns:Dispatch-History-Alert-Message-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_History_Alert_Message_Request(soap, &soap_tmp_ns__Dispatch_History_Alert_Message_Request, "ns:Dispatch-History-Alert-Message-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int xiaofangProxy::Dispatch_Delete_History_Alert_Request(const char *endpoint, const char *soap_action, std::string session_id, std::string history_alert_id, ns__Normal_Response &response)
{	struct soap *soap = this;
	struct ns__Dispatch_Delete_History_Alert_Request soap_tmp_ns__Dispatch_Delete_History_Alert_Request;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.184:18881";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__Dispatch_Delete_History_Alert_Request.session_id = session_id;
	soap_tmp_ns__Dispatch_Delete_History_Alert_Request.history_alert_id = history_alert_id;
	soap_serializeheader(soap);
	soap_serialize_ns__Dispatch_Delete_History_Alert_Request(soap, &soap_tmp_ns__Dispatch_Delete_History_Alert_Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Dispatch_Delete_History_Alert_Request(soap, &soap_tmp_ns__Dispatch_Delete_History_Alert_Request, "ns:Dispatch-Delete-History-Alert-Request", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Dispatch_Delete_History_Alert_Request(soap, &soap_tmp_ns__Dispatch_Delete_History_Alert_Request, "ns:Dispatch-Delete-History-Alert-Request", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	response.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
