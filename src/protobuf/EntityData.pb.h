// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EntityData.proto

#ifndef PROTOBUF_EntityData_2eproto__INCLUDED
#define PROTOBUF_EntityData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "AppData.pb.h"
// @@protoc_insertion_point(includes)

namespace pbmsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EntityData_2eproto();
void protobuf_AssignDesc_EntityData_2eproto();
void protobuf_ShutdownFile_EntityData_2eproto();

class EntityData;

enum EntityNotifyType {
  Created = 0,
  Modify = 1,
  Update = 2,
  Deleted = 3
};
bool EntityNotifyType_IsValid(int value);
const EntityNotifyType EntityNotifyType_MIN = Created;
const EntityNotifyType EntityNotifyType_MAX = Deleted;
const int EntityNotifyType_ARRAYSIZE = EntityNotifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EntityNotifyType_descriptor();
inline const ::std::string& EntityNotifyType_Name(EntityNotifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EntityNotifyType_descriptor(), value);
}
inline bool EntityNotifyType_Parse(
    const ::std::string& name, EntityNotifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EntityNotifyType>(
    EntityNotifyType_descriptor(), name, value);
}
enum ListModifyType {
  Increased = 0,
  Decrease = 1,
  Replace = 2
};
bool ListModifyType_IsValid(int value);
const ListModifyType ListModifyType_MIN = Increased;
const ListModifyType ListModifyType_MAX = Replace;
const int ListModifyType_ARRAYSIZE = ListModifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ListModifyType_descriptor();
inline const ::std::string& ListModifyType_Name(ListModifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ListModifyType_descriptor(), value);
}
inline bool ListModifyType_Parse(
    const ::std::string& name, ListModifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ListModifyType>(
    ListModifyType_descriptor(), name, value);
}
// ===================================================================

class EntityData : public ::google::protobuf::Message {
 public:
  EntityData();
  virtual ~EntityData();

  EntityData(const EntityData& from);

  inline EntityData& operator=(const EntityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityData& default_instance();

  void Swap(EntityData* other);

  // implements Message ----------------------------------------------

  EntityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntityData& from);
  void MergeFrom(const EntityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pbmsg.Entity id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::pbmsg::Entity& id() const;
  inline ::pbmsg::Entity* mutable_id();
  inline ::pbmsg::Entity* release_id();
  inline void set_allocated_id(::pbmsg::Entity* id);

  // optional .pbmsg.Unit unit = 2;
  inline bool has_unit() const;
  inline void clear_unit();
  static const int kUnitFieldNumber = 2;
  inline const ::pbmsg::Unit& unit() const;
  inline ::pbmsg::Unit* mutable_unit();
  inline ::pbmsg::Unit* release_unit();
  inline void set_allocated_unit(::pbmsg::Unit* unit);

  // optional .pbmsg.Account account = 3;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 3;
  inline const ::pbmsg::Account& account() const;
  inline ::pbmsg::Account* mutable_account();
  inline ::pbmsg::Account* release_account();
  inline void set_allocated_account(::pbmsg::Account* account);

  // optional .pbmsg.User user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::pbmsg::User& user() const;
  inline ::pbmsg::User* mutable_user();
  inline ::pbmsg::User* release_user();
  inline void set_allocated_user(::pbmsg::User* user);

  // optional .pbmsg.Group group = 5;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline const ::pbmsg::Group& group() const;
  inline ::pbmsg::Group* mutable_group();
  inline ::pbmsg::Group* release_group();
  inline void set_allocated_group(::pbmsg::Group* group);

  // optional .pbmsg.Alert alert = 6;
  inline bool has_alert() const;
  inline void clear_alert();
  static const int kAlertFieldNumber = 6;
  inline const ::pbmsg::Alert& alert() const;
  inline ::pbmsg::Alert* mutable_alert();
  inline ::pbmsg::Alert* release_alert();
  inline void set_allocated_alert(::pbmsg::Alert* alert);

  // optional .pbmsg.Gateway gateway = 7;
  inline bool has_gateway() const;
  inline void clear_gateway();
  static const int kGatewayFieldNumber = 7;
  inline const ::pbmsg::Gateway& gateway() const;
  inline ::pbmsg::Gateway* mutable_gateway();
  inline ::pbmsg::Gateway* release_gateway();
  inline void set_allocated_gateway(::pbmsg::Gateway* gateway);

  // optional .pbmsg.Organization organization = 8;
  inline bool has_organization() const;
  inline void clear_organization();
  static const int kOrganizationFieldNumber = 8;
  inline const ::pbmsg::Organization& organization() const;
  inline ::pbmsg::Organization* mutable_organization();
  inline ::pbmsg::Organization* release_organization();
  inline void set_allocated_organization(::pbmsg::Organization* organization);

  // @@protoc_insertion_point(class_scope:pbmsg.EntityData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_unit();
  inline void clear_has_unit();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_alert();
  inline void clear_has_alert();
  inline void set_has_gateway();
  inline void clear_has_gateway();
  inline void set_has_organization();
  inline void clear_has_organization();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pbmsg::Entity* id_;
  ::pbmsg::Unit* unit_;
  ::pbmsg::Account* account_;
  ::pbmsg::User* user_;
  ::pbmsg::Group* group_;
  ::pbmsg::Alert* alert_;
  ::pbmsg::Gateway* gateway_;
  ::pbmsg::Organization* organization_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_EntityData_2eproto();
  friend void protobuf_AssignDesc_EntityData_2eproto();
  friend void protobuf_ShutdownFile_EntityData_2eproto();

  void InitAsDefaultInstance();
  static EntityData* default_instance_;
};
// ===================================================================


// ===================================================================

// EntityData

// required .pbmsg.Entity id = 1;
inline bool EntityData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntityData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntityData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntityData::clear_id() {
  if (id_ != NULL) id_->::pbmsg::Entity::Clear();
  clear_has_id();
}
inline const ::pbmsg::Entity& EntityData::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::pbmsg::Entity* EntityData::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::pbmsg::Entity;
  return id_;
}
inline ::pbmsg::Entity* EntityData::release_id() {
  clear_has_id();
  ::pbmsg::Entity* temp = id_;
  id_ = NULL;
  return temp;
}
inline void EntityData::set_allocated_id(::pbmsg::Entity* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
}

// optional .pbmsg.Unit unit = 2;
inline bool EntityData::has_unit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntityData::set_has_unit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EntityData::clear_has_unit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EntityData::clear_unit() {
  if (unit_ != NULL) unit_->::pbmsg::Unit::Clear();
  clear_has_unit();
}
inline const ::pbmsg::Unit& EntityData::unit() const {
  return unit_ != NULL ? *unit_ : *default_instance_->unit_;
}
inline ::pbmsg::Unit* EntityData::mutable_unit() {
  set_has_unit();
  if (unit_ == NULL) unit_ = new ::pbmsg::Unit;
  return unit_;
}
inline ::pbmsg::Unit* EntityData::release_unit() {
  clear_has_unit();
  ::pbmsg::Unit* temp = unit_;
  unit_ = NULL;
  return temp;
}
inline void EntityData::set_allocated_unit(::pbmsg::Unit* unit) {
  delete unit_;
  unit_ = unit;
  if (unit) {
    set_has_unit();
  } else {
    clear_has_unit();
  }
}

// optional .pbmsg.Account account = 3;
inline bool EntityData::has_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EntityData::set_has_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EntityData::clear_has_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EntityData::clear_account() {
  if (account_ != NULL) account_->::pbmsg::Account::Clear();
  clear_has_account();
}
inline const ::pbmsg::Account& EntityData::account() const {
  return account_ != NULL ? *account_ : *default_instance_->account_;
}
inline ::pbmsg::Account* EntityData::mutable_account() {
  set_has_account();
  if (account_ == NULL) account_ = new ::pbmsg::Account;
  return account_;
}
inline ::pbmsg::Account* EntityData::release_account() {
  clear_has_account();
  ::pbmsg::Account* temp = account_;
  account_ = NULL;
  return temp;
}
inline void EntityData::set_allocated_account(::pbmsg::Account* account) {
  delete account_;
  account_ = account;
  if (account) {
    set_has_account();
  } else {
    clear_has_account();
  }
}

// optional .pbmsg.User user = 4;
inline bool EntityData::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EntityData::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EntityData::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EntityData::clear_user() {
  if (user_ != NULL) user_->::pbmsg::User::Clear();
  clear_has_user();
}
inline const ::pbmsg::User& EntityData::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::pbmsg::User* EntityData::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::pbmsg::User;
  return user_;
}
inline ::pbmsg::User* EntityData::release_user() {
  clear_has_user();
  ::pbmsg::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void EntityData::set_allocated_user(::pbmsg::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// optional .pbmsg.Group group = 5;
inline bool EntityData::has_group() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EntityData::set_has_group() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EntityData::clear_has_group() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EntityData::clear_group() {
  if (group_ != NULL) group_->::pbmsg::Group::Clear();
  clear_has_group();
}
inline const ::pbmsg::Group& EntityData::group() const {
  return group_ != NULL ? *group_ : *default_instance_->group_;
}
inline ::pbmsg::Group* EntityData::mutable_group() {
  set_has_group();
  if (group_ == NULL) group_ = new ::pbmsg::Group;
  return group_;
}
inline ::pbmsg::Group* EntityData::release_group() {
  clear_has_group();
  ::pbmsg::Group* temp = group_;
  group_ = NULL;
  return temp;
}
inline void EntityData::set_allocated_group(::pbmsg::Group* group) {
  delete group_;
  group_ = group;
  if (group) {
    set_has_group();
  } else {
    clear_has_group();
  }
}

// optional .pbmsg.Alert alert = 6;
inline bool EntityData::has_alert() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EntityData::set_has_alert() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EntityData::clear_has_alert() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EntityData::clear_alert() {
  if (alert_ != NULL) alert_->::pbmsg::Alert::Clear();
  clear_has_alert();
}
inline const ::pbmsg::Alert& EntityData::alert() const {
  return alert_ != NULL ? *alert_ : *default_instance_->alert_;
}
inline ::pbmsg::Alert* EntityData::mutable_alert() {
  set_has_alert();
  if (alert_ == NULL) alert_ = new ::pbmsg::Alert;
  return alert_;
}
inline ::pbmsg::Alert* EntityData::release_alert() {
  clear_has_alert();
  ::pbmsg::Alert* temp = alert_;
  alert_ = NULL;
  return temp;
}
inline void EntityData::set_allocated_alert(::pbmsg::Alert* alert) {
  delete alert_;
  alert_ = alert;
  if (alert) {
    set_has_alert();
  } else {
    clear_has_alert();
  }
}

// optional .pbmsg.Gateway gateway = 7;
inline bool EntityData::has_gateway() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EntityData::set_has_gateway() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EntityData::clear_has_gateway() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EntityData::clear_gateway() {
  if (gateway_ != NULL) gateway_->::pbmsg::Gateway::Clear();
  clear_has_gateway();
}
inline const ::pbmsg::Gateway& EntityData::gateway() const {
  return gateway_ != NULL ? *gateway_ : *default_instance_->gateway_;
}
inline ::pbmsg::Gateway* EntityData::mutable_gateway() {
  set_has_gateway();
  if (gateway_ == NULL) gateway_ = new ::pbmsg::Gateway;
  return gateway_;
}
inline ::pbmsg::Gateway* EntityData::release_gateway() {
  clear_has_gateway();
  ::pbmsg::Gateway* temp = gateway_;
  gateway_ = NULL;
  return temp;
}
inline void EntityData::set_allocated_gateway(::pbmsg::Gateway* gateway) {
  delete gateway_;
  gateway_ = gateway;
  if (gateway) {
    set_has_gateway();
  } else {
    clear_has_gateway();
  }
}

// optional .pbmsg.Organization organization = 8;
inline bool EntityData::has_organization() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EntityData::set_has_organization() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EntityData::clear_has_organization() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EntityData::clear_organization() {
  if (organization_ != NULL) organization_->::pbmsg::Organization::Clear();
  clear_has_organization();
}
inline const ::pbmsg::Organization& EntityData::organization() const {
  return organization_ != NULL ? *organization_ : *default_instance_->organization_;
}
inline ::pbmsg::Organization* EntityData::mutable_organization() {
  set_has_organization();
  if (organization_ == NULL) organization_ = new ::pbmsg::Organization;
  return organization_;
}
inline ::pbmsg::Organization* EntityData::release_organization() {
  clear_has_organization();
  ::pbmsg::Organization* temp = organization_;
  organization_ = NULL;
  return temp;
}
inline void EntityData::set_allocated_organization(::pbmsg::Organization* organization) {
  delete organization_;
  organization_ = organization;
  if (organization) {
    set_has_organization();
  } else {
    clear_has_organization();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbmsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbmsg::EntityNotifyType>() {
  return ::pbmsg::EntityNotifyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbmsg::ListModifyType>() {
  return ::pbmsg::ListModifyType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EntityData_2eproto__INCLUDED
