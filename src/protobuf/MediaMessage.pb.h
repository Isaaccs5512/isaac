// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MediaMessage.proto

#ifndef PROTOBUF_MediaMessage_2eproto__INCLUDED
#define PROTOBUF_MediaMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pbmsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MediaMessage_2eproto();
void protobuf_AssignDesc_MediaMessage_2eproto();
void protobuf_ShutdownFile_MediaMessage_2eproto();

class MediaMessage;

// ===================================================================

class MediaMessage : public ::google::protobuf::Message {
 public:
  MediaMessage();
  virtual ~MediaMessage();

  MediaMessage(const MediaMessage& from);

  inline MediaMessage& operator=(const MediaMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaMessage& default_instance();

  void Swap(MediaMessage* other);

  // implements Message ----------------------------------------------

  MediaMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaMessage& from);
  void MergeFrom(const MediaMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional bytes sender = 2;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 2;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const void* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // optional bytes text = 3;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional bytes picture_uri = 4;
  inline bool has_picture_uri() const;
  inline void clear_picture_uri();
  static const int kPictureUriFieldNumber = 4;
  inline const ::std::string& picture_uri() const;
  inline void set_picture_uri(const ::std::string& value);
  inline void set_picture_uri(const char* value);
  inline void set_picture_uri(const void* value, size_t size);
  inline ::std::string* mutable_picture_uri();
  inline ::std::string* release_picture_uri();
  inline void set_allocated_picture_uri(::std::string* picture_uri);

  // optional bytes audio_uri = 5;
  inline bool has_audio_uri() const;
  inline void clear_audio_uri();
  static const int kAudioUriFieldNumber = 5;
  inline const ::std::string& audio_uri() const;
  inline void set_audio_uri(const ::std::string& value);
  inline void set_audio_uri(const char* value);
  inline void set_audio_uri(const void* value, size_t size);
  inline ::std::string* mutable_audio_uri();
  inline ::std::string* release_audio_uri();
  inline void set_allocated_audio_uri(::std::string* audio_uri);

  // optional fixed32 audio_length = 6;
  inline bool has_audio_length() const;
  inline void clear_audio_length();
  static const int kAudioLengthFieldNumber = 6;
  inline ::google::protobuf::uint32 audio_length() const;
  inline void set_audio_length(::google::protobuf::uint32 value);

  // optional bytes video_uri = 7;
  inline bool has_video_uri() const;
  inline void clear_video_uri();
  static const int kVideoUriFieldNumber = 7;
  inline const ::std::string& video_uri() const;
  inline void set_video_uri(const ::std::string& value);
  inline void set_video_uri(const char* value);
  inline void set_video_uri(const void* value, size_t size);
  inline ::std::string* mutable_video_uri();
  inline ::std::string* release_video_uri();
  inline void set_allocated_video_uri(::std::string* video_uri);

  // optional fixed32 video_length = 8;
  inline bool has_video_length() const;
  inline void clear_video_length();
  static const int kVideoLengthFieldNumber = 8;
  inline ::google::protobuf::uint32 video_length() const;
  inline void set_video_length(::google::protobuf::uint32 value);

  // optional bytes timestamp = 9;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const void* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // @@protoc_insertion_point(class_scope:pbmsg.MediaMessage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_picture_uri();
  inline void clear_has_picture_uri();
  inline void set_has_audio_uri();
  inline void clear_has_audio_uri();
  inline void set_has_audio_length();
  inline void clear_has_audio_length();
  inline void set_has_video_uri();
  inline void clear_has_video_uri();
  inline void set_has_video_length();
  inline void clear_has_video_length();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sender_;
  ::std::string* text_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 audio_length_;
  ::std::string* picture_uri_;
  ::std::string* audio_uri_;
  ::std::string* video_uri_;
  ::std::string* timestamp_;
  ::google::protobuf::uint32 video_length_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_MediaMessage_2eproto();
  friend void protobuf_AssignDesc_MediaMessage_2eproto();
  friend void protobuf_ShutdownFile_MediaMessage_2eproto();

  void InitAsDefaultInstance();
  static MediaMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// MediaMessage

// optional fixed32 id = 1;
inline bool MediaMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaMessage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MediaMessage::id() const {
  return id_;
}
inline void MediaMessage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes sender = 2;
inline bool MediaMessage::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaMessage::set_has_sender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaMessage::clear_has_sender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaMessage::clear_sender() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& MediaMessage::sender() const {
  return *sender_;
}
inline void MediaMessage::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void MediaMessage::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void MediaMessage::set_sender(const void* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaMessage::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  return sender_;
}
inline ::std::string* MediaMessage::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaMessage::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes text = 3;
inline bool MediaMessage::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaMessage::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MediaMessage::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MediaMessage::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& MediaMessage::text() const {
  return *text_;
}
inline void MediaMessage::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void MediaMessage::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void MediaMessage::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaMessage::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* MediaMessage::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaMessage::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes picture_uri = 4;
inline bool MediaMessage::has_picture_uri() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MediaMessage::set_has_picture_uri() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MediaMessage::clear_has_picture_uri() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MediaMessage::clear_picture_uri() {
  if (picture_uri_ != &::google::protobuf::internal::kEmptyString) {
    picture_uri_->clear();
  }
  clear_has_picture_uri();
}
inline const ::std::string& MediaMessage::picture_uri() const {
  return *picture_uri_;
}
inline void MediaMessage::set_picture_uri(const ::std::string& value) {
  set_has_picture_uri();
  if (picture_uri_ == &::google::protobuf::internal::kEmptyString) {
    picture_uri_ = new ::std::string;
  }
  picture_uri_->assign(value);
}
inline void MediaMessage::set_picture_uri(const char* value) {
  set_has_picture_uri();
  if (picture_uri_ == &::google::protobuf::internal::kEmptyString) {
    picture_uri_ = new ::std::string;
  }
  picture_uri_->assign(value);
}
inline void MediaMessage::set_picture_uri(const void* value, size_t size) {
  set_has_picture_uri();
  if (picture_uri_ == &::google::protobuf::internal::kEmptyString) {
    picture_uri_ = new ::std::string;
  }
  picture_uri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaMessage::mutable_picture_uri() {
  set_has_picture_uri();
  if (picture_uri_ == &::google::protobuf::internal::kEmptyString) {
    picture_uri_ = new ::std::string;
  }
  return picture_uri_;
}
inline ::std::string* MediaMessage::release_picture_uri() {
  clear_has_picture_uri();
  if (picture_uri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picture_uri_;
    picture_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaMessage::set_allocated_picture_uri(::std::string* picture_uri) {
  if (picture_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete picture_uri_;
  }
  if (picture_uri) {
    set_has_picture_uri();
    picture_uri_ = picture_uri;
  } else {
    clear_has_picture_uri();
    picture_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes audio_uri = 5;
inline bool MediaMessage::has_audio_uri() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MediaMessage::set_has_audio_uri() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MediaMessage::clear_has_audio_uri() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MediaMessage::clear_audio_uri() {
  if (audio_uri_ != &::google::protobuf::internal::kEmptyString) {
    audio_uri_->clear();
  }
  clear_has_audio_uri();
}
inline const ::std::string& MediaMessage::audio_uri() const {
  return *audio_uri_;
}
inline void MediaMessage::set_audio_uri(const ::std::string& value) {
  set_has_audio_uri();
  if (audio_uri_ == &::google::protobuf::internal::kEmptyString) {
    audio_uri_ = new ::std::string;
  }
  audio_uri_->assign(value);
}
inline void MediaMessage::set_audio_uri(const char* value) {
  set_has_audio_uri();
  if (audio_uri_ == &::google::protobuf::internal::kEmptyString) {
    audio_uri_ = new ::std::string;
  }
  audio_uri_->assign(value);
}
inline void MediaMessage::set_audio_uri(const void* value, size_t size) {
  set_has_audio_uri();
  if (audio_uri_ == &::google::protobuf::internal::kEmptyString) {
    audio_uri_ = new ::std::string;
  }
  audio_uri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaMessage::mutable_audio_uri() {
  set_has_audio_uri();
  if (audio_uri_ == &::google::protobuf::internal::kEmptyString) {
    audio_uri_ = new ::std::string;
  }
  return audio_uri_;
}
inline ::std::string* MediaMessage::release_audio_uri() {
  clear_has_audio_uri();
  if (audio_uri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = audio_uri_;
    audio_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaMessage::set_allocated_audio_uri(::std::string* audio_uri) {
  if (audio_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete audio_uri_;
  }
  if (audio_uri) {
    set_has_audio_uri();
    audio_uri_ = audio_uri;
  } else {
    clear_has_audio_uri();
    audio_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed32 audio_length = 6;
inline bool MediaMessage::has_audio_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MediaMessage::set_has_audio_length() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MediaMessage::clear_has_audio_length() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MediaMessage::clear_audio_length() {
  audio_length_ = 0u;
  clear_has_audio_length();
}
inline ::google::protobuf::uint32 MediaMessage::audio_length() const {
  return audio_length_;
}
inline void MediaMessage::set_audio_length(::google::protobuf::uint32 value) {
  set_has_audio_length();
  audio_length_ = value;
}

// optional bytes video_uri = 7;
inline bool MediaMessage::has_video_uri() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MediaMessage::set_has_video_uri() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MediaMessage::clear_has_video_uri() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MediaMessage::clear_video_uri() {
  if (video_uri_ != &::google::protobuf::internal::kEmptyString) {
    video_uri_->clear();
  }
  clear_has_video_uri();
}
inline const ::std::string& MediaMessage::video_uri() const {
  return *video_uri_;
}
inline void MediaMessage::set_video_uri(const ::std::string& value) {
  set_has_video_uri();
  if (video_uri_ == &::google::protobuf::internal::kEmptyString) {
    video_uri_ = new ::std::string;
  }
  video_uri_->assign(value);
}
inline void MediaMessage::set_video_uri(const char* value) {
  set_has_video_uri();
  if (video_uri_ == &::google::protobuf::internal::kEmptyString) {
    video_uri_ = new ::std::string;
  }
  video_uri_->assign(value);
}
inline void MediaMessage::set_video_uri(const void* value, size_t size) {
  set_has_video_uri();
  if (video_uri_ == &::google::protobuf::internal::kEmptyString) {
    video_uri_ = new ::std::string;
  }
  video_uri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaMessage::mutable_video_uri() {
  set_has_video_uri();
  if (video_uri_ == &::google::protobuf::internal::kEmptyString) {
    video_uri_ = new ::std::string;
  }
  return video_uri_;
}
inline ::std::string* MediaMessage::release_video_uri() {
  clear_has_video_uri();
  if (video_uri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = video_uri_;
    video_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaMessage::set_allocated_video_uri(::std::string* video_uri) {
  if (video_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete video_uri_;
  }
  if (video_uri) {
    set_has_video_uri();
    video_uri_ = video_uri;
  } else {
    clear_has_video_uri();
    video_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed32 video_length = 8;
inline bool MediaMessage::has_video_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MediaMessage::set_has_video_length() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MediaMessage::clear_has_video_length() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MediaMessage::clear_video_length() {
  video_length_ = 0u;
  clear_has_video_length();
}
inline ::google::protobuf::uint32 MediaMessage::video_length() const {
  return video_length_;
}
inline void MediaMessage::set_video_length(::google::protobuf::uint32 value) {
  set_has_video_length();
  video_length_ = value;
}

// optional bytes timestamp = 9;
inline bool MediaMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MediaMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MediaMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MediaMessage::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& MediaMessage::timestamp() const {
  return *timestamp_;
}
inline void MediaMessage::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void MediaMessage::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void MediaMessage::set_timestamp(const void* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaMessage::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* MediaMessage::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaMessage::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbmsg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MediaMessage_2eproto__INCLUDED
