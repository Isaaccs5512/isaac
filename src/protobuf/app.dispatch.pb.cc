// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app.dispatch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "app.dispatch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace dispatch {

namespace {

const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityStatusNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityStatusNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyParticipantsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyParticipantsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyParticipantsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyParticipantsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParticipantsNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParticipantsNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinGroupRequestNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinGroupRequestNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParticipantStatusNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParticipantStatusNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaMessageNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaMessageNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParticipantConnectRequestNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParticipantConnectRequestNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParticipantSpeakRequestNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParticipantSpeakRequestNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteParticipantRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteParticipantRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropParticipantRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropParticipantRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReleaseParticipantTokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReleaseParticipantTokenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppointParticipantSpeakRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppointParticipantSpeakRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JionGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JionGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionStatusNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionStatusNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickParticipantRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickParticipantRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartRecordRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopRecordRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordStatusNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordStatusNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeAccountLocationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeAccountLocationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLocationNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLocationNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendAlertRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendAlertRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendAlertResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendAlertResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyAlertRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyAlertRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopAlertRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopAlertRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlertOveredNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlertOveredNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryAlertsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryAlertsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryAlertsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryAlertsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryAlertRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryAlertRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryAlertResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryAlertResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryAlertMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryAlertMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryAlertMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryAlertMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteHistoryAlertRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteHistoryAlertRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveUnitNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveUnitNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Indication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Indication_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_app_2edispatch_2eproto() {
  protobuf_AddDesc_app_2edispatch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "app.dispatch.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRequest_descriptor_ = file->message_type(0);
  static const int LoginRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, password_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  LoginResponse_descriptor_ = file->message_type(1);
  static const int LoginResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, poc_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, poc_outbound_),
  };
  LoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResponse));
  EntityRequest_descriptor_ = file->message_type(2);
  static const int EntityRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityRequest, id_),
  };
  EntityRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntityRequest_descriptor_,
      EntityRequest::default_instance_,
      EntityRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntityRequest));
  EntityResponse_descriptor_ = file->message_type(3);
  static const int EntityResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityResponse, data_),
  };
  EntityResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntityResponse_descriptor_,
      EntityResponse::default_instance_,
      EntityResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntityResponse));
  EntityNotification_descriptor_ = file->message_type(4);
  static const int EntityNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityNotification, notify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityNotification, data_),
  };
  EntityNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntityNotification_descriptor_,
      EntityNotification::default_instance_,
      EntityNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntityNotification));
  EntityStatusNotification_descriptor_ = file->message_type(5);
  static const int EntityStatusNotification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityStatusNotification, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityStatusNotification, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityStatusNotification, sip_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityStatusNotification, custom_status_),
  };
  EntityStatusNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntityStatusNotification_descriptor_,
      EntityStatusNotification::default_instance_,
      EntityStatusNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityStatusNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityStatusNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntityStatusNotification));
  AppendGroupRequest_descriptor_ = file->message_type(6);
  static const int AppendGroupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendGroupRequest, group_),
  };
  AppendGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendGroupRequest_descriptor_,
      AppendGroupRequest::default_instance_,
      AppendGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendGroupRequest));
  AppendGroupResponse_descriptor_ = file->message_type(7);
  static const int AppendGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendGroupResponse, group_),
  };
  AppendGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendGroupResponse_descriptor_,
      AppendGroupResponse::default_instance_,
      AppendGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendGroupResponse));
  ModifyGroupRequest_descriptor_ = file->message_type(8);
  static const int ModifyGroupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyGroupRequest, group_),
  };
  ModifyGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyGroupRequest_descriptor_,
      ModifyGroupRequest::default_instance_,
      ModifyGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyGroupRequest));
  ModifyGroupResponse_descriptor_ = file->message_type(9);
  static const int ModifyGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyGroupResponse, group_),
  };
  ModifyGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyGroupResponse_descriptor_,
      ModifyGroupResponse::default_instance_,
      ModifyGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyGroupResponse));
  ModifyParticipantsRequest_descriptor_ = file->message_type(10);
  static const int ModifyParticipantsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyParticipantsRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyParticipantsRequest, modify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyParticipantsRequest, particiapnts_),
  };
  ModifyParticipantsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyParticipantsRequest_descriptor_,
      ModifyParticipantsRequest::default_instance_,
      ModifyParticipantsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyParticipantsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyParticipantsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyParticipantsRequest));
  ModifyParticipantsResponse_descriptor_ = file->message_type(11);
  static const int ModifyParticipantsResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyParticipantsResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyParticipantsResponse, modify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyParticipantsResponse, particiapnts_),
  };
  ModifyParticipantsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyParticipantsResponse_descriptor_,
      ModifyParticipantsResponse::default_instance_,
      ModifyParticipantsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyParticipantsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyParticipantsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyParticipantsResponse));
  ParticipantsNotification_descriptor_ = file->message_type(12);
  static const int ParticipantsNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantsNotification, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantsNotification, modify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantsNotification, particiapnts_),
  };
  ParticipantsNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParticipantsNotification_descriptor_,
      ParticipantsNotification::default_instance_,
      ParticipantsNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantsNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantsNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParticipantsNotification));
  JoinGroupRequestNotification_descriptor_ = file->message_type(13);
  static const int JoinGroupRequestNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRequestNotification, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRequestNotification, account_id_),
  };
  JoinGroupRequestNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinGroupRequestNotification_descriptor_,
      JoinGroupRequestNotification::default_instance_,
      JoinGroupRequestNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRequestNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRequestNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinGroupRequestNotification));
  ParticipantStatusNotification_descriptor_ = file->message_type(14);
  static const int ParticipantStatusNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantStatusNotification, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantStatusNotification, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantStatusNotification, status_),
  };
  ParticipantStatusNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParticipantStatusNotification_descriptor_,
      ParticipantStatusNotification::default_instance_,
      ParticipantStatusNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantStatusNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantStatusNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParticipantStatusNotification));
  MediaMessageRequest_descriptor_ = file->message_type(15);
  static const int MediaMessageRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageRequest, from_message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageRequest, from_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageRequest, max_message_count_),
  };
  MediaMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaMessageRequest_descriptor_,
      MediaMessageRequest::default_instance_,
      MediaMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaMessageRequest));
  MediaMessageResponse_descriptor_ = file->message_type(16);
  static const int MediaMessageResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageResponse, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageResponse, leave_message_count_),
  };
  MediaMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaMessageResponse_descriptor_,
      MediaMessageResponse::default_instance_,
      MediaMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaMessageResponse));
  MediaMessageNotification_descriptor_ = file->message_type(17);
  static const int MediaMessageNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageNotification, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageNotification, msg_),
  };
  MediaMessageNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaMessageNotification_descriptor_,
      MediaMessageNotification::default_instance_,
      MediaMessageNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaMessageNotification));
  ParticipantConnectRequestNotification_descriptor_ = file->message_type(18);
  static const int ParticipantConnectRequestNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantConnectRequestNotification, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantConnectRequestNotification, account_id_),
  };
  ParticipantConnectRequestNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParticipantConnectRequestNotification_descriptor_,
      ParticipantConnectRequestNotification::default_instance_,
      ParticipantConnectRequestNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantConnectRequestNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantConnectRequestNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParticipantConnectRequestNotification));
  ParticipantSpeakRequestNotification_descriptor_ = file->message_type(19);
  static const int ParticipantSpeakRequestNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSpeakRequestNotification, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSpeakRequestNotification, account_id_),
  };
  ParticipantSpeakRequestNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParticipantSpeakRequestNotification_descriptor_,
      ParticipantSpeakRequestNotification::default_instance_,
      ParticipantSpeakRequestNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSpeakRequestNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSpeakRequestNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParticipantSpeakRequestNotification));
  InviteParticipantRequest_descriptor_ = file->message_type(20);
  static const int InviteParticipantRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteParticipantRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteParticipantRequest, account_id_),
  };
  InviteParticipantRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteParticipantRequest_descriptor_,
      InviteParticipantRequest::default_instance_,
      InviteParticipantRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteParticipantRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteParticipantRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteParticipantRequest));
  DropParticipantRequest_descriptor_ = file->message_type(21);
  static const int DropParticipantRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropParticipantRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropParticipantRequest, account_id_),
  };
  DropParticipantRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropParticipantRequest_descriptor_,
      DropParticipantRequest::default_instance_,
      DropParticipantRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropParticipantRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropParticipantRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropParticipantRequest));
  ReleaseParticipantTokenRequest_descriptor_ = file->message_type(22);
  static const int ReleaseParticipantTokenRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseParticipantTokenRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseParticipantTokenRequest, account_id_),
  };
  ReleaseParticipantTokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReleaseParticipantTokenRequest_descriptor_,
      ReleaseParticipantTokenRequest::default_instance_,
      ReleaseParticipantTokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseParticipantTokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseParticipantTokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReleaseParticipantTokenRequest));
  AppointParticipantSpeakRequest_descriptor_ = file->message_type(23);
  static const int AppointParticipantSpeakRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointParticipantSpeakRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointParticipantSpeakRequest, account_id_),
  };
  AppointParticipantSpeakRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppointParticipantSpeakRequest_descriptor_,
      AppointParticipantSpeakRequest::default_instance_,
      AppointParticipantSpeakRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointParticipantSpeakRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointParticipantSpeakRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppointParticipantSpeakRequest));
  JionGroupRequest_descriptor_ = file->message_type(24);
  static const int JionGroupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JionGroupRequest, group_id_),
  };
  JionGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JionGroupRequest_descriptor_,
      JionGroupRequest::default_instance_,
      JionGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JionGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JionGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JionGroupRequest));
  LeaveGroupRequest_descriptor_ = file->message_type(25);
  static const int LeaveGroupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroupRequest, group_id_),
  };
  LeaveGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveGroupRequest_descriptor_,
      LeaveGroupRequest::default_instance_,
      LeaveGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveGroupRequest));
  SessionStatusNotification_descriptor_ = file->message_type(26);
  static const int SessionStatusNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStatusNotification, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStatusNotification, status_),
  };
  SessionStatusNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionStatusNotification_descriptor_,
      SessionStatusNotification::default_instance_,
      SessionStatusNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStatusNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStatusNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionStatusNotification));
  SendMessageRequest_descriptor_ = file->message_type(27);
  static const int SendMessageRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, msg_),
  };
  SendMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMessageRequest_descriptor_,
      SendMessageRequest::default_instance_,
      SendMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMessageRequest));
  KickParticipantRequest_descriptor_ = file->message_type(28);
  static const int KickParticipantRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickParticipantRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickParticipantRequest, account_id_),
  };
  KickParticipantRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickParticipantRequest_descriptor_,
      KickParticipantRequest::default_instance_,
      KickParticipantRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickParticipantRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickParticipantRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickParticipantRequest));
  StartRecordRequest_descriptor_ = file->message_type(29);
  static const int StartRecordRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRecordRequest, group_id_),
  };
  StartRecordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartRecordRequest_descriptor_,
      StartRecordRequest::default_instance_,
      StartRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRecordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRecordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartRecordRequest));
  StopRecordRequest_descriptor_ = file->message_type(30);
  static const int StopRecordRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopRecordRequest, group_id_),
  };
  StopRecordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopRecordRequest_descriptor_,
      StopRecordRequest::default_instance_,
      StopRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopRecordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopRecordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopRecordRequest));
  RecordStatusNotification_descriptor_ = file->message_type(31);
  static const int RecordStatusNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordStatusNotification, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordStatusNotification, recording_),
  };
  RecordStatusNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordStatusNotification_descriptor_,
      RecordStatusNotification::default_instance_,
      RecordStatusNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordStatusNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordStatusNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordStatusNotification));
  SubscribeAccountLocationRequest_descriptor_ = file->message_type(32);
  static const int SubscribeAccountLocationRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeAccountLocationRequest, subscribing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeAccountLocationRequest, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeAccountLocationRequest, ttl_),
  };
  SubscribeAccountLocationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeAccountLocationRequest_descriptor_,
      SubscribeAccountLocationRequest::default_instance_,
      SubscribeAccountLocationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeAccountLocationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeAccountLocationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeAccountLocationRequest));
  AccountLocationNotification_descriptor_ = file->message_type(33);
  static const int AccountLocationNotification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLocationNotification, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLocationNotification, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLocationNotification, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLocationNotification, timestamp_),
  };
  AccountLocationNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLocationNotification_descriptor_,
      AccountLocationNotification::default_instance_,
      AccountLocationNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLocationNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLocationNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLocationNotification));
  AppendAlertRequest_descriptor_ = file->message_type(34);
  static const int AppendAlertRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendAlertRequest, alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendAlertRequest, members_),
  };
  AppendAlertRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendAlertRequest_descriptor_,
      AppendAlertRequest::default_instance_,
      AppendAlertRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendAlertRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendAlertRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendAlertRequest));
  AppendAlertResponse_descriptor_ = file->message_type(35);
  static const int AppendAlertResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendAlertResponse, alert_),
  };
  AppendAlertResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendAlertResponse_descriptor_,
      AppendAlertResponse::default_instance_,
      AppendAlertResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendAlertResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendAlertResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendAlertResponse));
  ModifyAlertRequest_descriptor_ = file->message_type(36);
  static const int ModifyAlertRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyAlertRequest, alert_),
  };
  ModifyAlertRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyAlertRequest_descriptor_,
      ModifyAlertRequest::default_instance_,
      ModifyAlertRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyAlertRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyAlertRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyAlertRequest));
  StopAlertRequest_descriptor_ = file->message_type(37);
  static const int StopAlertRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAlertRequest, alert_id_),
  };
  StopAlertRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopAlertRequest_descriptor_,
      StopAlertRequest::default_instance_,
      StopAlertRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAlertRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAlertRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopAlertRequest));
  AlertOveredNotification_descriptor_ = file->message_type(38);
  static const int AlertOveredNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertOveredNotification, alert_id_),
  };
  AlertOveredNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlertOveredNotification_descriptor_,
      AlertOveredNotification::default_instance_,
      AlertOveredNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertOveredNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertOveredNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlertOveredNotification));
  HistoryAlertsRequest_descriptor_ = file->message_type(39);
  static const int HistoryAlertsRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, create_time_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, create_time_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, alram_time_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, alram_time_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, over_time_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, over_time_to_),
  };
  HistoryAlertsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryAlertsRequest_descriptor_,
      HistoryAlertsRequest::default_instance_,
      HistoryAlertsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryAlertsRequest));
  HistoryAlertsResponse_descriptor_ = file->message_type(40);
  static const int HistoryAlertsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsResponse, history_alerts_),
  };
  HistoryAlertsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryAlertsResponse_descriptor_,
      HistoryAlertsResponse::default_instance_,
      HistoryAlertsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryAlertsResponse));
  HistoryAlertRequest_descriptor_ = file->message_type(41);
  static const int HistoryAlertRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertRequest, history_alert_id_),
  };
  HistoryAlertRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryAlertRequest_descriptor_,
      HistoryAlertRequest::default_instance_,
      HistoryAlertRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryAlertRequest));
  HistoryAlertResponse_descriptor_ = file->message_type(42);
  static const int HistoryAlertResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertResponse, history_alert_),
  };
  HistoryAlertResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryAlertResponse_descriptor_,
      HistoryAlertResponse::default_instance_,
      HistoryAlertResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryAlertResponse));
  HistoryAlertMessageRequest_descriptor_ = file->message_type(43);
  static const int HistoryAlertMessageRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageRequest, history_alert_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageRequest, from_message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageRequest, from_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageRequest, max_message_count_),
  };
  HistoryAlertMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryAlertMessageRequest_descriptor_,
      HistoryAlertMessageRequest::default_instance_,
      HistoryAlertMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryAlertMessageRequest));
  HistoryAlertMessageResponse_descriptor_ = file->message_type(44);
  static const int HistoryAlertMessageResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageResponse, history_alert_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageResponse, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageResponse, leave_message_count_),
  };
  HistoryAlertMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryAlertMessageResponse_descriptor_,
      HistoryAlertMessageResponse::default_instance_,
      HistoryAlertMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryAlertMessageResponse));
  DeleteHistoryAlertRequest_descriptor_ = file->message_type(45);
  static const int DeleteHistoryAlertRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteHistoryAlertRequest, history_alert_id_),
  };
  DeleteHistoryAlertRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteHistoryAlertRequest_descriptor_,
      DeleteHistoryAlertRequest::default_instance_,
      DeleteHistoryAlertRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteHistoryAlertRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteHistoryAlertRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteHistoryAlertRequest));
  DeleteGroupRequest_descriptor_ = file->message_type(46);
  static const int DeleteGroupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupRequest, group_id_),
  };
  DeleteGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteGroupRequest_descriptor_,
      DeleteGroupRequest::default_instance_,
      DeleteGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteGroupRequest));
  MoveUnitNotification_descriptor_ = file->message_type(47);
  static const int MoveUnitNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveUnitNotification, id_),
  };
  MoveUnitNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveUnitNotification_descriptor_,
      MoveUnitNotification::default_instance_,
      MoveUnitNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveUnitNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveUnitNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveUnitNotification));
  Request_descriptor_ = file->message_type(48);
  static const int Request_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, append_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, modify_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, modify_participants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, group_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, invite_participant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, drop_participant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, release_participant_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, appoint_participant_speak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, jion_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, leave_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, send_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, kick_participant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, start_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, stop_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, subscribe_account_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, append_alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, modify_alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, stop_alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, history_alerts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, history_alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, delete_history_alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, delete_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, history_alert_message_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Response_descriptor_ = file->message_type(49);
  static const int Response_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, last_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, append_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, modify_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, modify_participants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, group_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, append_alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, history_alerts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, history_alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, history_alert_message_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  Indication_descriptor_ = file->message_type(50);
  static const int Indication_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, entity_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, participants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, join_group_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, participant_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, media_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, participant_connect_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, participant_speak_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, session_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, record_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, account_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, alert_overed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, move_unit_),
  };
  Indication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Indication_descriptor_,
      Indication::default_instance_,
      Indication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Indication));
  Message_descriptor_ = file->message_type(51);
  static const int Message_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, indication_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  MSG_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_app_2edispatch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResponse_descriptor_, &LoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntityRequest_descriptor_, &EntityRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntityResponse_descriptor_, &EntityResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntityNotification_descriptor_, &EntityNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntityStatusNotification_descriptor_, &EntityStatusNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendGroupRequest_descriptor_, &AppendGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendGroupResponse_descriptor_, &AppendGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyGroupRequest_descriptor_, &ModifyGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyGroupResponse_descriptor_, &ModifyGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyParticipantsRequest_descriptor_, &ModifyParticipantsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyParticipantsResponse_descriptor_, &ModifyParticipantsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParticipantsNotification_descriptor_, &ParticipantsNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinGroupRequestNotification_descriptor_, &JoinGroupRequestNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParticipantStatusNotification_descriptor_, &ParticipantStatusNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaMessageRequest_descriptor_, &MediaMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaMessageResponse_descriptor_, &MediaMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaMessageNotification_descriptor_, &MediaMessageNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParticipantConnectRequestNotification_descriptor_, &ParticipantConnectRequestNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParticipantSpeakRequestNotification_descriptor_, &ParticipantSpeakRequestNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteParticipantRequest_descriptor_, &InviteParticipantRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropParticipantRequest_descriptor_, &DropParticipantRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReleaseParticipantTokenRequest_descriptor_, &ReleaseParticipantTokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppointParticipantSpeakRequest_descriptor_, &AppointParticipantSpeakRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JionGroupRequest_descriptor_, &JionGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveGroupRequest_descriptor_, &LeaveGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionStatusNotification_descriptor_, &SessionStatusNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMessageRequest_descriptor_, &SendMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickParticipantRequest_descriptor_, &KickParticipantRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartRecordRequest_descriptor_, &StartRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopRecordRequest_descriptor_, &StopRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordStatusNotification_descriptor_, &RecordStatusNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeAccountLocationRequest_descriptor_, &SubscribeAccountLocationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLocationNotification_descriptor_, &AccountLocationNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendAlertRequest_descriptor_, &AppendAlertRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendAlertResponse_descriptor_, &AppendAlertResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyAlertRequest_descriptor_, &ModifyAlertRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopAlertRequest_descriptor_, &StopAlertRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlertOveredNotification_descriptor_, &AlertOveredNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryAlertsRequest_descriptor_, &HistoryAlertsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryAlertsResponse_descriptor_, &HistoryAlertsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryAlertRequest_descriptor_, &HistoryAlertRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryAlertResponse_descriptor_, &HistoryAlertResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryAlertMessageRequest_descriptor_, &HistoryAlertMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryAlertMessageResponse_descriptor_, &HistoryAlertMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteHistoryAlertRequest_descriptor_, &DeleteHistoryAlertRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteGroupRequest_descriptor_, &DeleteGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveUnitNotification_descriptor_, &MoveUnitNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Indication_descriptor_, &Indication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_app_2edispatch_2eproto() {
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
  delete EntityRequest::default_instance_;
  delete EntityRequest_reflection_;
  delete EntityResponse::default_instance_;
  delete EntityResponse_reflection_;
  delete EntityNotification::default_instance_;
  delete EntityNotification_reflection_;
  delete EntityStatusNotification::default_instance_;
  delete EntityStatusNotification_reflection_;
  delete AppendGroupRequest::default_instance_;
  delete AppendGroupRequest_reflection_;
  delete AppendGroupResponse::default_instance_;
  delete AppendGroupResponse_reflection_;
  delete ModifyGroupRequest::default_instance_;
  delete ModifyGroupRequest_reflection_;
  delete ModifyGroupResponse::default_instance_;
  delete ModifyGroupResponse_reflection_;
  delete ModifyParticipantsRequest::default_instance_;
  delete ModifyParticipantsRequest_reflection_;
  delete ModifyParticipantsResponse::default_instance_;
  delete ModifyParticipantsResponse_reflection_;
  delete ParticipantsNotification::default_instance_;
  delete ParticipantsNotification_reflection_;
  delete JoinGroupRequestNotification::default_instance_;
  delete JoinGroupRequestNotification_reflection_;
  delete ParticipantStatusNotification::default_instance_;
  delete ParticipantStatusNotification_reflection_;
  delete MediaMessageRequest::default_instance_;
  delete MediaMessageRequest_reflection_;
  delete MediaMessageResponse::default_instance_;
  delete MediaMessageResponse_reflection_;
  delete MediaMessageNotification::default_instance_;
  delete MediaMessageNotification_reflection_;
  delete ParticipantConnectRequestNotification::default_instance_;
  delete ParticipantConnectRequestNotification_reflection_;
  delete ParticipantSpeakRequestNotification::default_instance_;
  delete ParticipantSpeakRequestNotification_reflection_;
  delete InviteParticipantRequest::default_instance_;
  delete InviteParticipantRequest_reflection_;
  delete DropParticipantRequest::default_instance_;
  delete DropParticipantRequest_reflection_;
  delete ReleaseParticipantTokenRequest::default_instance_;
  delete ReleaseParticipantTokenRequest_reflection_;
  delete AppointParticipantSpeakRequest::default_instance_;
  delete AppointParticipantSpeakRequest_reflection_;
  delete JionGroupRequest::default_instance_;
  delete JionGroupRequest_reflection_;
  delete LeaveGroupRequest::default_instance_;
  delete LeaveGroupRequest_reflection_;
  delete SessionStatusNotification::default_instance_;
  delete SessionStatusNotification_reflection_;
  delete SendMessageRequest::default_instance_;
  delete SendMessageRequest_reflection_;
  delete KickParticipantRequest::default_instance_;
  delete KickParticipantRequest_reflection_;
  delete StartRecordRequest::default_instance_;
  delete StartRecordRequest_reflection_;
  delete StopRecordRequest::default_instance_;
  delete StopRecordRequest_reflection_;
  delete RecordStatusNotification::default_instance_;
  delete RecordStatusNotification_reflection_;
  delete SubscribeAccountLocationRequest::default_instance_;
  delete SubscribeAccountLocationRequest_reflection_;
  delete AccountLocationNotification::default_instance_;
  delete AccountLocationNotification_reflection_;
  delete AppendAlertRequest::default_instance_;
  delete AppendAlertRequest_reflection_;
  delete AppendAlertResponse::default_instance_;
  delete AppendAlertResponse_reflection_;
  delete ModifyAlertRequest::default_instance_;
  delete ModifyAlertRequest_reflection_;
  delete StopAlertRequest::default_instance_;
  delete StopAlertRequest_reflection_;
  delete AlertOveredNotification::default_instance_;
  delete AlertOveredNotification_reflection_;
  delete HistoryAlertsRequest::default_instance_;
  delete HistoryAlertsRequest_reflection_;
  delete HistoryAlertsResponse::default_instance_;
  delete HistoryAlertsResponse_reflection_;
  delete HistoryAlertRequest::default_instance_;
  delete HistoryAlertRequest_reflection_;
  delete HistoryAlertResponse::default_instance_;
  delete HistoryAlertResponse_reflection_;
  delete HistoryAlertMessageRequest::default_instance_;
  delete HistoryAlertMessageRequest_reflection_;
  delete HistoryAlertMessageResponse::default_instance_;
  delete HistoryAlertMessageResponse_reflection_;
  delete DeleteHistoryAlertRequest::default_instance_;
  delete DeleteHistoryAlertRequest_reflection_;
  delete DeleteGroupRequest::default_instance_;
  delete DeleteGroupRequest_reflection_;
  delete MoveUnitNotification::default_instance_;
  delete MoveUnitNotification_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Indication::default_instance_;
  delete Indication_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_app_2edispatch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pbmsg::protobuf_AddDesc_AppData_2eproto();
  ::pbmsg::protobuf_AddDesc_EntityData_2eproto();
  ::pbmsg::protobuf_AddDesc_MediaMessage_2eproto();
  ::pbmsg::protobuf_AddDesc_HistoryAlert_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022app.dispatch.proto\022\014app.dispatch\032\rAppD"
    "ata.proto\032\020EntityData.proto\032\022MediaMessag"
    "e.proto\032\022HistoryAlert.proto\"2\n\014LoginRequ"
    "est\022\020\n\010username\030\001 \002(\014\022\020\n\010password\030\002 \002(\t\""
    "w\n\rLoginResponse\022\022\n\nsession_id\030\001 \002(\007\022\031\n\004"
    "self\030\002 \002(\0132\013.pbmsg.User\022\013\n\003ttl\030\003 \002(\007\022\024\n\014"
    "poc_register\030\004 \001(\t\022\024\n\014poc_outbound\030\005 \001(\t"
    "\"*\n\rEntityRequest\022\031\n\002id\030\001 \002(\0132\r.pbmsg.En"
    "tity\"1\n\016EntityResponse\022\037\n\004data\030\001 \002(\0132\021.p"
    "bmsg.EntityData\"c\n\022EntityNotification\022,\n"
    "\013notify_type\030\001 \002(\0162\027.pbmsg.EntityNotifyT"
    "ype\022\037\n\004data\030\002 \002(\0132\021.pbmsg.EntityData\"\263\001\n"
    "\030EntityStatusNotification\022\031\n\002id\030\001 \002(\0132\r."
    "pbmsg.Entity\022%\n\006status\030\002 \001(\0162\025.pbmsg.Reg"
    "isterStatus\022)\n\nsip_status\030\003 \001(\0162\025.pbmsg."
    "RegisterStatus\022*\n\rcustom_status\030\004 \001(\0162\023."
    "pbmsg.CustomStatus\"1\n\022AppendGroupRequest"
    "\022\033\n\005group\030\001 \002(\0132\014.pbmsg.Group\"2\n\023AppendG"
    "roupResponse\022\033\n\005group\030\001 \002(\0132\014.pbmsg.Grou"
    "p\"1\n\022ModifyGroupRequest\022\033\n\005group\030\001 \002(\0132\014"
    ".pbmsg.Group\"2\n\023ModifyGroupResponse\022\033\n\005g"
    "roup\030\001 \002(\0132\014.pbmsg.Group\"\222\001\n\031ModifyParti"
    "cipantsRequest\022\037\n\010group_id\030\001 \002(\0132\r.pbmsg"
    ".Entity\022*\n\013modify_type\030\002 \002(\0162\025.pbmsg.Lis"
    "tModifyType\022(\n\014particiapnts\030\003 \003(\0132\022.pbms"
    "g.Participant\"\223\001\n\032ModifyParticipantsResp"
    "onse\022\037\n\010group_id\030\001 \002(\0132\r.pbmsg.Entity\022*\n"
    "\013modify_type\030\002 \002(\0162\025.pbmsg.ListModifyTyp"
    "e\022(\n\014particiapnts\030\003 \003(\0132\022.pbmsg.Particip"
    "ant\"\221\001\n\030ParticipantsNotification\022\037\n\010grou"
    "p_id\030\001 \002(\0132\r.pbmsg.Entity\022*\n\013modify_type"
    "\030\002 \002(\0162\025.pbmsg.ListModifyType\022(\n\014partici"
    "apnts\030\003 \003(\0132\022.pbmsg.Participant\"b\n\034JoinG"
    "roupRequestNotification\022\037\n\010group_id\030\001 \002("
    "\0132\r.pbmsg.Entity\022!\n\naccount_id\030\002 \002(\0132\r.p"
    "bmsg.Entity\"\211\001\n\035ParticipantStatusNotific"
    "ation\022\037\n\010group_id\030\001 \002(\0132\r.pbmsg.Entity\022!"
    "\n\naccount_id\030\002 \002(\0132\r.pbmsg.Entity\022$\n\006sta"
    "tus\030\003 \002(\0162\024.pbmsg.SessionStatus\"|\n\023Media"
    "MessageRequest\022\031\n\002id\030\001 \002(\0132\r.pbmsg.Entit"
    "y\022\027\n\017from_message_id\030\002 \001(\007\022\026\n\016from_times"
    "tamp\030\003 \001(\t\022\031\n\021max_message_count\030\004 \002(\007\"u\n"
    "\024MediaMessageResponse\022\031\n\002id\030\001 \002(\0132\r.pbms"
    "g.Entity\022%\n\010messages\030\002 \003(\0132\023.pbmsg.Media"
    "Message\022\033\n\023leave_message_count\030\003 \002(\007\"W\n\030"
    "MediaMessageNotification\022\031\n\002id\030\001 \002(\0132\r.p"
    "bmsg.Entity\022 \n\003msg\030\002 \002(\0132\023.pbmsg.MediaMe"
    "ssage\"k\n%ParticipantConnectRequestNotifi"
    "cation\022\037\n\010group_id\030\001 \002(\0132\r.pbmsg.Entity\022"
    "!\n\naccount_id\030\002 \002(\0132\r.pbmsg.Entity\"i\n#Pa"
    "rticipantSpeakRequestNotification\022\037\n\010gro"
    "up_id\030\001 \002(\0132\r.pbmsg.Entity\022!\n\naccount_id"
    "\030\002 \002(\0132\r.pbmsg.Entity\"^\n\030InviteParticipa"
    "ntRequest\022\037\n\010group_id\030\001 \002(\0132\r.pbmsg.Enti"
    "ty\022!\n\naccount_id\030\002 \001(\0132\r.pbmsg.Entity\"\\\n"
    "\026DropParticipantRequest\022\037\n\010group_id\030\001 \002("
    "\0132\r.pbmsg.Entity\022!\n\naccount_id\030\002 \001(\0132\r.p"
    "bmsg.Entity\"d\n\036ReleaseParticipantTokenRe"
    "quest\022\037\n\010group_id\030\001 \002(\0132\r.pbmsg.Entity\022!"
    "\n\naccount_id\030\002 \002(\0132\r.pbmsg.Entity\"d\n\036App"
    "ointParticipantSpeakRequest\022\037\n\010group_id\030"
    "\001 \002(\0132\r.pbmsg.Entity\022!\n\naccount_id\030\002 \002(\013"
    "2\r.pbmsg.Entity\"3\n\020JionGroupRequest\022\037\n\010g"
    "roup_id\030\001 \002(\0132\r.pbmsg.Entity\"4\n\021LeaveGro"
    "upRequest\022\037\n\010group_id\030\001 \002(\0132\r.pbmsg.Enti"
    "ty\"b\n\031SessionStatusNotification\022\037\n\010group"
    "_id\030\001 \002(\0132\r.pbmsg.Entity\022$\n\006status\030\002 \002(\016"
    "2\024.pbmsg.SessionStatus\"Q\n\022SendMessageReq"
    "uest\022\031\n\002id\030\001 \002(\0132\r.pbmsg.Entity\022 \n\003msg\030\002"
    " \002(\0132\023.pbmsg.MediaMessage\"\\\n\026KickPartici"
    "pantRequest\022\037\n\010group_id\030\001 \002(\0132\r.pbmsg.En"
    "tity\022!\n\naccount_id\030\002 \001(\0132\r.pbmsg.Entity\""
    "5\n\022StartRecordRequest\022\037\n\010group_id\030\001 \002(\0132"
    "\r.pbmsg.Entity\"4\n\021StopRecordRequest\022\037\n\010g"
    "roup_id\030\001 \002(\0132\r.pbmsg.Entity\"N\n\030RecordSt"
    "atusNotification\022\037\n\010group_id\030\001 \002(\0132\r.pbm"
    "sg.Entity\022\021\n\trecording\030\002 \002(\010\"f\n\037Subscrib"
    "eAccountLocationRequest\022\023\n\013subscribing\030\001"
    " \002(\010\022!\n\naccount_id\030\002 \002(\0132\r.pbmsg.Entity\022"
    "\013\n\003ttl\030\003 \002(\007\"x\n\033AccountLocationNotificat"
    "ion\022!\n\naccount_id\030\001 \002(\0132\r.pbmsg.Entity\022\021"
    "\n\tlongitude\030\002 \002(\001\022\020\n\010latitude\030\003 \002(\001\022\021\n\tt"
    "imestamp\030\004 \002(\t\"Q\n\022AppendAlertRequest\022\033\n\005"
    "alert\030\001 \002(\0132\014.pbmsg.Alert\022\036\n\007members\030\002 \003"
    "(\0132\r.pbmsg.Entity\"2\n\023AppendAlertResponse"
    "\022\033\n\005alert\030\001 \002(\0132\014.pbmsg.Alert\"1\n\022ModifyA"
    "lertRequest\022\033\n\005alert\030\001 \002(\0132\014.pbmsg.Alert"
    "\"3\n\020StopAlertRequest\022\037\n\010alert_id\030\001 \002(\0132\r"
    ".pbmsg.Entity\":\n\027AlertOveredNotification"
    "\022\037\n\010alert_id\030\001 \002(\0132\r.pbmsg.Entity\"\264\001\n\024Hi"
    "storyAlertsRequest\022\014\n\004name\030\001 \001(\014\022\030\n\020crea"
    "te_time_from\030\002 \001(\t\022\026\n\016create_time_to\030\003 \001"
    "(\t\022\027\n\017alram_time_from\030\004 \001(\t\022\025\n\ralram_tim"
    "e_to\030\005 \001(\t\022\026\n\016over_time_from\030\006 \001(\t\022\024\n\014ov"
    "er_time_to\030\007 \001(\t\"D\n\025HistoryAlertsRespons"
    "e\022+\n\016history_alerts\030\001 \003(\0132\023.pbmsg.Histor"
    "yAlert\"/\n\023HistoryAlertRequest\022\030\n\020history"
    "_alert_id\030\001 \002(\007\"B\n\024HistoryAlertResponse\022"
    "*\n\rhistory_alert\030\001 \002(\0132\023.pbmsg.HistoryAl"
    "ert\"}\n\032HistoryAlertMessageRequest\022\030\n\020his"
    "tory_alert_id\030\001 \002(\007\022\027\n\017from_message_id\030\002"
    " \001(\007\022\021\n\tfrom_time\030\003 \001(\t\022\031\n\021max_message_c"
    "ount\030\004 \002(\007\"{\n\033HistoryAlertMessageRespons"
    "e\022\030\n\020history_alert_id\030\001 \002(\007\022%\n\010messages\030"
    "\002 \003(\0132\023.pbmsg.MediaMessage\022\033\n\023leave_mess"
    "age_count\030\003 \002(\007\"5\n\031DeleteHistoryAlertReq"
    "uest\022\030\n\020history_alert_id\030\001 \002(\007\"5\n\022Delete"
    "GroupRequest\022\037\n\010group_id\030\001 \002(\0132\r.pbmsg.E"
    "ntity\"1\n\024MoveUnitNotification\022\031\n\002id\030\001 \002("
    "\0132\r.pbmsg.Entity\"\374\013\n\007Request\022)\n\005login\030\001 "
    "\001(\0132\032.app.dispatch.LoginRequest\022+\n\006entit"
    "y\030\002 \001(\0132\033.app.dispatch.EntityRequest\0226\n\014"
    "append_group\030\003 \001(\0132 .app.dispatch.Append"
    "GroupRequest\0226\n\014modify_group\030\004 \001(\0132 .app"
    ".dispatch.ModifyGroupRequest\022D\n\023modify_p"
    "articipants\030\005 \001(\0132\'.app.dispatch.ModifyP"
    "articipantsRequest\0228\n\rgroup_message\030\006 \001("
    "\0132!.app.dispatch.MediaMessageRequest\022B\n\022"
    "invite_participant\030\007 \001(\0132&.app.dispatch."
    "InviteParticipantRequest\022>\n\020drop_partici"
    "pant\030\010 \001(\0132$.app.dispatch.DropParticipan"
    "tRequest\022O\n\031release_participant_token\030\t "
    "\001(\0132,.app.dispatch.ReleaseParticipantTok"
    "enRequest\022O\n\031appoint_participant_speak\030\n"
    " \001(\0132,.app.dispatch.AppointParticipantSp"
    "eakRequest\0222\n\njion_group\030\013 \001(\0132\036.app.dis"
    "patch.JionGroupRequest\0224\n\013leave_group\030\014 "
    "\001(\0132\037.app.dispatch.LeaveGroupRequest\0226\n\014"
    "send_message\030\r \001(\0132 .app.dispatch.SendMe"
    "ssageRequest\022>\n\020kick_participant\030\016 \001(\0132$"
    ".app.dispatch.KickParticipantRequest\0226\n\014"
    "start_record\030\017 \001(\0132 .app.dispatch.StartR"
    "ecordRequest\0224\n\013stop_record\030\020 \001(\0132\037.app."
    "dispatch.StopRecordRequest\022Q\n\032subscribe_"
    "account_location\030\021 \001(\0132-.app.dispatch.Su"
    "bscribeAccountLocationRequest\0226\n\014append_"
    "alert\030\022 \001(\0132 .app.dispatch.AppendAlertRe"
    "quest\0226\n\014modify_alert\030\023 \001(\0132 .app.dispat"
    "ch.ModifyAlertRequest\0222\n\nstop_alert\030\024 \001("
    "\0132\036.app.dispatch.StopAlertRequest\022:\n\016his"
    "tory_alerts\030\025 \001(\0132\".app.dispatch.History"
    "AlertsRequest\0228\n\rhistory_alert\030\026 \001(\0132!.a"
    "pp.dispatch.HistoryAlertRequest\022E\n\024delet"
    "e_history_alert\030\027 \001(\0132\'.app.dispatch.Del"
    "eteHistoryAlertRequest\0226\n\014delete_group\030\030"
    " \001(\0132 .app.dispatch.DeleteGroupRequest\022G"
    "\n\025history_alert_message\030\031 \001(\0132(.app.disp"
    "atch.HistoryAlertMessageRequest\"\222\005\n\010Resp"
    "onse\022\016\n\006result\030\001 \002(\010\022\025\n\rlast_response\030\002 "
    "\002(\010\022\026\n\016error_describe\030\003 \001(\014\022*\n\005login\030\004 \001"
    "(\0132\033.app.dispatch.LoginResponse\022,\n\006entit"
    "y\030\005 \001(\0132\034.app.dispatch.EntityResponse\0227\n"
    "\014append_group\030\006 \001(\0132!.app.dispatch.Appen"
    "dGroupResponse\0227\n\014modify_group\030\007 \001(\0132!.a"
    "pp.dispatch.ModifyGroupResponse\022E\n\023modif"
    "y_participants\030\010 \001(\0132(.app.dispatch.Modi"
    "fyParticipantsResponse\0229\n\rgroup_message\030"
    "\t \001(\0132\".app.dispatch.MediaMessageRespons"
    "e\0227\n\014append_alert\030\n \001(\0132!.app.dispatch.A"
    "ppendAlertResponse\022;\n\016history_alerts\030\013 \001"
    "(\0132#.app.dispatch.HistoryAlertsResponse\022"
    "9\n\rhistory_alert\030\014 \001(\0132\".app.dispatch.Hi"
    "storyAlertResponse\022H\n\025history_alert_mess"
    "age\030\r \001(\0132).app.dispatch.HistoryAlertMes"
    "sageResponse\"\364\006\n\nIndication\0220\n\006entity\030\001 "
    "\001(\0132 .app.dispatch.EntityNotification\022=\n"
    "\rentity_status\030\002 \001(\0132&.app.dispatch.Enti"
    "tyStatusNotification\022<\n\014participants\030\003 \001"
    "(\0132&.app.dispatch.ParticipantsNotificati"
    "on\022F\n\022join_group_request\030\004 \001(\0132*.app.dis"
    "patch.JoinGroupRequestNotification\022G\n\022pa"
    "rticipant_status\030\005 \001(\0132+.app.dispatch.Pa"
    "rticipantStatusNotification\022=\n\rmedia_mes"
    "sage\030\006 \001(\0132&.app.dispatch.MediaMessageNo"
    "tification\022X\n\033participant_connect_reques"
    "t\030\007 \001(\01323.app.dispatch.ParticipantConnec"
    "tRequestNotification\022T\n\031participant_spea"
    "k_request\030\010 \001(\01321.app.dispatch.Participa"
    "ntSpeakRequestNotification\022\?\n\016session_st"
    "atus\030\t \001(\0132\'.app.dispatch.SessionStatusN"
    "otification\022=\n\rrecord_status\030\n \001(\0132&.app"
    ".dispatch.RecordStatusNotification\022C\n\020ac"
    "count_location\030\013 \001(\0132).app.dispatch.Acco"
    "untLocationNotification\022;\n\014alert_overed\030"
    "\014 \001(\0132%.app.dispatch.AlertOveredNotifica"
    "tion\0225\n\tmove_unit\030\r \001(\0132\".app.dispatch.M"
    "oveUnitNotification\"\324\001\n\007Message\022#\n\010msg_t"
    "ype\030\001 \002(\0162\021.app.dispatch.MSG\022\020\n\010sequence"
    "\030\002 \002(\007\022\022\n\nsession_id\030\003 \001(\007\022&\n\007request\030\004 "
    "\001(\0132\025.app.dispatch.Request\022(\n\010response\030\005"
    " \001(\0132\026.app.dispatch.Response\022,\n\nindicati"
    "on\030\006 \001(\0132\030.app.dispatch.Indication*\311\020\n\003M"
    "SG\022\023\n\rLogin_Request\020\301\232\014\022\024\n\016Login_Respons"
    "e\020\302\232\014\022\024\n\016Logout_Request\020\303\232\014\022\025\n\017Logout_Re"
    "sponse\020\304\232\014\022\027\n\021Keepalive_Request\020\305\232\014\022\030\n\022K"
    "eepalive_Response\020\306\232\014\022\024\n\016Entity_Request\020"
    "\307\232\014\022\025\n\017Entity_Response\020\310\232\014\022\032\n\024Append_Gro"
    "up_Request\020\311\232\014\022\033\n\025Append_Group_Response\020"
    "\312\232\014\022\032\n\024Modify_Group_Request\020\313\232\014\022\033\n\025Modif"
    "y_Group_Response\020\314\232\014\022!\n\033Modify_Participa"
    "nts_Request\020\315\232\014\022\"\n\034Modify_Participants_R"
    "esponse\020\316\232\014\022\033\n\025Media_Message_Request\020\317\232\014"
    "\022\034\n\026Media_Message_Response\020\320\232\014\022 \n\032Invite"
    "_Participant_Request\020\321\232\014\022!\n\033Invite_Parti"
    "cipant_Response\020\322\232\014\022\036\n\030Drop_Participant_"
    "Request\020\323\232\014\022\037\n\031Drop_Participant_Response"
    "\020\324\232\014\022\'\n!Release_Participant_Token_Reques"
    "t\020\325\232\014\022(\n\"Release_Participant_Token_Respo"
    "nse\020\326\232\014\022\'\n!Appoint_Participant_Speak_Req"
    "uest\020\327\232\014\022(\n\"Appoint_Participant_Speak_Re"
    "sponse\020\330\232\014\022\030\n\022Jion_Group_Request\020\331\232\014\022\031\n\023"
    "Jion_Group_Response\020\332\232\014\022\031\n\023Leave_Group_R"
    "equest\020\333\232\014\022\032\n\024Leave_Group_Response\020\334\232\014\022\032"
    "\n\024Send_Message_Request\020\335\232\014\022\033\n\025Send_Messa"
    "ge_Response\020\336\232\014\022\036\n\030Kick_Participant_Requ"
    "est\020\337\232\014\022\037\n\031Kick_Participant_Response\020\340\232\014"
    "\022\032\n\024Start_Record_Request\020\341\232\014\022\033\n\025Start_Re"
    "cord_Response\020\342\232\014\022\031\n\023Stop_Record_Request"
    "\020\343\232\014\022\032\n\024Stop_Record_Response\020\344\232\014\022(\n\"Subs"
    "cribe_Account_Location_Request\020\345\232\014\022)\n#Su"
    "bscribe_Account_Location_Response\020\346\232\014\022\032\n"
    "\024Append_Alert_Request\020\347\232\014\022\033\n\025Append_Aler"
    "t_Response\020\350\232\014\022\032\n\024Modify_Alert_Request\020\351"
    "\232\014\022\033\n\025Modify_Alert_Response\020\352\232\014\022\030\n\022Stop_"
    "Alert_Request\020\353\232\014\022\031\n\023Stop_Alert_Response"
    "\020\354\232\014\022\034\n\026History_Alerts_Request\020\355\232\014\022\035\n\027Hi"
    "story_Alerts_Response\020\356\232\014\022\033\n\025History_Ale"
    "rt_Request\020\357\232\014\022\034\n\026History_Alert_Response"
    "\020\360\232\014\022#\n\035History_Alert_Message_Request\020\361\232"
    "\014\022$\n\036History_Alert_Message_Response\020\362\232\014\022"
    "\"\n\034Delete_History_Alert_Request\020\363\232\014\022#\n\035D"
    "elete_History_Alert_Response\020\364\232\014\022\032\n\024Dele"
    "te_Group_Request\020\365\232\014\022\033\n\025Delete_Group_Res"
    "ponse\020\366\232\014\022\031\n\023Entity_Notification\020\321\350\014\022 \n\032"
    "Entity_Status_Notification\020\322\350\014\022\037\n\031Partic"
    "ipants_Notification\020\323\350\014\022%\n\037Join_Group_Re"
    "quest_Notification\020\324\350\014\022%\n\037Participant_St"
    "atus_Notification\020\325\350\014\022 \n\032Media_Message_N"
    "otification\020\326\350\014\022.\n(Participant_Connect_R"
    "equest_Notification\020\327\350\014\022,\n&Participant_S"
    "peak_Request_Notification\020\330\350\014\022!\n\033Session"
    "_Status_Notification\020\331\350\014\022 \n\032Record_Statu"
    "s_Notification\020\332\350\014\022#\n\035Account_Location_N"
    "otification\020\333\350\014\022\037\n\031Alert_Overed_Notifica"
    "tion\020\334\350\014\022\034\n\026Move_Unit_Notification\020\335\350\014", 9798);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "app.dispatch.proto", &protobuf_RegisterTypes);
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResponse::default_instance_ = new LoginResponse();
  EntityRequest::default_instance_ = new EntityRequest();
  EntityResponse::default_instance_ = new EntityResponse();
  EntityNotification::default_instance_ = new EntityNotification();
  EntityStatusNotification::default_instance_ = new EntityStatusNotification();
  AppendGroupRequest::default_instance_ = new AppendGroupRequest();
  AppendGroupResponse::default_instance_ = new AppendGroupResponse();
  ModifyGroupRequest::default_instance_ = new ModifyGroupRequest();
  ModifyGroupResponse::default_instance_ = new ModifyGroupResponse();
  ModifyParticipantsRequest::default_instance_ = new ModifyParticipantsRequest();
  ModifyParticipantsResponse::default_instance_ = new ModifyParticipantsResponse();
  ParticipantsNotification::default_instance_ = new ParticipantsNotification();
  JoinGroupRequestNotification::default_instance_ = new JoinGroupRequestNotification();
  ParticipantStatusNotification::default_instance_ = new ParticipantStatusNotification();
  MediaMessageRequest::default_instance_ = new MediaMessageRequest();
  MediaMessageResponse::default_instance_ = new MediaMessageResponse();
  MediaMessageNotification::default_instance_ = new MediaMessageNotification();
  ParticipantConnectRequestNotification::default_instance_ = new ParticipantConnectRequestNotification();
  ParticipantSpeakRequestNotification::default_instance_ = new ParticipantSpeakRequestNotification();
  InviteParticipantRequest::default_instance_ = new InviteParticipantRequest();
  DropParticipantRequest::default_instance_ = new DropParticipantRequest();
  ReleaseParticipantTokenRequest::default_instance_ = new ReleaseParticipantTokenRequest();
  AppointParticipantSpeakRequest::default_instance_ = new AppointParticipantSpeakRequest();
  JionGroupRequest::default_instance_ = new JionGroupRequest();
  LeaveGroupRequest::default_instance_ = new LeaveGroupRequest();
  SessionStatusNotification::default_instance_ = new SessionStatusNotification();
  SendMessageRequest::default_instance_ = new SendMessageRequest();
  KickParticipantRequest::default_instance_ = new KickParticipantRequest();
  StartRecordRequest::default_instance_ = new StartRecordRequest();
  StopRecordRequest::default_instance_ = new StopRecordRequest();
  RecordStatusNotification::default_instance_ = new RecordStatusNotification();
  SubscribeAccountLocationRequest::default_instance_ = new SubscribeAccountLocationRequest();
  AccountLocationNotification::default_instance_ = new AccountLocationNotification();
  AppendAlertRequest::default_instance_ = new AppendAlertRequest();
  AppendAlertResponse::default_instance_ = new AppendAlertResponse();
  ModifyAlertRequest::default_instance_ = new ModifyAlertRequest();
  StopAlertRequest::default_instance_ = new StopAlertRequest();
  AlertOveredNotification::default_instance_ = new AlertOveredNotification();
  HistoryAlertsRequest::default_instance_ = new HistoryAlertsRequest();
  HistoryAlertsResponse::default_instance_ = new HistoryAlertsResponse();
  HistoryAlertRequest::default_instance_ = new HistoryAlertRequest();
  HistoryAlertResponse::default_instance_ = new HistoryAlertResponse();
  HistoryAlertMessageRequest::default_instance_ = new HistoryAlertMessageRequest();
  HistoryAlertMessageResponse::default_instance_ = new HistoryAlertMessageResponse();
  DeleteHistoryAlertRequest::default_instance_ = new DeleteHistoryAlertRequest();
  DeleteGroupRequest::default_instance_ = new DeleteGroupRequest();
  MoveUnitNotification::default_instance_ = new MoveUnitNotification();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  Indication::default_instance_ = new Indication();
  Message::default_instance_ = new Message();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  EntityRequest::default_instance_->InitAsDefaultInstance();
  EntityResponse::default_instance_->InitAsDefaultInstance();
  EntityNotification::default_instance_->InitAsDefaultInstance();
  EntityStatusNotification::default_instance_->InitAsDefaultInstance();
  AppendGroupRequest::default_instance_->InitAsDefaultInstance();
  AppendGroupResponse::default_instance_->InitAsDefaultInstance();
  ModifyGroupRequest::default_instance_->InitAsDefaultInstance();
  ModifyGroupResponse::default_instance_->InitAsDefaultInstance();
  ModifyParticipantsRequest::default_instance_->InitAsDefaultInstance();
  ModifyParticipantsResponse::default_instance_->InitAsDefaultInstance();
  ParticipantsNotification::default_instance_->InitAsDefaultInstance();
  JoinGroupRequestNotification::default_instance_->InitAsDefaultInstance();
  ParticipantStatusNotification::default_instance_->InitAsDefaultInstance();
  MediaMessageRequest::default_instance_->InitAsDefaultInstance();
  MediaMessageResponse::default_instance_->InitAsDefaultInstance();
  MediaMessageNotification::default_instance_->InitAsDefaultInstance();
  ParticipantConnectRequestNotification::default_instance_->InitAsDefaultInstance();
  ParticipantSpeakRequestNotification::default_instance_->InitAsDefaultInstance();
  InviteParticipantRequest::default_instance_->InitAsDefaultInstance();
  DropParticipantRequest::default_instance_->InitAsDefaultInstance();
  ReleaseParticipantTokenRequest::default_instance_->InitAsDefaultInstance();
  AppointParticipantSpeakRequest::default_instance_->InitAsDefaultInstance();
  JionGroupRequest::default_instance_->InitAsDefaultInstance();
  LeaveGroupRequest::default_instance_->InitAsDefaultInstance();
  SessionStatusNotification::default_instance_->InitAsDefaultInstance();
  SendMessageRequest::default_instance_->InitAsDefaultInstance();
  KickParticipantRequest::default_instance_->InitAsDefaultInstance();
  StartRecordRequest::default_instance_->InitAsDefaultInstance();
  StopRecordRequest::default_instance_->InitAsDefaultInstance();
  RecordStatusNotification::default_instance_->InitAsDefaultInstance();
  SubscribeAccountLocationRequest::default_instance_->InitAsDefaultInstance();
  AccountLocationNotification::default_instance_->InitAsDefaultInstance();
  AppendAlertRequest::default_instance_->InitAsDefaultInstance();
  AppendAlertResponse::default_instance_->InitAsDefaultInstance();
  ModifyAlertRequest::default_instance_->InitAsDefaultInstance();
  StopAlertRequest::default_instance_->InitAsDefaultInstance();
  AlertOveredNotification::default_instance_->InitAsDefaultInstance();
  HistoryAlertsRequest::default_instance_->InitAsDefaultInstance();
  HistoryAlertsResponse::default_instance_->InitAsDefaultInstance();
  HistoryAlertRequest::default_instance_->InitAsDefaultInstance();
  HistoryAlertResponse::default_instance_->InitAsDefaultInstance();
  HistoryAlertMessageRequest::default_instance_->InitAsDefaultInstance();
  HistoryAlertMessageResponse::default_instance_->InitAsDefaultInstance();
  DeleteHistoryAlertRequest::default_instance_->InitAsDefaultInstance();
  DeleteGroupRequest::default_instance_->InitAsDefaultInstance();
  MoveUnitNotification::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Indication::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_app_2edispatch_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_app_2edispatch_2eproto {
  StaticDescriptorInitializer_app_2edispatch_2eproto() {
    protobuf_AddDesc_app_2edispatch_2eproto();
  }
} static_descriptor_initializer_app_2edispatch_2eproto_;
const ::google::protobuf::EnumDescriptor* MSG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_descriptor_;
}
bool MSG_IsValid(int value) {
  switch(value) {
    case 200001:
    case 200002:
    case 200003:
    case 200004:
    case 200005:
    case 200006:
    case 200007:
    case 200008:
    case 200009:
    case 200010:
    case 200011:
    case 200012:
    case 200013:
    case 200014:
    case 200015:
    case 200016:
    case 200017:
    case 200018:
    case 200019:
    case 200020:
    case 200021:
    case 200022:
    case 200023:
    case 200024:
    case 200025:
    case 200026:
    case 200027:
    case 200028:
    case 200029:
    case 200030:
    case 200031:
    case 200032:
    case 200033:
    case 200034:
    case 200035:
    case 200036:
    case 200037:
    case 200038:
    case 200039:
    case 200040:
    case 200041:
    case 200042:
    case 200043:
    case 200044:
    case 200045:
    case 200046:
    case 200047:
    case 200048:
    case 200049:
    case 200050:
    case 200051:
    case 200052:
    case 200053:
    case 200054:
    case 210001:
    case 210002:
    case 210003:
    case 210004:
    case 210005:
    case 210006:
    case 210007:
    case 210008:
    case 210009:
    case 210010:
    case 210011:
    case 210012:
    case 210013:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kUsernameFieldNumber;
const int LoginRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->username(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes username = 1;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->username(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponse::kSessionIdFieldNumber;
const int LoginResponse::kSelfFieldNumber;
const int LoginResponse::kTtlFieldNumber;
const int LoginResponse::kPocRegisterFieldNumber;
const int LoginResponse::kPocOutboundFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResponse::InitAsDefaultInstance() {
  self_ = const_cast< ::pbmsg::User*>(&::pbmsg::User::default_instance());
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResponse::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  self_ = NULL;
  ttl_ = 0u;
  poc_register_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  poc_outbound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (poc_register_ != &::google::protobuf::internal::kEmptyString) {
    delete poc_register_;
  }
  if (poc_outbound_ != &::google::protobuf::internal::kEmptyString) {
    delete poc_outbound_;
  }
  if (this != default_instance_) {
    delete self_;
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New() const {
  return new LoginResponse;
}

void LoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    if (has_self()) {
      if (self_ != NULL) self_->::pbmsg::User::Clear();
    }
    ttl_ = 0u;
    if (has_poc_register()) {
      if (poc_register_ != &::google::protobuf::internal::kEmptyString) {
        poc_register_->clear();
      }
    }
    if (has_poc_outbound()) {
      if (poc_outbound_ != &::google::protobuf::internal::kEmptyString) {
        poc_outbound_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_self;
        break;
      }

      // required .pbmsg.User self = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ttl;
        break;
      }

      // required fixed32 ttl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_poc_register;
        break;
      }

      // optional string poc_register = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poc_register:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poc_register()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poc_register().data(), this->poc_register().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_poc_outbound;
        break;
      }

      // optional string poc_outbound = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poc_outbound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poc_outbound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poc_outbound().data(), this->poc_outbound().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->session_id(), output);
  }

  // required .pbmsg.User self = 2;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->self(), output);
  }

  // required fixed32 ttl = 3;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->ttl(), output);
  }

  // optional string poc_register = 4;
  if (has_poc_register()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poc_register().data(), this->poc_register().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->poc_register(), output);
  }

  // optional string poc_outbound = 5;
  if (has_poc_outbound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poc_outbound().data(), this->poc_outbound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->poc_outbound(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->session_id(), target);
  }

  // required .pbmsg.User self = 2;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->self(), target);
  }

  // required fixed32 ttl = 3;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->ttl(), target);
  }

  // optional string poc_register = 4;
  if (has_poc_register()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poc_register().data(), this->poc_register().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->poc_register(), target);
  }

  // optional string poc_outbound = 5;
  if (has_poc_outbound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poc_outbound().data(), this->poc_outbound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->poc_outbound(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + 4;
    }

    // required .pbmsg.User self = 2;
    if (has_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self());
    }

    // required fixed32 ttl = 3;
    if (has_ttl()) {
      total_size += 1 + 4;
    }

    // optional string poc_register = 4;
    if (has_poc_register()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poc_register());
    }

    // optional string poc_outbound = 5;
    if (has_poc_outbound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poc_outbound());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_self()) {
      mutable_self()->::pbmsg::User::MergeFrom(from.self());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_poc_register()) {
      set_poc_register(from.poc_register());
    }
    if (from.has_poc_outbound()) {
      set_poc_outbound(from.poc_outbound());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_self()) {
    if (!this->self().IsInitialized()) return false;
  }
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(self_, other->self_);
    std::swap(ttl_, other->ttl_);
    std::swap(poc_register_, other->poc_register_);
    std::swap(poc_outbound_, other->poc_outbound_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntityRequest::kIdFieldNumber;
#endif  // !_MSC_VER

EntityRequest::EntityRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntityRequest::InitAsDefaultInstance() {
  id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

EntityRequest::EntityRequest(const EntityRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntityRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityRequest::~EntityRequest() {
  SharedDtor();
}

void EntityRequest::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void EntityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityRequest_descriptor_;
}

const EntityRequest& EntityRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

EntityRequest* EntityRequest::default_instance_ = NULL;

EntityRequest* EntityRequest::New() const {
  return new EntityRequest;
}

void EntityRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntityRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntityRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntityRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntityRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityRequest::MergeFrom(const EntityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::pbmsg::Entity::MergeFrom(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntityRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityRequest::CopyFrom(const EntityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EntityRequest::Swap(EntityRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntityRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityRequest_descriptor_;
  metadata.reflection = EntityRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntityResponse::kDataFieldNumber;
#endif  // !_MSC_VER

EntityResponse::EntityResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntityResponse::InitAsDefaultInstance() {
  data_ = const_cast< ::pbmsg::EntityData*>(&::pbmsg::EntityData::default_instance());
}

EntityResponse::EntityResponse(const EntityResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntityResponse::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityResponse::~EntityResponse() {
  SharedDtor();
}

void EntityResponse::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void EntityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityResponse_descriptor_;
}

const EntityResponse& EntityResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

EntityResponse* EntityResponse::default_instance_ = NULL;

EntityResponse* EntityResponse::New() const {
  return new EntityResponse;
}

void EntityResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::pbmsg::EntityData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.EntityData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.EntityData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntityResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.EntityData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntityResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.EntityData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntityResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntityResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityResponse::MergeFrom(const EntityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::pbmsg::EntityData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntityResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityResponse::CopyFrom(const EntityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void EntityResponse::Swap(EntityResponse* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntityResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityResponse_descriptor_;
  metadata.reflection = EntityResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntityNotification::kNotifyTypeFieldNumber;
const int EntityNotification::kDataFieldNumber;
#endif  // !_MSC_VER

EntityNotification::EntityNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntityNotification::InitAsDefaultInstance() {
  data_ = const_cast< ::pbmsg::EntityData*>(&::pbmsg::EntityData::default_instance());
}

EntityNotification::EntityNotification(const EntityNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntityNotification::SharedCtor() {
  _cached_size_ = 0;
  notify_type_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityNotification::~EntityNotification() {
  SharedDtor();
}

void EntityNotification::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void EntityNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityNotification_descriptor_;
}

const EntityNotification& EntityNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

EntityNotification* EntityNotification::default_instance_ = NULL;

EntityNotification* EntityNotification::New() const {
  return new EntityNotification;
}

void EntityNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    notify_type_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::pbmsg::EntityData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntityNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.EntityNotifyType notify_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::EntityNotifyType_IsValid(value)) {
            set_notify_type(static_cast< ::pbmsg::EntityNotifyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required .pbmsg.EntityData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntityNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.EntityNotifyType notify_type = 1;
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->notify_type(), output);
  }

  // required .pbmsg.EntityData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntityNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.EntityNotifyType notify_type = 1;
  if (has_notify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->notify_type(), target);
  }

  // required .pbmsg.EntityData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntityNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.EntityNotifyType notify_type = 1;
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notify_type());
    }

    // required .pbmsg.EntityData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntityNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntityNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityNotification::MergeFrom(const EntityNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_data()) {
      mutable_data()->::pbmsg::EntityData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntityNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityNotification::CopyFrom(const EntityNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void EntityNotification::Swap(EntityNotification* other) {
  if (other != this) {
    std::swap(notify_type_, other->notify_type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntityNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityNotification_descriptor_;
  metadata.reflection = EntityNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntityStatusNotification::kIdFieldNumber;
const int EntityStatusNotification::kStatusFieldNumber;
const int EntityStatusNotification::kSipStatusFieldNumber;
const int EntityStatusNotification::kCustomStatusFieldNumber;
#endif  // !_MSC_VER

EntityStatusNotification::EntityStatusNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntityStatusNotification::InitAsDefaultInstance() {
  id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

EntityStatusNotification::EntityStatusNotification(const EntityStatusNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntityStatusNotification::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  status_ = 0;
  sip_status_ = 0;
  custom_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityStatusNotification::~EntityStatusNotification() {
  SharedDtor();
}

void EntityStatusNotification::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void EntityStatusNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityStatusNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityStatusNotification_descriptor_;
}

const EntityStatusNotification& EntityStatusNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

EntityStatusNotification* EntityStatusNotification::default_instance_ = NULL;

EntityStatusNotification* EntityStatusNotification::New() const {
  return new EntityStatusNotification;
}

void EntityStatusNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::pbmsg::Entity::Clear();
    }
    status_ = 0;
    sip_status_ = 0;
    custom_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntityStatusNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .pbmsg.RegisterStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::RegisterStatus_IsValid(value)) {
            set_status(static_cast< ::pbmsg::RegisterStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sip_status;
        break;
      }

      // optional .pbmsg.RegisterStatus sip_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sip_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::RegisterStatus_IsValid(value)) {
            set_sip_status(static_cast< ::pbmsg::RegisterStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_custom_status;
        break;
      }

      // optional .pbmsg.CustomStatus custom_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::CustomStatus_IsValid(value)) {
            set_custom_status(static_cast< ::pbmsg::CustomStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntityStatusNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional .pbmsg.RegisterStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .pbmsg.RegisterStatus sip_status = 3;
  if (has_sip_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sip_status(), output);
  }

  // optional .pbmsg.CustomStatus custom_status = 4;
  if (has_custom_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->custom_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntityStatusNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional .pbmsg.RegisterStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional .pbmsg.RegisterStatus sip_status = 3;
  if (has_sip_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sip_status(), target);
  }

  // optional .pbmsg.CustomStatus custom_status = 4;
  if (has_custom_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->custom_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntityStatusNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .pbmsg.RegisterStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .pbmsg.RegisterStatus sip_status = 3;
    if (has_sip_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sip_status());
    }

    // optional .pbmsg.CustomStatus custom_status = 4;
    if (has_custom_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->custom_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityStatusNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntityStatusNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntityStatusNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityStatusNotification::MergeFrom(const EntityStatusNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::pbmsg::Entity::MergeFrom(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_sip_status()) {
      set_sip_status(from.sip_status());
    }
    if (from.has_custom_status()) {
      set_custom_status(from.custom_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntityStatusNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityStatusNotification::CopyFrom(const EntityStatusNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityStatusNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EntityStatusNotification::Swap(EntityStatusNotification* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(sip_status_, other->sip_status_);
    std::swap(custom_status_, other->custom_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntityStatusNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityStatusNotification_descriptor_;
  metadata.reflection = EntityStatusNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendGroupRequest::kGroupFieldNumber;
#endif  // !_MSC_VER

AppendGroupRequest::AppendGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendGroupRequest::InitAsDefaultInstance() {
  group_ = const_cast< ::pbmsg::Group*>(&::pbmsg::Group::default_instance());
}

AppendGroupRequest::AppendGroupRequest(const AppendGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendGroupRequest::~AppendGroupRequest() {
  SharedDtor();
}

void AppendGroupRequest::SharedDtor() {
  if (this != default_instance_) {
    delete group_;
  }
}

void AppendGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendGroupRequest_descriptor_;
}

const AppendGroupRequest& AppendGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

AppendGroupRequest* AppendGroupRequest::default_instance_ = NULL;

AppendGroupRequest* AppendGroupRequest::New() const {
  return new AppendGroupRequest;
}

void AppendGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group()) {
      if (group_ != NULL) group_->::pbmsg::Group::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Group group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppendGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Group group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppendGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Group group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppendGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Group group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendGroupRequest::MergeFrom(const AppendGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      mutable_group()->::pbmsg::Group::MergeFrom(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendGroupRequest::CopyFrom(const AppendGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_group()) {
    if (!this->group().IsInitialized()) return false;
  }
  return true;
}

void AppendGroupRequest::Swap(AppendGroupRequest* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendGroupRequest_descriptor_;
  metadata.reflection = AppendGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendGroupResponse::kGroupFieldNumber;
#endif  // !_MSC_VER

AppendGroupResponse::AppendGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendGroupResponse::InitAsDefaultInstance() {
  group_ = const_cast< ::pbmsg::Group*>(&::pbmsg::Group::default_instance());
}

AppendGroupResponse::AppendGroupResponse(const AppendGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendGroupResponse::~AppendGroupResponse() {
  SharedDtor();
}

void AppendGroupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete group_;
  }
}

void AppendGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendGroupResponse_descriptor_;
}

const AppendGroupResponse& AppendGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

AppendGroupResponse* AppendGroupResponse::default_instance_ = NULL;

AppendGroupResponse* AppendGroupResponse::New() const {
  return new AppendGroupResponse;
}

void AppendGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group()) {
      if (group_ != NULL) group_->::pbmsg::Group::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Group group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppendGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Group group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppendGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Group group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppendGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Group group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendGroupResponse::MergeFrom(const AppendGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      mutable_group()->::pbmsg::Group::MergeFrom(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendGroupResponse::CopyFrom(const AppendGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_group()) {
    if (!this->group().IsInitialized()) return false;
  }
  return true;
}

void AppendGroupResponse::Swap(AppendGroupResponse* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendGroupResponse_descriptor_;
  metadata.reflection = AppendGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyGroupRequest::kGroupFieldNumber;
#endif  // !_MSC_VER

ModifyGroupRequest::ModifyGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyGroupRequest::InitAsDefaultInstance() {
  group_ = const_cast< ::pbmsg::Group*>(&::pbmsg::Group::default_instance());
}

ModifyGroupRequest::ModifyGroupRequest(const ModifyGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyGroupRequest::~ModifyGroupRequest() {
  SharedDtor();
}

void ModifyGroupRequest::SharedDtor() {
  if (this != default_instance_) {
    delete group_;
  }
}

void ModifyGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyGroupRequest_descriptor_;
}

const ModifyGroupRequest& ModifyGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

ModifyGroupRequest* ModifyGroupRequest::default_instance_ = NULL;

ModifyGroupRequest* ModifyGroupRequest::New() const {
  return new ModifyGroupRequest;
}

void ModifyGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group()) {
      if (group_ != NULL) group_->::pbmsg::Group::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Group group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Group group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Group group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Group group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyGroupRequest::MergeFrom(const ModifyGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      mutable_group()->::pbmsg::Group::MergeFrom(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyGroupRequest::CopyFrom(const ModifyGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_group()) {
    if (!this->group().IsInitialized()) return false;
  }
  return true;
}

void ModifyGroupRequest::Swap(ModifyGroupRequest* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyGroupRequest_descriptor_;
  metadata.reflection = ModifyGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyGroupResponse::kGroupFieldNumber;
#endif  // !_MSC_VER

ModifyGroupResponse::ModifyGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyGroupResponse::InitAsDefaultInstance() {
  group_ = const_cast< ::pbmsg::Group*>(&::pbmsg::Group::default_instance());
}

ModifyGroupResponse::ModifyGroupResponse(const ModifyGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyGroupResponse::~ModifyGroupResponse() {
  SharedDtor();
}

void ModifyGroupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete group_;
  }
}

void ModifyGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyGroupResponse_descriptor_;
}

const ModifyGroupResponse& ModifyGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

ModifyGroupResponse* ModifyGroupResponse::default_instance_ = NULL;

ModifyGroupResponse* ModifyGroupResponse::New() const {
  return new ModifyGroupResponse;
}

void ModifyGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group()) {
      if (group_ != NULL) group_->::pbmsg::Group::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Group group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Group group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Group group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Group group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyGroupResponse::MergeFrom(const ModifyGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      mutable_group()->::pbmsg::Group::MergeFrom(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyGroupResponse::CopyFrom(const ModifyGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_group()) {
    if (!this->group().IsInitialized()) return false;
  }
  return true;
}

void ModifyGroupResponse::Swap(ModifyGroupResponse* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyGroupResponse_descriptor_;
  metadata.reflection = ModifyGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyParticipantsRequest::kGroupIdFieldNumber;
const int ModifyParticipantsRequest::kModifyTypeFieldNumber;
const int ModifyParticipantsRequest::kParticiapntsFieldNumber;
#endif  // !_MSC_VER

ModifyParticipantsRequest::ModifyParticipantsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyParticipantsRequest::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

ModifyParticipantsRequest::ModifyParticipantsRequest(const ModifyParticipantsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyParticipantsRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  modify_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyParticipantsRequest::~ModifyParticipantsRequest() {
  SharedDtor();
}

void ModifyParticipantsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
  }
}

void ModifyParticipantsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyParticipantsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyParticipantsRequest_descriptor_;
}

const ModifyParticipantsRequest& ModifyParticipantsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

ModifyParticipantsRequest* ModifyParticipantsRequest::default_instance_ = NULL;

ModifyParticipantsRequest* ModifyParticipantsRequest::New() const {
  return new ModifyParticipantsRequest;
}

void ModifyParticipantsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
    modify_type_ = 0;
  }
  particiapnts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyParticipantsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modify_type;
        break;
      }

      // required .pbmsg.ListModifyType modify_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modify_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::ListModifyType_IsValid(value)) {
            set_modify_type(static_cast< ::pbmsg::ListModifyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_particiapnts;
        break;
      }

      // repeated .pbmsg.Participant particiapnts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_particiapnts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_particiapnts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_particiapnts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyParticipantsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // required .pbmsg.ListModifyType modify_type = 2;
  if (has_modify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->modify_type(), output);
  }

  // repeated .pbmsg.Participant particiapnts = 3;
  for (int i = 0; i < this->particiapnts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->particiapnts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyParticipantsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // required .pbmsg.ListModifyType modify_type = 2;
  if (has_modify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->modify_type(), target);
  }

  // repeated .pbmsg.Participant particiapnts = 3;
  for (int i = 0; i < this->particiapnts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->particiapnts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyParticipantsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // required .pbmsg.ListModifyType modify_type = 2;
    if (has_modify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modify_type());
    }

  }
  // repeated .pbmsg.Participant particiapnts = 3;
  total_size += 1 * this->particiapnts_size();
  for (int i = 0; i < this->particiapnts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->particiapnts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyParticipantsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyParticipantsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyParticipantsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyParticipantsRequest::MergeFrom(const ModifyParticipantsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  particiapnts_.MergeFrom(from.particiapnts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
    if (from.has_modify_type()) {
      set_modify_type(from.modify_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyParticipantsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyParticipantsRequest::CopyFrom(const ModifyParticipantsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyParticipantsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ModifyParticipantsRequest::Swap(ModifyParticipantsRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(modify_type_, other->modify_type_);
    particiapnts_.Swap(&other->particiapnts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyParticipantsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyParticipantsRequest_descriptor_;
  metadata.reflection = ModifyParticipantsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyParticipantsResponse::kGroupIdFieldNumber;
const int ModifyParticipantsResponse::kModifyTypeFieldNumber;
const int ModifyParticipantsResponse::kParticiapntsFieldNumber;
#endif  // !_MSC_VER

ModifyParticipantsResponse::ModifyParticipantsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyParticipantsResponse::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

ModifyParticipantsResponse::ModifyParticipantsResponse(const ModifyParticipantsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyParticipantsResponse::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  modify_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyParticipantsResponse::~ModifyParticipantsResponse() {
  SharedDtor();
}

void ModifyParticipantsResponse::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
  }
}

void ModifyParticipantsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyParticipantsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyParticipantsResponse_descriptor_;
}

const ModifyParticipantsResponse& ModifyParticipantsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

ModifyParticipantsResponse* ModifyParticipantsResponse::default_instance_ = NULL;

ModifyParticipantsResponse* ModifyParticipantsResponse::New() const {
  return new ModifyParticipantsResponse;
}

void ModifyParticipantsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
    modify_type_ = 0;
  }
  particiapnts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyParticipantsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modify_type;
        break;
      }

      // required .pbmsg.ListModifyType modify_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modify_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::ListModifyType_IsValid(value)) {
            set_modify_type(static_cast< ::pbmsg::ListModifyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_particiapnts;
        break;
      }

      // repeated .pbmsg.Participant particiapnts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_particiapnts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_particiapnts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_particiapnts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyParticipantsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // required .pbmsg.ListModifyType modify_type = 2;
  if (has_modify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->modify_type(), output);
  }

  // repeated .pbmsg.Participant particiapnts = 3;
  for (int i = 0; i < this->particiapnts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->particiapnts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyParticipantsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // required .pbmsg.ListModifyType modify_type = 2;
  if (has_modify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->modify_type(), target);
  }

  // repeated .pbmsg.Participant particiapnts = 3;
  for (int i = 0; i < this->particiapnts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->particiapnts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyParticipantsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // required .pbmsg.ListModifyType modify_type = 2;
    if (has_modify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modify_type());
    }

  }
  // repeated .pbmsg.Participant particiapnts = 3;
  total_size += 1 * this->particiapnts_size();
  for (int i = 0; i < this->particiapnts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->particiapnts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyParticipantsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyParticipantsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyParticipantsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyParticipantsResponse::MergeFrom(const ModifyParticipantsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  particiapnts_.MergeFrom(from.particiapnts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
    if (from.has_modify_type()) {
      set_modify_type(from.modify_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyParticipantsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyParticipantsResponse::CopyFrom(const ModifyParticipantsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyParticipantsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ModifyParticipantsResponse::Swap(ModifyParticipantsResponse* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(modify_type_, other->modify_type_);
    particiapnts_.Swap(&other->particiapnts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyParticipantsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyParticipantsResponse_descriptor_;
  metadata.reflection = ModifyParticipantsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParticipantsNotification::kGroupIdFieldNumber;
const int ParticipantsNotification::kModifyTypeFieldNumber;
const int ParticipantsNotification::kParticiapntsFieldNumber;
#endif  // !_MSC_VER

ParticipantsNotification::ParticipantsNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParticipantsNotification::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

ParticipantsNotification::ParticipantsNotification(const ParticipantsNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParticipantsNotification::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  modify_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParticipantsNotification::~ParticipantsNotification() {
  SharedDtor();
}

void ParticipantsNotification::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
  }
}

void ParticipantsNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParticipantsNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParticipantsNotification_descriptor_;
}

const ParticipantsNotification& ParticipantsNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

ParticipantsNotification* ParticipantsNotification::default_instance_ = NULL;

ParticipantsNotification* ParticipantsNotification::New() const {
  return new ParticipantsNotification;
}

void ParticipantsNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
    modify_type_ = 0;
  }
  particiapnts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParticipantsNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modify_type;
        break;
      }

      // required .pbmsg.ListModifyType modify_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modify_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::ListModifyType_IsValid(value)) {
            set_modify_type(static_cast< ::pbmsg::ListModifyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_particiapnts;
        break;
      }

      // repeated .pbmsg.Participant particiapnts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_particiapnts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_particiapnts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_particiapnts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParticipantsNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // required .pbmsg.ListModifyType modify_type = 2;
  if (has_modify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->modify_type(), output);
  }

  // repeated .pbmsg.Participant particiapnts = 3;
  for (int i = 0; i < this->particiapnts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->particiapnts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParticipantsNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // required .pbmsg.ListModifyType modify_type = 2;
  if (has_modify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->modify_type(), target);
  }

  // repeated .pbmsg.Participant particiapnts = 3;
  for (int i = 0; i < this->particiapnts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->particiapnts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParticipantsNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // required .pbmsg.ListModifyType modify_type = 2;
    if (has_modify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modify_type());
    }

  }
  // repeated .pbmsg.Participant particiapnts = 3;
  total_size += 1 * this->particiapnts_size();
  for (int i = 0; i < this->particiapnts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->particiapnts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParticipantsNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParticipantsNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParticipantsNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParticipantsNotification::MergeFrom(const ParticipantsNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  particiapnts_.MergeFrom(from.particiapnts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
    if (from.has_modify_type()) {
      set_modify_type(from.modify_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParticipantsNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParticipantsNotification::CopyFrom(const ParticipantsNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantsNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ParticipantsNotification::Swap(ParticipantsNotification* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(modify_type_, other->modify_type_);
    particiapnts_.Swap(&other->particiapnts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParticipantsNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParticipantsNotification_descriptor_;
  metadata.reflection = ParticipantsNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinGroupRequestNotification::kGroupIdFieldNumber;
const int JoinGroupRequestNotification::kAccountIdFieldNumber;
#endif  // !_MSC_VER

JoinGroupRequestNotification::JoinGroupRequestNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinGroupRequestNotification::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  account_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

JoinGroupRequestNotification::JoinGroupRequestNotification(const JoinGroupRequestNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinGroupRequestNotification::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGroupRequestNotification::~JoinGroupRequestNotification() {
  SharedDtor();
}

void JoinGroupRequestNotification::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
    delete account_id_;
  }
}

void JoinGroupRequestNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroupRequestNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGroupRequestNotification_descriptor_;
}

const JoinGroupRequestNotification& JoinGroupRequestNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

JoinGroupRequestNotification* JoinGroupRequestNotification::default_instance_ = NULL;

JoinGroupRequestNotification* JoinGroupRequestNotification::New() const {
  return new JoinGroupRequestNotification;
}

void JoinGroupRequestNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinGroupRequestNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_id;
        break;
      }

      // required .pbmsg.Entity account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinGroupRequestNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // required .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinGroupRequestNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // required .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinGroupRequestNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // required .pbmsg.Entity account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroupRequestNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinGroupRequestNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinGroupRequestNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinGroupRequestNotification::MergeFrom(const JoinGroupRequestNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
    if (from.has_account_id()) {
      mutable_account_id()->::pbmsg::Entity::MergeFrom(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinGroupRequestNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroupRequestNotification::CopyFrom(const JoinGroupRequestNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupRequestNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void JoinGroupRequestNotification::Swap(JoinGroupRequestNotification* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinGroupRequestNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinGroupRequestNotification_descriptor_;
  metadata.reflection = JoinGroupRequestNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParticipantStatusNotification::kGroupIdFieldNumber;
const int ParticipantStatusNotification::kAccountIdFieldNumber;
const int ParticipantStatusNotification::kStatusFieldNumber;
#endif  // !_MSC_VER

ParticipantStatusNotification::ParticipantStatusNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParticipantStatusNotification::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  account_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

ParticipantStatusNotification::ParticipantStatusNotification(const ParticipantStatusNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParticipantStatusNotification::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  account_id_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParticipantStatusNotification::~ParticipantStatusNotification() {
  SharedDtor();
}

void ParticipantStatusNotification::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
    delete account_id_;
  }
}

void ParticipantStatusNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParticipantStatusNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParticipantStatusNotification_descriptor_;
}

const ParticipantStatusNotification& ParticipantStatusNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

ParticipantStatusNotification* ParticipantStatusNotification::default_instance_ = NULL;

ParticipantStatusNotification* ParticipantStatusNotification::New() const {
  return new ParticipantStatusNotification;
}

void ParticipantStatusNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::pbmsg::Entity::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParticipantStatusNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_id;
        break;
      }

      // required .pbmsg.Entity account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .pbmsg.SessionStatus status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::SessionStatus_IsValid(value)) {
            set_status(static_cast< ::pbmsg::SessionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParticipantStatusNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // required .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_id(), output);
  }

  // required .pbmsg.SessionStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParticipantStatusNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // required .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_id(), target);
  }

  // required .pbmsg.SessionStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParticipantStatusNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // required .pbmsg.Entity account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }

    // required .pbmsg.SessionStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParticipantStatusNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParticipantStatusNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParticipantStatusNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParticipantStatusNotification::MergeFrom(const ParticipantStatusNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
    if (from.has_account_id()) {
      mutable_account_id()->::pbmsg::Entity::MergeFrom(from.account_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParticipantStatusNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParticipantStatusNotification::CopyFrom(const ParticipantStatusNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantStatusNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ParticipantStatusNotification::Swap(ParticipantStatusNotification* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParticipantStatusNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParticipantStatusNotification_descriptor_;
  metadata.reflection = ParticipantStatusNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaMessageRequest::kIdFieldNumber;
const int MediaMessageRequest::kFromMessageIdFieldNumber;
const int MediaMessageRequest::kFromTimestampFieldNumber;
const int MediaMessageRequest::kMaxMessageCountFieldNumber;
#endif  // !_MSC_VER

MediaMessageRequest::MediaMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaMessageRequest::InitAsDefaultInstance() {
  id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

MediaMessageRequest::MediaMessageRequest(const MediaMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  from_message_id_ = 0u;
  from_timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_message_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaMessageRequest::~MediaMessageRequest() {
  SharedDtor();
}

void MediaMessageRequest::SharedDtor() {
  if (from_timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete from_timestamp_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void MediaMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaMessageRequest_descriptor_;
}

const MediaMessageRequest& MediaMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

MediaMessageRequest* MediaMessageRequest::default_instance_ = NULL;

MediaMessageRequest* MediaMessageRequest::New() const {
  return new MediaMessageRequest;
}

void MediaMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::pbmsg::Entity::Clear();
    }
    from_message_id_ = 0u;
    if (has_from_timestamp()) {
      if (from_timestamp_ != &::google::protobuf::internal::kEmptyString) {
        from_timestamp_->clear();
      }
    }
    max_message_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_from_message_id;
        break;
      }

      // optional fixed32 from_message_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_message_id_)));
          set_has_from_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from_timestamp;
        break;
      }

      // optional string from_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_timestamp().data(), this->from_timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_max_message_count;
        break;
      }

      // required fixed32 max_message_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &max_message_count_)));
          set_has_max_message_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional fixed32 from_message_id = 2;
  if (has_from_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->from_message_id(), output);
  }

  // optional string from_timestamp = 3;
  if (has_from_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_timestamp().data(), this->from_timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->from_timestamp(), output);
  }

  // required fixed32 max_message_count = 4;
  if (has_max_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->max_message_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional fixed32 from_message_id = 2;
  if (has_from_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->from_message_id(), target);
  }

  // optional string from_timestamp = 3;
  if (has_from_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_timestamp().data(), this->from_timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_timestamp(), target);
  }

  // required fixed32 max_message_count = 4;
  if (has_max_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->max_message_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional fixed32 from_message_id = 2;
    if (has_from_message_id()) {
      total_size += 1 + 4;
    }

    // optional string from_timestamp = 3;
    if (has_from_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_timestamp());
    }

    // required fixed32 max_message_count = 4;
    if (has_max_message_count()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaMessageRequest::MergeFrom(const MediaMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::pbmsg::Entity::MergeFrom(from.id());
    }
    if (from.has_from_message_id()) {
      set_from_message_id(from.from_message_id());
    }
    if (from.has_from_timestamp()) {
      set_from_timestamp(from.from_timestamp());
    }
    if (from.has_max_message_count()) {
      set_max_message_count(from.max_message_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaMessageRequest::CopyFrom(const MediaMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void MediaMessageRequest::Swap(MediaMessageRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(from_message_id_, other->from_message_id_);
    std::swap(from_timestamp_, other->from_timestamp_);
    std::swap(max_message_count_, other->max_message_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaMessageRequest_descriptor_;
  metadata.reflection = MediaMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaMessageResponse::kIdFieldNumber;
const int MediaMessageResponse::kMessagesFieldNumber;
const int MediaMessageResponse::kLeaveMessageCountFieldNumber;
#endif  // !_MSC_VER

MediaMessageResponse::MediaMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaMessageResponse::InitAsDefaultInstance() {
  id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

MediaMessageResponse::MediaMessageResponse(const MediaMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  leave_message_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaMessageResponse::~MediaMessageResponse() {
  SharedDtor();
}

void MediaMessageResponse::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void MediaMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaMessageResponse_descriptor_;
}

const MediaMessageResponse& MediaMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

MediaMessageResponse* MediaMessageResponse::default_instance_ = NULL;

MediaMessageResponse* MediaMessageResponse::New() const {
  return new MediaMessageResponse;
}

void MediaMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::pbmsg::Entity::Clear();
    }
    leave_message_count_ = 0u;
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        break;
      }

      // repeated .pbmsg.MediaMessage messages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        if (input->ExpectTag(29)) goto parse_leave_message_count;
        break;
      }

      // required fixed32 leave_message_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leave_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &leave_message_count_)));
          set_has_leave_message_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // repeated .pbmsg.MediaMessage messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->messages(i), output);
  }

  // required fixed32 leave_message_count = 3;
  if (has_leave_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->leave_message_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // repeated .pbmsg.MediaMessage messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->messages(i), target);
  }

  // required fixed32 leave_message_count = 3;
  if (has_leave_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->leave_message_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required fixed32 leave_message_count = 3;
    if (has_leave_message_count()) {
      total_size += 1 + 4;
    }

  }
  // repeated .pbmsg.MediaMessage messages = 2;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaMessageResponse::MergeFrom(const MediaMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::pbmsg::Entity::MergeFrom(from.id());
    }
    if (from.has_leave_message_count()) {
      set_leave_message_count(from.leave_message_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaMessageResponse::CopyFrom(const MediaMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void MediaMessageResponse::Swap(MediaMessageResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    messages_.Swap(&other->messages_);
    std::swap(leave_message_count_, other->leave_message_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaMessageResponse_descriptor_;
  metadata.reflection = MediaMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaMessageNotification::kIdFieldNumber;
const int MediaMessageNotification::kMsgFieldNumber;
#endif  // !_MSC_VER

MediaMessageNotification::MediaMessageNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaMessageNotification::InitAsDefaultInstance() {
  id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  msg_ = const_cast< ::pbmsg::MediaMessage*>(&::pbmsg::MediaMessage::default_instance());
}

MediaMessageNotification::MediaMessageNotification(const MediaMessageNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaMessageNotification::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaMessageNotification::~MediaMessageNotification() {
  SharedDtor();
}

void MediaMessageNotification::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete msg_;
  }
}

void MediaMessageNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaMessageNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaMessageNotification_descriptor_;
}

const MediaMessageNotification& MediaMessageNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

MediaMessageNotification* MediaMessageNotification::default_instance_ = NULL;

MediaMessageNotification* MediaMessageNotification::New() const {
  return new MediaMessageNotification;
}

void MediaMessageNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::pbmsg::Entity::Clear();
    }
    if (has_msg()) {
      if (msg_ != NULL) msg_->::pbmsg::MediaMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaMessageNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required .pbmsg.MediaMessage msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaMessageNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // required .pbmsg.MediaMessage msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaMessageNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // required .pbmsg.MediaMessage msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaMessageNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required .pbmsg.MediaMessage msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaMessageNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaMessageNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaMessageNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaMessageNotification::MergeFrom(const MediaMessageNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::pbmsg::Entity::MergeFrom(from.id());
    }
    if (from.has_msg()) {
      mutable_msg()->::pbmsg::MediaMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaMessageNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaMessageNotification::CopyFrom(const MediaMessageNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaMessageNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MediaMessageNotification::Swap(MediaMessageNotification* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaMessageNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaMessageNotification_descriptor_;
  metadata.reflection = MediaMessageNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParticipantConnectRequestNotification::kGroupIdFieldNumber;
const int ParticipantConnectRequestNotification::kAccountIdFieldNumber;
#endif  // !_MSC_VER

ParticipantConnectRequestNotification::ParticipantConnectRequestNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParticipantConnectRequestNotification::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  account_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

ParticipantConnectRequestNotification::ParticipantConnectRequestNotification(const ParticipantConnectRequestNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParticipantConnectRequestNotification::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParticipantConnectRequestNotification::~ParticipantConnectRequestNotification() {
  SharedDtor();
}

void ParticipantConnectRequestNotification::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
    delete account_id_;
  }
}

void ParticipantConnectRequestNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParticipantConnectRequestNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParticipantConnectRequestNotification_descriptor_;
}

const ParticipantConnectRequestNotification& ParticipantConnectRequestNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

ParticipantConnectRequestNotification* ParticipantConnectRequestNotification::default_instance_ = NULL;

ParticipantConnectRequestNotification* ParticipantConnectRequestNotification::New() const {
  return new ParticipantConnectRequestNotification;
}

void ParticipantConnectRequestNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParticipantConnectRequestNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_id;
        break;
      }

      // required .pbmsg.Entity account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParticipantConnectRequestNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // required .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParticipantConnectRequestNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // required .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParticipantConnectRequestNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // required .pbmsg.Entity account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParticipantConnectRequestNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParticipantConnectRequestNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParticipantConnectRequestNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParticipantConnectRequestNotification::MergeFrom(const ParticipantConnectRequestNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
    if (from.has_account_id()) {
      mutable_account_id()->::pbmsg::Entity::MergeFrom(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParticipantConnectRequestNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParticipantConnectRequestNotification::CopyFrom(const ParticipantConnectRequestNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantConnectRequestNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ParticipantConnectRequestNotification::Swap(ParticipantConnectRequestNotification* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParticipantConnectRequestNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParticipantConnectRequestNotification_descriptor_;
  metadata.reflection = ParticipantConnectRequestNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParticipantSpeakRequestNotification::kGroupIdFieldNumber;
const int ParticipantSpeakRequestNotification::kAccountIdFieldNumber;
#endif  // !_MSC_VER

ParticipantSpeakRequestNotification::ParticipantSpeakRequestNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParticipantSpeakRequestNotification::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  account_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

ParticipantSpeakRequestNotification::ParticipantSpeakRequestNotification(const ParticipantSpeakRequestNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParticipantSpeakRequestNotification::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParticipantSpeakRequestNotification::~ParticipantSpeakRequestNotification() {
  SharedDtor();
}

void ParticipantSpeakRequestNotification::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
    delete account_id_;
  }
}

void ParticipantSpeakRequestNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParticipantSpeakRequestNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParticipantSpeakRequestNotification_descriptor_;
}

const ParticipantSpeakRequestNotification& ParticipantSpeakRequestNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

ParticipantSpeakRequestNotification* ParticipantSpeakRequestNotification::default_instance_ = NULL;

ParticipantSpeakRequestNotification* ParticipantSpeakRequestNotification::New() const {
  return new ParticipantSpeakRequestNotification;
}

void ParticipantSpeakRequestNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParticipantSpeakRequestNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_id;
        break;
      }

      // required .pbmsg.Entity account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParticipantSpeakRequestNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // required .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParticipantSpeakRequestNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // required .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParticipantSpeakRequestNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // required .pbmsg.Entity account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParticipantSpeakRequestNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParticipantSpeakRequestNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParticipantSpeakRequestNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParticipantSpeakRequestNotification::MergeFrom(const ParticipantSpeakRequestNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
    if (from.has_account_id()) {
      mutable_account_id()->::pbmsg::Entity::MergeFrom(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParticipantSpeakRequestNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParticipantSpeakRequestNotification::CopyFrom(const ParticipantSpeakRequestNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantSpeakRequestNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ParticipantSpeakRequestNotification::Swap(ParticipantSpeakRequestNotification* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParticipantSpeakRequestNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParticipantSpeakRequestNotification_descriptor_;
  metadata.reflection = ParticipantSpeakRequestNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteParticipantRequest::kGroupIdFieldNumber;
const int InviteParticipantRequest::kAccountIdFieldNumber;
#endif  // !_MSC_VER

InviteParticipantRequest::InviteParticipantRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteParticipantRequest::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  account_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

InviteParticipantRequest::InviteParticipantRequest(const InviteParticipantRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteParticipantRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteParticipantRequest::~InviteParticipantRequest() {
  SharedDtor();
}

void InviteParticipantRequest::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
    delete account_id_;
  }
}

void InviteParticipantRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteParticipantRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteParticipantRequest_descriptor_;
}

const InviteParticipantRequest& InviteParticipantRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

InviteParticipantRequest* InviteParticipantRequest::default_instance_ = NULL;

InviteParticipantRequest* InviteParticipantRequest::New() const {
  return new InviteParticipantRequest;
}

void InviteParticipantRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteParticipantRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_id;
        break;
      }

      // optional .pbmsg.Entity account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteParticipantRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // optional .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteParticipantRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // optional .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteParticipantRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // optional .pbmsg.Entity account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteParticipantRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteParticipantRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteParticipantRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteParticipantRequest::MergeFrom(const InviteParticipantRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
    if (from.has_account_id()) {
      mutable_account_id()->::pbmsg::Entity::MergeFrom(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteParticipantRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteParticipantRequest::CopyFrom(const InviteParticipantRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteParticipantRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteParticipantRequest::Swap(InviteParticipantRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteParticipantRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteParticipantRequest_descriptor_;
  metadata.reflection = InviteParticipantRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropParticipantRequest::kGroupIdFieldNumber;
const int DropParticipantRequest::kAccountIdFieldNumber;
#endif  // !_MSC_VER

DropParticipantRequest::DropParticipantRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropParticipantRequest::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  account_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

DropParticipantRequest::DropParticipantRequest(const DropParticipantRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropParticipantRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropParticipantRequest::~DropParticipantRequest() {
  SharedDtor();
}

void DropParticipantRequest::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
    delete account_id_;
  }
}

void DropParticipantRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropParticipantRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropParticipantRequest_descriptor_;
}

const DropParticipantRequest& DropParticipantRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

DropParticipantRequest* DropParticipantRequest::default_instance_ = NULL;

DropParticipantRequest* DropParticipantRequest::New() const {
  return new DropParticipantRequest;
}

void DropParticipantRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropParticipantRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_id;
        break;
      }

      // optional .pbmsg.Entity account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropParticipantRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // optional .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropParticipantRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // optional .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropParticipantRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // optional .pbmsg.Entity account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropParticipantRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropParticipantRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropParticipantRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropParticipantRequest::MergeFrom(const DropParticipantRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
    if (from.has_account_id()) {
      mutable_account_id()->::pbmsg::Entity::MergeFrom(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropParticipantRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropParticipantRequest::CopyFrom(const DropParticipantRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropParticipantRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DropParticipantRequest::Swap(DropParticipantRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropParticipantRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropParticipantRequest_descriptor_;
  metadata.reflection = DropParticipantRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReleaseParticipantTokenRequest::kGroupIdFieldNumber;
const int ReleaseParticipantTokenRequest::kAccountIdFieldNumber;
#endif  // !_MSC_VER

ReleaseParticipantTokenRequest::ReleaseParticipantTokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReleaseParticipantTokenRequest::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  account_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

ReleaseParticipantTokenRequest::ReleaseParticipantTokenRequest(const ReleaseParticipantTokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReleaseParticipantTokenRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReleaseParticipantTokenRequest::~ReleaseParticipantTokenRequest() {
  SharedDtor();
}

void ReleaseParticipantTokenRequest::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
    delete account_id_;
  }
}

void ReleaseParticipantTokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReleaseParticipantTokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReleaseParticipantTokenRequest_descriptor_;
}

const ReleaseParticipantTokenRequest& ReleaseParticipantTokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

ReleaseParticipantTokenRequest* ReleaseParticipantTokenRequest::default_instance_ = NULL;

ReleaseParticipantTokenRequest* ReleaseParticipantTokenRequest::New() const {
  return new ReleaseParticipantTokenRequest;
}

void ReleaseParticipantTokenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReleaseParticipantTokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_id;
        break;
      }

      // required .pbmsg.Entity account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReleaseParticipantTokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // required .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReleaseParticipantTokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // required .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReleaseParticipantTokenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // required .pbmsg.Entity account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReleaseParticipantTokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReleaseParticipantTokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReleaseParticipantTokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReleaseParticipantTokenRequest::MergeFrom(const ReleaseParticipantTokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
    if (from.has_account_id()) {
      mutable_account_id()->::pbmsg::Entity::MergeFrom(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReleaseParticipantTokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseParticipantTokenRequest::CopyFrom(const ReleaseParticipantTokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseParticipantTokenRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReleaseParticipantTokenRequest::Swap(ReleaseParticipantTokenRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReleaseParticipantTokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReleaseParticipantTokenRequest_descriptor_;
  metadata.reflection = ReleaseParticipantTokenRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppointParticipantSpeakRequest::kGroupIdFieldNumber;
const int AppointParticipantSpeakRequest::kAccountIdFieldNumber;
#endif  // !_MSC_VER

AppointParticipantSpeakRequest::AppointParticipantSpeakRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppointParticipantSpeakRequest::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  account_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

AppointParticipantSpeakRequest::AppointParticipantSpeakRequest(const AppointParticipantSpeakRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppointParticipantSpeakRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppointParticipantSpeakRequest::~AppointParticipantSpeakRequest() {
  SharedDtor();
}

void AppointParticipantSpeakRequest::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
    delete account_id_;
  }
}

void AppointParticipantSpeakRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppointParticipantSpeakRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppointParticipantSpeakRequest_descriptor_;
}

const AppointParticipantSpeakRequest& AppointParticipantSpeakRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

AppointParticipantSpeakRequest* AppointParticipantSpeakRequest::default_instance_ = NULL;

AppointParticipantSpeakRequest* AppointParticipantSpeakRequest::New() const {
  return new AppointParticipantSpeakRequest;
}

void AppointParticipantSpeakRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppointParticipantSpeakRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_id;
        break;
      }

      // required .pbmsg.Entity account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppointParticipantSpeakRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // required .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppointParticipantSpeakRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // required .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppointParticipantSpeakRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // required .pbmsg.Entity account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppointParticipantSpeakRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppointParticipantSpeakRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppointParticipantSpeakRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppointParticipantSpeakRequest::MergeFrom(const AppointParticipantSpeakRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
    if (from.has_account_id()) {
      mutable_account_id()->::pbmsg::Entity::MergeFrom(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppointParticipantSpeakRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppointParticipantSpeakRequest::CopyFrom(const AppointParticipantSpeakRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppointParticipantSpeakRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AppointParticipantSpeakRequest::Swap(AppointParticipantSpeakRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppointParticipantSpeakRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppointParticipantSpeakRequest_descriptor_;
  metadata.reflection = AppointParticipantSpeakRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JionGroupRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

JionGroupRequest::JionGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JionGroupRequest::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

JionGroupRequest::JionGroupRequest(const JionGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JionGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JionGroupRequest::~JionGroupRequest() {
  SharedDtor();
}

void JionGroupRequest::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
  }
}

void JionGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JionGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JionGroupRequest_descriptor_;
}

const JionGroupRequest& JionGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

JionGroupRequest* JionGroupRequest::default_instance_ = NULL;

JionGroupRequest* JionGroupRequest::New() const {
  return new JionGroupRequest;
}

void JionGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JionGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JionGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JionGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JionGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JionGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JionGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JionGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JionGroupRequest::MergeFrom(const JionGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JionGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JionGroupRequest::CopyFrom(const JionGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JionGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JionGroupRequest::Swap(JionGroupRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JionGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JionGroupRequest_descriptor_;
  metadata.reflection = JionGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveGroupRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

LeaveGroupRequest::LeaveGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveGroupRequest::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

LeaveGroupRequest::LeaveGroupRequest(const LeaveGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveGroupRequest::~LeaveGroupRequest() {
  SharedDtor();
}

void LeaveGroupRequest::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
  }
}

void LeaveGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveGroupRequest_descriptor_;
}

const LeaveGroupRequest& LeaveGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

LeaveGroupRequest* LeaveGroupRequest::default_instance_ = NULL;

LeaveGroupRequest* LeaveGroupRequest::New() const {
  return new LeaveGroupRequest;
}

void LeaveGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveGroupRequest::MergeFrom(const LeaveGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveGroupRequest::CopyFrom(const LeaveGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LeaveGroupRequest::Swap(LeaveGroupRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveGroupRequest_descriptor_;
  metadata.reflection = LeaveGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionStatusNotification::kGroupIdFieldNumber;
const int SessionStatusNotification::kStatusFieldNumber;
#endif  // !_MSC_VER

SessionStatusNotification::SessionStatusNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SessionStatusNotification::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

SessionStatusNotification::SessionStatusNotification(const SessionStatusNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SessionStatusNotification::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionStatusNotification::~SessionStatusNotification() {
  SharedDtor();
}

void SessionStatusNotification::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
  }
}

void SessionStatusNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionStatusNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionStatusNotification_descriptor_;
}

const SessionStatusNotification& SessionStatusNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

SessionStatusNotification* SessionStatusNotification::default_instance_ = NULL;

SessionStatusNotification* SessionStatusNotification::New() const {
  return new SessionStatusNotification;
}

void SessionStatusNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionStatusNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .pbmsg.SessionStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::SessionStatus_IsValid(value)) {
            set_status(static_cast< ::pbmsg::SessionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionStatusNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // required .pbmsg.SessionStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SessionStatusNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // required .pbmsg.SessionStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SessionStatusNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // required .pbmsg.SessionStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionStatusNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionStatusNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionStatusNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionStatusNotification::MergeFrom(const SessionStatusNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionStatusNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionStatusNotification::CopyFrom(const SessionStatusNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionStatusNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SessionStatusNotification::Swap(SessionStatusNotification* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionStatusNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionStatusNotification_descriptor_;
  metadata.reflection = SessionStatusNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMessageRequest::kIdFieldNumber;
const int SendMessageRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

SendMessageRequest::SendMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendMessageRequest::InitAsDefaultInstance() {
  id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  msg_ = const_cast< ::pbmsg::MediaMessage*>(&::pbmsg::MediaMessage::default_instance());
}

SendMessageRequest::SendMessageRequest(const SendMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMessageRequest::~SendMessageRequest() {
  SharedDtor();
}

void SendMessageRequest::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete msg_;
  }
}

void SendMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMessageRequest_descriptor_;
}

const SendMessageRequest& SendMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

SendMessageRequest* SendMessageRequest::default_instance_ = NULL;

SendMessageRequest* SendMessageRequest::New() const {
  return new SendMessageRequest;
}

void SendMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::pbmsg::Entity::Clear();
    }
    if (has_msg()) {
      if (msg_ != NULL) msg_->::pbmsg::MediaMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required .pbmsg.MediaMessage msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // required .pbmsg.MediaMessage msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // required .pbmsg.MediaMessage msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required .pbmsg.MediaMessage msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMessageRequest::MergeFrom(const SendMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::pbmsg::Entity::MergeFrom(from.id());
    }
    if (from.has_msg()) {
      mutable_msg()->::pbmsg::MediaMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageRequest::CopyFrom(const SendMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SendMessageRequest::Swap(SendMessageRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMessageRequest_descriptor_;
  metadata.reflection = SendMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickParticipantRequest::kGroupIdFieldNumber;
const int KickParticipantRequest::kAccountIdFieldNumber;
#endif  // !_MSC_VER

KickParticipantRequest::KickParticipantRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickParticipantRequest::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  account_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

KickParticipantRequest::KickParticipantRequest(const KickParticipantRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickParticipantRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickParticipantRequest::~KickParticipantRequest() {
  SharedDtor();
}

void KickParticipantRequest::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
    delete account_id_;
  }
}

void KickParticipantRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickParticipantRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickParticipantRequest_descriptor_;
}

const KickParticipantRequest& KickParticipantRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

KickParticipantRequest* KickParticipantRequest::default_instance_ = NULL;

KickParticipantRequest* KickParticipantRequest::New() const {
  return new KickParticipantRequest;
}

void KickParticipantRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickParticipantRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_id;
        break;
      }

      // optional .pbmsg.Entity account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickParticipantRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // optional .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickParticipantRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // optional .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickParticipantRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // optional .pbmsg.Entity account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickParticipantRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickParticipantRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickParticipantRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickParticipantRequest::MergeFrom(const KickParticipantRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
    if (from.has_account_id()) {
      mutable_account_id()->::pbmsg::Entity::MergeFrom(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickParticipantRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickParticipantRequest::CopyFrom(const KickParticipantRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickParticipantRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KickParticipantRequest::Swap(KickParticipantRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickParticipantRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickParticipantRequest_descriptor_;
  metadata.reflection = KickParticipantRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartRecordRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

StartRecordRequest::StartRecordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartRecordRequest::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

StartRecordRequest::StartRecordRequest(const StartRecordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartRecordRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartRecordRequest::~StartRecordRequest() {
  SharedDtor();
}

void StartRecordRequest::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
  }
}

void StartRecordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartRecordRequest_descriptor_;
}

const StartRecordRequest& StartRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

StartRecordRequest* StartRecordRequest::default_instance_ = NULL;

StartRecordRequest* StartRecordRequest::New() const {
  return new StartRecordRequest;
}

void StartRecordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartRecordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartRecordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartRecordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartRecordRequest::MergeFrom(const StartRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRecordRequest::CopyFrom(const StartRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRecordRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StartRecordRequest::Swap(StartRecordRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartRecordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartRecordRequest_descriptor_;
  metadata.reflection = StartRecordRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopRecordRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

StopRecordRequest::StopRecordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopRecordRequest::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

StopRecordRequest::StopRecordRequest(const StopRecordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopRecordRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopRecordRequest::~StopRecordRequest() {
  SharedDtor();
}

void StopRecordRequest::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
  }
}

void StopRecordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopRecordRequest_descriptor_;
}

const StopRecordRequest& StopRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

StopRecordRequest* StopRecordRequest::default_instance_ = NULL;

StopRecordRequest* StopRecordRequest::New() const {
  return new StopRecordRequest;
}

void StopRecordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopRecordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopRecordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopRecordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopRecordRequest::MergeFrom(const StopRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopRecordRequest::CopyFrom(const StopRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRecordRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StopRecordRequest::Swap(StopRecordRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopRecordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopRecordRequest_descriptor_;
  metadata.reflection = StopRecordRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordStatusNotification::kGroupIdFieldNumber;
const int RecordStatusNotification::kRecordingFieldNumber;
#endif  // !_MSC_VER

RecordStatusNotification::RecordStatusNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordStatusNotification::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

RecordStatusNotification::RecordStatusNotification(const RecordStatusNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordStatusNotification::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  recording_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordStatusNotification::~RecordStatusNotification() {
  SharedDtor();
}

void RecordStatusNotification::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
  }
}

void RecordStatusNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordStatusNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordStatusNotification_descriptor_;
}

const RecordStatusNotification& RecordStatusNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

RecordStatusNotification* RecordStatusNotification::default_instance_ = NULL;

RecordStatusNotification* RecordStatusNotification::New() const {
  return new RecordStatusNotification;
}

void RecordStatusNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
    recording_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordStatusNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recording;
        break;
      }

      // required bool recording = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recording:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recording_)));
          set_has_recording();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordStatusNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  // required bool recording = 2;
  if (has_recording()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->recording(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordStatusNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  // required bool recording = 2;
  if (has_recording()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->recording(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordStatusNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

    // required bool recording = 2;
    if (has_recording()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordStatusNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordStatusNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordStatusNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordStatusNotification::MergeFrom(const RecordStatusNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
    if (from.has_recording()) {
      set_recording(from.recording());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordStatusNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordStatusNotification::CopyFrom(const RecordStatusNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordStatusNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RecordStatusNotification::Swap(RecordStatusNotification* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(recording_, other->recording_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordStatusNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordStatusNotification_descriptor_;
  metadata.reflection = RecordStatusNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeAccountLocationRequest::kSubscribingFieldNumber;
const int SubscribeAccountLocationRequest::kAccountIdFieldNumber;
const int SubscribeAccountLocationRequest::kTtlFieldNumber;
#endif  // !_MSC_VER

SubscribeAccountLocationRequest::SubscribeAccountLocationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeAccountLocationRequest::InitAsDefaultInstance() {
  account_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

SubscribeAccountLocationRequest::SubscribeAccountLocationRequest(const SubscribeAccountLocationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeAccountLocationRequest::SharedCtor() {
  _cached_size_ = 0;
  subscribing_ = false;
  account_id_ = NULL;
  ttl_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeAccountLocationRequest::~SubscribeAccountLocationRequest() {
  SharedDtor();
}

void SubscribeAccountLocationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete account_id_;
  }
}

void SubscribeAccountLocationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeAccountLocationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeAccountLocationRequest_descriptor_;
}

const SubscribeAccountLocationRequest& SubscribeAccountLocationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

SubscribeAccountLocationRequest* SubscribeAccountLocationRequest::default_instance_ = NULL;

SubscribeAccountLocationRequest* SubscribeAccountLocationRequest::New() const {
  return new SubscribeAccountLocationRequest;
}

void SubscribeAccountLocationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    subscribing_ = false;
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::pbmsg::Entity::Clear();
    }
    ttl_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeAccountLocationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool subscribing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subscribing_)));
          set_has_subscribing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_id;
        break;
      }

      // required .pbmsg.Entity account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ttl;
        break;
      }

      // required fixed32 ttl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeAccountLocationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool subscribing = 1;
  if (has_subscribing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->subscribing(), output);
  }

  // required .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_id(), output);
  }

  // required fixed32 ttl = 3;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->ttl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeAccountLocationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool subscribing = 1;
  if (has_subscribing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->subscribing(), target);
  }

  // required .pbmsg.Entity account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_id(), target);
  }

  // required fixed32 ttl = 3;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->ttl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeAccountLocationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool subscribing = 1;
    if (has_subscribing()) {
      total_size += 1 + 1;
    }

    // required .pbmsg.Entity account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }

    // required fixed32 ttl = 3;
    if (has_ttl()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeAccountLocationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeAccountLocationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeAccountLocationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeAccountLocationRequest::MergeFrom(const SubscribeAccountLocationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subscribing()) {
      set_subscribing(from.subscribing());
    }
    if (from.has_account_id()) {
      mutable_account_id()->::pbmsg::Entity::MergeFrom(from.account_id());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeAccountLocationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeAccountLocationRequest::CopyFrom(const SubscribeAccountLocationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeAccountLocationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SubscribeAccountLocationRequest::Swap(SubscribeAccountLocationRequest* other) {
  if (other != this) {
    std::swap(subscribing_, other->subscribing_);
    std::swap(account_id_, other->account_id_);
    std::swap(ttl_, other->ttl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeAccountLocationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeAccountLocationRequest_descriptor_;
  metadata.reflection = SubscribeAccountLocationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLocationNotification::kAccountIdFieldNumber;
const int AccountLocationNotification::kLongitudeFieldNumber;
const int AccountLocationNotification::kLatitudeFieldNumber;
const int AccountLocationNotification::kTimestampFieldNumber;
#endif  // !_MSC_VER

AccountLocationNotification::AccountLocationNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountLocationNotification::InitAsDefaultInstance() {
  account_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

AccountLocationNotification::AccountLocationNotification(const AccountLocationNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountLocationNotification::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = NULL;
  longitude_ = 0;
  latitude_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLocationNotification::~AccountLocationNotification() {
  SharedDtor();
}

void AccountLocationNotification::SharedDtor() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
    delete account_id_;
  }
}

void AccountLocationNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLocationNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLocationNotification_descriptor_;
}

const AccountLocationNotification& AccountLocationNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

AccountLocationNotification* AccountLocationNotification::default_instance_ = NULL;

AccountLocationNotification* AccountLocationNotification::New() const {
  return new AccountLocationNotification;
}

void AccountLocationNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::pbmsg::Entity::Clear();
    }
    longitude_ = 0;
    latitude_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLocationNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // required double longitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_timestamp;
        break;
      }

      // required string timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountLocationNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->account_id(), output);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required string timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountLocationNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account_id(), target);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // required string timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountLocationNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }

    // required double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required double latitude = 3;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required string timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLocationNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLocationNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLocationNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLocationNotification::MergeFrom(const AccountLocationNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      mutable_account_id()->::pbmsg::Entity::MergeFrom(from.account_id());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLocationNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLocationNotification::CopyFrom(const AccountLocationNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLocationNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AccountLocationNotification::Swap(AccountLocationNotification* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLocationNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLocationNotification_descriptor_;
  metadata.reflection = AccountLocationNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendAlertRequest::kAlertFieldNumber;
const int AppendAlertRequest::kMembersFieldNumber;
#endif  // !_MSC_VER

AppendAlertRequest::AppendAlertRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendAlertRequest::InitAsDefaultInstance() {
  alert_ = const_cast< ::pbmsg::Alert*>(&::pbmsg::Alert::default_instance());
}

AppendAlertRequest::AppendAlertRequest(const AppendAlertRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendAlertRequest::SharedCtor() {
  _cached_size_ = 0;
  alert_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendAlertRequest::~AppendAlertRequest() {
  SharedDtor();
}

void AppendAlertRequest::SharedDtor() {
  if (this != default_instance_) {
    delete alert_;
  }
}

void AppendAlertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendAlertRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendAlertRequest_descriptor_;
}

const AppendAlertRequest& AppendAlertRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

AppendAlertRequest* AppendAlertRequest::default_instance_ = NULL;

AppendAlertRequest* AppendAlertRequest::New() const {
  return new AppendAlertRequest;
}

void AppendAlertRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alert()) {
      if (alert_ != NULL) alert_->::pbmsg::Alert::Clear();
    }
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendAlertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Alert alert = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .pbmsg.Entity members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppendAlertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Alert alert = 1;
  if (has_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alert(), output);
  }

  // repeated .pbmsg.Entity members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppendAlertRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Alert alert = 1;
  if (has_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alert(), target);
  }

  // repeated .pbmsg.Entity members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppendAlertRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Alert alert = 1;
    if (has_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert());
    }

  }
  // repeated .pbmsg.Entity members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendAlertRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendAlertRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendAlertRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendAlertRequest::MergeFrom(const AppendAlertRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alert()) {
      mutable_alert()->::pbmsg::Alert::MergeFrom(from.alert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendAlertRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendAlertRequest::CopyFrom(const AppendAlertRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendAlertRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alert()) {
    if (!this->alert().IsInitialized()) return false;
  }
  return true;
}

void AppendAlertRequest::Swap(AppendAlertRequest* other) {
  if (other != this) {
    std::swap(alert_, other->alert_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendAlertRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendAlertRequest_descriptor_;
  metadata.reflection = AppendAlertRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendAlertResponse::kAlertFieldNumber;
#endif  // !_MSC_VER

AppendAlertResponse::AppendAlertResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendAlertResponse::InitAsDefaultInstance() {
  alert_ = const_cast< ::pbmsg::Alert*>(&::pbmsg::Alert::default_instance());
}

AppendAlertResponse::AppendAlertResponse(const AppendAlertResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendAlertResponse::SharedCtor() {
  _cached_size_ = 0;
  alert_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendAlertResponse::~AppendAlertResponse() {
  SharedDtor();
}

void AppendAlertResponse::SharedDtor() {
  if (this != default_instance_) {
    delete alert_;
  }
}

void AppendAlertResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendAlertResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendAlertResponse_descriptor_;
}

const AppendAlertResponse& AppendAlertResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

AppendAlertResponse* AppendAlertResponse::default_instance_ = NULL;

AppendAlertResponse* AppendAlertResponse::New() const {
  return new AppendAlertResponse;
}

void AppendAlertResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alert()) {
      if (alert_ != NULL) alert_->::pbmsg::Alert::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendAlertResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Alert alert = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppendAlertResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Alert alert = 1;
  if (has_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppendAlertResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Alert alert = 1;
  if (has_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppendAlertResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Alert alert = 1;
    if (has_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendAlertResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendAlertResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendAlertResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendAlertResponse::MergeFrom(const AppendAlertResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alert()) {
      mutable_alert()->::pbmsg::Alert::MergeFrom(from.alert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendAlertResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendAlertResponse::CopyFrom(const AppendAlertResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendAlertResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alert()) {
    if (!this->alert().IsInitialized()) return false;
  }
  return true;
}

void AppendAlertResponse::Swap(AppendAlertResponse* other) {
  if (other != this) {
    std::swap(alert_, other->alert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendAlertResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendAlertResponse_descriptor_;
  metadata.reflection = AppendAlertResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyAlertRequest::kAlertFieldNumber;
#endif  // !_MSC_VER

ModifyAlertRequest::ModifyAlertRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyAlertRequest::InitAsDefaultInstance() {
  alert_ = const_cast< ::pbmsg::Alert*>(&::pbmsg::Alert::default_instance());
}

ModifyAlertRequest::ModifyAlertRequest(const ModifyAlertRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyAlertRequest::SharedCtor() {
  _cached_size_ = 0;
  alert_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyAlertRequest::~ModifyAlertRequest() {
  SharedDtor();
}

void ModifyAlertRequest::SharedDtor() {
  if (this != default_instance_) {
    delete alert_;
  }
}

void ModifyAlertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyAlertRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyAlertRequest_descriptor_;
}

const ModifyAlertRequest& ModifyAlertRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

ModifyAlertRequest* ModifyAlertRequest::default_instance_ = NULL;

ModifyAlertRequest* ModifyAlertRequest::New() const {
  return new ModifyAlertRequest;
}

void ModifyAlertRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alert()) {
      if (alert_ != NULL) alert_->::pbmsg::Alert::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyAlertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Alert alert = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyAlertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Alert alert = 1;
  if (has_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyAlertRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Alert alert = 1;
  if (has_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyAlertRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Alert alert = 1;
    if (has_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyAlertRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyAlertRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyAlertRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyAlertRequest::MergeFrom(const ModifyAlertRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alert()) {
      mutable_alert()->::pbmsg::Alert::MergeFrom(from.alert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyAlertRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyAlertRequest::CopyFrom(const ModifyAlertRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyAlertRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alert()) {
    if (!this->alert().IsInitialized()) return false;
  }
  return true;
}

void ModifyAlertRequest::Swap(ModifyAlertRequest* other) {
  if (other != this) {
    std::swap(alert_, other->alert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyAlertRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyAlertRequest_descriptor_;
  metadata.reflection = ModifyAlertRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopAlertRequest::kAlertIdFieldNumber;
#endif  // !_MSC_VER

StopAlertRequest::StopAlertRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopAlertRequest::InitAsDefaultInstance() {
  alert_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

StopAlertRequest::StopAlertRequest(const StopAlertRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopAlertRequest::SharedCtor() {
  _cached_size_ = 0;
  alert_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopAlertRequest::~StopAlertRequest() {
  SharedDtor();
}

void StopAlertRequest::SharedDtor() {
  if (this != default_instance_) {
    delete alert_id_;
  }
}

void StopAlertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopAlertRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopAlertRequest_descriptor_;
}

const StopAlertRequest& StopAlertRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

StopAlertRequest* StopAlertRequest::default_instance_ = NULL;

StopAlertRequest* StopAlertRequest::New() const {
  return new StopAlertRequest;
}

void StopAlertRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alert_id()) {
      if (alert_id_ != NULL) alert_id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopAlertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity alert_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopAlertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity alert_id = 1;
  if (has_alert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alert_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopAlertRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity alert_id = 1;
  if (has_alert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alert_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopAlertRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity alert_id = 1;
    if (has_alert_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopAlertRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopAlertRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopAlertRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopAlertRequest::MergeFrom(const StopAlertRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alert_id()) {
      mutable_alert_id()->::pbmsg::Entity::MergeFrom(from.alert_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopAlertRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopAlertRequest::CopyFrom(const StopAlertRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopAlertRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StopAlertRequest::Swap(StopAlertRequest* other) {
  if (other != this) {
    std::swap(alert_id_, other->alert_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopAlertRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopAlertRequest_descriptor_;
  metadata.reflection = StopAlertRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlertOveredNotification::kAlertIdFieldNumber;
#endif  // !_MSC_VER

AlertOveredNotification::AlertOveredNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlertOveredNotification::InitAsDefaultInstance() {
  alert_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

AlertOveredNotification::AlertOveredNotification(const AlertOveredNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlertOveredNotification::SharedCtor() {
  _cached_size_ = 0;
  alert_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlertOveredNotification::~AlertOveredNotification() {
  SharedDtor();
}

void AlertOveredNotification::SharedDtor() {
  if (this != default_instance_) {
    delete alert_id_;
  }
}

void AlertOveredNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlertOveredNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlertOveredNotification_descriptor_;
}

const AlertOveredNotification& AlertOveredNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

AlertOveredNotification* AlertOveredNotification::default_instance_ = NULL;

AlertOveredNotification* AlertOveredNotification::New() const {
  return new AlertOveredNotification;
}

void AlertOveredNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alert_id()) {
      if (alert_id_ != NULL) alert_id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlertOveredNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity alert_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlertOveredNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity alert_id = 1;
  if (has_alert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alert_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlertOveredNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity alert_id = 1;
  if (has_alert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alert_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlertOveredNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity alert_id = 1;
    if (has_alert_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlertOveredNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlertOveredNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlertOveredNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlertOveredNotification::MergeFrom(const AlertOveredNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alert_id()) {
      mutable_alert_id()->::pbmsg::Entity::MergeFrom(from.alert_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlertOveredNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlertOveredNotification::CopyFrom(const AlertOveredNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlertOveredNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AlertOveredNotification::Swap(AlertOveredNotification* other) {
  if (other != this) {
    std::swap(alert_id_, other->alert_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlertOveredNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlertOveredNotification_descriptor_;
  metadata.reflection = AlertOveredNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryAlertsRequest::kNameFieldNumber;
const int HistoryAlertsRequest::kCreateTimeFromFieldNumber;
const int HistoryAlertsRequest::kCreateTimeToFieldNumber;
const int HistoryAlertsRequest::kAlramTimeFromFieldNumber;
const int HistoryAlertsRequest::kAlramTimeToFieldNumber;
const int HistoryAlertsRequest::kOverTimeFromFieldNumber;
const int HistoryAlertsRequest::kOverTimeToFieldNumber;
#endif  // !_MSC_VER

HistoryAlertsRequest::HistoryAlertsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryAlertsRequest::InitAsDefaultInstance() {
}

HistoryAlertsRequest::HistoryAlertsRequest(const HistoryAlertsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryAlertsRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_time_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_time_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alram_time_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alram_time_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  over_time_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  over_time_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryAlertsRequest::~HistoryAlertsRequest() {
  SharedDtor();
}

void HistoryAlertsRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (create_time_from_ != &::google::protobuf::internal::kEmptyString) {
    delete create_time_from_;
  }
  if (create_time_to_ != &::google::protobuf::internal::kEmptyString) {
    delete create_time_to_;
  }
  if (alram_time_from_ != &::google::protobuf::internal::kEmptyString) {
    delete alram_time_from_;
  }
  if (alram_time_to_ != &::google::protobuf::internal::kEmptyString) {
    delete alram_time_to_;
  }
  if (over_time_from_ != &::google::protobuf::internal::kEmptyString) {
    delete over_time_from_;
  }
  if (over_time_to_ != &::google::protobuf::internal::kEmptyString) {
    delete over_time_to_;
  }
  if (this != default_instance_) {
  }
}

void HistoryAlertsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryAlertsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryAlertsRequest_descriptor_;
}

const HistoryAlertsRequest& HistoryAlertsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

HistoryAlertsRequest* HistoryAlertsRequest::default_instance_ = NULL;

HistoryAlertsRequest* HistoryAlertsRequest::New() const {
  return new HistoryAlertsRequest;
}

void HistoryAlertsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_create_time_from()) {
      if (create_time_from_ != &::google::protobuf::internal::kEmptyString) {
        create_time_from_->clear();
      }
    }
    if (has_create_time_to()) {
      if (create_time_to_ != &::google::protobuf::internal::kEmptyString) {
        create_time_to_->clear();
      }
    }
    if (has_alram_time_from()) {
      if (alram_time_from_ != &::google::protobuf::internal::kEmptyString) {
        alram_time_from_->clear();
      }
    }
    if (has_alram_time_to()) {
      if (alram_time_to_ != &::google::protobuf::internal::kEmptyString) {
        alram_time_to_->clear();
      }
    }
    if (has_over_time_from()) {
      if (over_time_from_ != &::google::protobuf::internal::kEmptyString) {
        over_time_from_->clear();
      }
    }
    if (has_over_time_to()) {
      if (over_time_to_ != &::google::protobuf::internal::kEmptyString) {
        over_time_to_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryAlertsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_create_time_from;
        break;
      }

      // optional string create_time_from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_time_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_time_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->create_time_from().data(), this->create_time_from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_create_time_to;
        break;
      }

      // optional string create_time_to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_time_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_time_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->create_time_to().data(), this->create_time_to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_alram_time_from;
        break;
      }

      // optional string alram_time_from = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alram_time_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alram_time_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alram_time_from().data(), this->alram_time_from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_alram_time_to;
        break;
      }

      // optional string alram_time_to = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alram_time_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alram_time_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alram_time_to().data(), this->alram_time_to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_over_time_from;
        break;
      }

      // optional string over_time_from = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_over_time_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_over_time_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->over_time_from().data(), this->over_time_from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_over_time_to;
        break;
      }

      // optional string over_time_to = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_over_time_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_over_time_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->over_time_to().data(), this->over_time_to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryAlertsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional string create_time_from = 2;
  if (has_create_time_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_time_from().data(), this->create_time_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->create_time_from(), output);
  }

  // optional string create_time_to = 3;
  if (has_create_time_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_time_to().data(), this->create_time_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->create_time_to(), output);
  }

  // optional string alram_time_from = 4;
  if (has_alram_time_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alram_time_from().data(), this->alram_time_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->alram_time_from(), output);
  }

  // optional string alram_time_to = 5;
  if (has_alram_time_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alram_time_to().data(), this->alram_time_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->alram_time_to(), output);
  }

  // optional string over_time_from = 6;
  if (has_over_time_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->over_time_from().data(), this->over_time_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->over_time_from(), output);
  }

  // optional string over_time_to = 7;
  if (has_over_time_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->over_time_to().data(), this->over_time_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->over_time_to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryAlertsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional string create_time_from = 2;
  if (has_create_time_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_time_from().data(), this->create_time_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->create_time_from(), target);
  }

  // optional string create_time_to = 3;
  if (has_create_time_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_time_to().data(), this->create_time_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->create_time_to(), target);
  }

  // optional string alram_time_from = 4;
  if (has_alram_time_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alram_time_from().data(), this->alram_time_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->alram_time_from(), target);
  }

  // optional string alram_time_to = 5;
  if (has_alram_time_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alram_time_to().data(), this->alram_time_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->alram_time_to(), target);
  }

  // optional string over_time_from = 6;
  if (has_over_time_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->over_time_from().data(), this->over_time_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->over_time_from(), target);
  }

  // optional string over_time_to = 7;
  if (has_over_time_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->over_time_to().data(), this->over_time_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->over_time_to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryAlertsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional string create_time_from = 2;
    if (has_create_time_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_time_from());
    }

    // optional string create_time_to = 3;
    if (has_create_time_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_time_to());
    }

    // optional string alram_time_from = 4;
    if (has_alram_time_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alram_time_from());
    }

    // optional string alram_time_to = 5;
    if (has_alram_time_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alram_time_to());
    }

    // optional string over_time_from = 6;
    if (has_over_time_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->over_time_from());
    }

    // optional string over_time_to = 7;
    if (has_over_time_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->over_time_to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryAlertsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryAlertsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryAlertsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryAlertsRequest::MergeFrom(const HistoryAlertsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_create_time_from()) {
      set_create_time_from(from.create_time_from());
    }
    if (from.has_create_time_to()) {
      set_create_time_to(from.create_time_to());
    }
    if (from.has_alram_time_from()) {
      set_alram_time_from(from.alram_time_from());
    }
    if (from.has_alram_time_to()) {
      set_alram_time_to(from.alram_time_to());
    }
    if (from.has_over_time_from()) {
      set_over_time_from(from.over_time_from());
    }
    if (from.has_over_time_to()) {
      set_over_time_to(from.over_time_to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryAlertsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryAlertsRequest::CopyFrom(const HistoryAlertsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryAlertsRequest::IsInitialized() const {

  return true;
}

void HistoryAlertsRequest::Swap(HistoryAlertsRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(create_time_from_, other->create_time_from_);
    std::swap(create_time_to_, other->create_time_to_);
    std::swap(alram_time_from_, other->alram_time_from_);
    std::swap(alram_time_to_, other->alram_time_to_);
    std::swap(over_time_from_, other->over_time_from_);
    std::swap(over_time_to_, other->over_time_to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryAlertsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryAlertsRequest_descriptor_;
  metadata.reflection = HistoryAlertsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryAlertsResponse::kHistoryAlertsFieldNumber;
#endif  // !_MSC_VER

HistoryAlertsResponse::HistoryAlertsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryAlertsResponse::InitAsDefaultInstance() {
}

HistoryAlertsResponse::HistoryAlertsResponse(const HistoryAlertsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryAlertsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryAlertsResponse::~HistoryAlertsResponse() {
  SharedDtor();
}

void HistoryAlertsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryAlertsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryAlertsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryAlertsResponse_descriptor_;
}

const HistoryAlertsResponse& HistoryAlertsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

HistoryAlertsResponse* HistoryAlertsResponse::default_instance_ = NULL;

HistoryAlertsResponse* HistoryAlertsResponse::New() const {
  return new HistoryAlertsResponse;
}

void HistoryAlertsResponse::Clear() {
  history_alerts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryAlertsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbmsg.HistoryAlert history_alerts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_alerts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_alerts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_history_alerts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryAlertsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pbmsg.HistoryAlert history_alerts = 1;
  for (int i = 0; i < this->history_alerts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->history_alerts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryAlertsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pbmsg.HistoryAlert history_alerts = 1;
  for (int i = 0; i < this->history_alerts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->history_alerts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryAlertsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .pbmsg.HistoryAlert history_alerts = 1;
  total_size += 1 * this->history_alerts_size();
  for (int i = 0; i < this->history_alerts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_alerts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryAlertsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryAlertsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryAlertsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryAlertsResponse::MergeFrom(const HistoryAlertsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_alerts_.MergeFrom(from.history_alerts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryAlertsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryAlertsResponse::CopyFrom(const HistoryAlertsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryAlertsResponse::IsInitialized() const {

  return true;
}

void HistoryAlertsResponse::Swap(HistoryAlertsResponse* other) {
  if (other != this) {
    history_alerts_.Swap(&other->history_alerts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryAlertsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryAlertsResponse_descriptor_;
  metadata.reflection = HistoryAlertsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryAlertRequest::kHistoryAlertIdFieldNumber;
#endif  // !_MSC_VER

HistoryAlertRequest::HistoryAlertRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryAlertRequest::InitAsDefaultInstance() {
}

HistoryAlertRequest::HistoryAlertRequest(const HistoryAlertRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryAlertRequest::SharedCtor() {
  _cached_size_ = 0;
  history_alert_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryAlertRequest::~HistoryAlertRequest() {
  SharedDtor();
}

void HistoryAlertRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryAlertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryAlertRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryAlertRequest_descriptor_;
}

const HistoryAlertRequest& HistoryAlertRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

HistoryAlertRequest* HistoryAlertRequest::default_instance_ = NULL;

HistoryAlertRequest* HistoryAlertRequest::New() const {
  return new HistoryAlertRequest;
}

void HistoryAlertRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    history_alert_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryAlertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 history_alert_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &history_alert_id_)));
          set_has_history_alert_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryAlertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 history_alert_id = 1;
  if (has_history_alert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->history_alert_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryAlertRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 history_alert_id = 1;
  if (has_history_alert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->history_alert_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryAlertRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 history_alert_id = 1;
    if (has_history_alert_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryAlertRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryAlertRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryAlertRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryAlertRequest::MergeFrom(const HistoryAlertRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history_alert_id()) {
      set_history_alert_id(from.history_alert_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryAlertRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryAlertRequest::CopyFrom(const HistoryAlertRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryAlertRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HistoryAlertRequest::Swap(HistoryAlertRequest* other) {
  if (other != this) {
    std::swap(history_alert_id_, other->history_alert_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryAlertRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryAlertRequest_descriptor_;
  metadata.reflection = HistoryAlertRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryAlertResponse::kHistoryAlertFieldNumber;
#endif  // !_MSC_VER

HistoryAlertResponse::HistoryAlertResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryAlertResponse::InitAsDefaultInstance() {
  history_alert_ = const_cast< ::pbmsg::HistoryAlert*>(&::pbmsg::HistoryAlert::default_instance());
}

HistoryAlertResponse::HistoryAlertResponse(const HistoryAlertResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryAlertResponse::SharedCtor() {
  _cached_size_ = 0;
  history_alert_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryAlertResponse::~HistoryAlertResponse() {
  SharedDtor();
}

void HistoryAlertResponse::SharedDtor() {
  if (this != default_instance_) {
    delete history_alert_;
  }
}

void HistoryAlertResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryAlertResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryAlertResponse_descriptor_;
}

const HistoryAlertResponse& HistoryAlertResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

HistoryAlertResponse* HistoryAlertResponse::default_instance_ = NULL;

HistoryAlertResponse* HistoryAlertResponse::New() const {
  return new HistoryAlertResponse;
}

void HistoryAlertResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_history_alert()) {
      if (history_alert_ != NULL) history_alert_->::pbmsg::HistoryAlert::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryAlertResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.HistoryAlert history_alert = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryAlertResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.HistoryAlert history_alert = 1;
  if (has_history_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->history_alert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryAlertResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.HistoryAlert history_alert = 1;
  if (has_history_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->history_alert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryAlertResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.HistoryAlert history_alert = 1;
    if (has_history_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_alert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryAlertResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryAlertResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryAlertResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryAlertResponse::MergeFrom(const HistoryAlertResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history_alert()) {
      mutable_history_alert()->::pbmsg::HistoryAlert::MergeFrom(from.history_alert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryAlertResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryAlertResponse::CopyFrom(const HistoryAlertResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryAlertResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HistoryAlertResponse::Swap(HistoryAlertResponse* other) {
  if (other != this) {
    std::swap(history_alert_, other->history_alert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryAlertResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryAlertResponse_descriptor_;
  metadata.reflection = HistoryAlertResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryAlertMessageRequest::kHistoryAlertIdFieldNumber;
const int HistoryAlertMessageRequest::kFromMessageIdFieldNumber;
const int HistoryAlertMessageRequest::kFromTimeFieldNumber;
const int HistoryAlertMessageRequest::kMaxMessageCountFieldNumber;
#endif  // !_MSC_VER

HistoryAlertMessageRequest::HistoryAlertMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryAlertMessageRequest::InitAsDefaultInstance() {
}

HistoryAlertMessageRequest::HistoryAlertMessageRequest(const HistoryAlertMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryAlertMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  history_alert_id_ = 0u;
  from_message_id_ = 0u;
  from_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_message_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryAlertMessageRequest::~HistoryAlertMessageRequest() {
  SharedDtor();
}

void HistoryAlertMessageRequest::SharedDtor() {
  if (from_time_ != &::google::protobuf::internal::kEmptyString) {
    delete from_time_;
  }
  if (this != default_instance_) {
  }
}

void HistoryAlertMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryAlertMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryAlertMessageRequest_descriptor_;
}

const HistoryAlertMessageRequest& HistoryAlertMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

HistoryAlertMessageRequest* HistoryAlertMessageRequest::default_instance_ = NULL;

HistoryAlertMessageRequest* HistoryAlertMessageRequest::New() const {
  return new HistoryAlertMessageRequest;
}

void HistoryAlertMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    history_alert_id_ = 0u;
    from_message_id_ = 0u;
    if (has_from_time()) {
      if (from_time_ != &::google::protobuf::internal::kEmptyString) {
        from_time_->clear();
      }
    }
    max_message_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryAlertMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 history_alert_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &history_alert_id_)));
          set_has_history_alert_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_from_message_id;
        break;
      }

      // optional fixed32 from_message_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_message_id_)));
          set_has_from_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from_time;
        break;
      }

      // optional string from_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_time().data(), this->from_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_max_message_count;
        break;
      }

      // required fixed32 max_message_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &max_message_count_)));
          set_has_max_message_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryAlertMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 history_alert_id = 1;
  if (has_history_alert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->history_alert_id(), output);
  }

  // optional fixed32 from_message_id = 2;
  if (has_from_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->from_message_id(), output);
  }

  // optional string from_time = 3;
  if (has_from_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_time().data(), this->from_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->from_time(), output);
  }

  // required fixed32 max_message_count = 4;
  if (has_max_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->max_message_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryAlertMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 history_alert_id = 1;
  if (has_history_alert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->history_alert_id(), target);
  }

  // optional fixed32 from_message_id = 2;
  if (has_from_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->from_message_id(), target);
  }

  // optional string from_time = 3;
  if (has_from_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_time().data(), this->from_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_time(), target);
  }

  // required fixed32 max_message_count = 4;
  if (has_max_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->max_message_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryAlertMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 history_alert_id = 1;
    if (has_history_alert_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_message_id = 2;
    if (has_from_message_id()) {
      total_size += 1 + 4;
    }

    // optional string from_time = 3;
    if (has_from_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_time());
    }

    // required fixed32 max_message_count = 4;
    if (has_max_message_count()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryAlertMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryAlertMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryAlertMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryAlertMessageRequest::MergeFrom(const HistoryAlertMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history_alert_id()) {
      set_history_alert_id(from.history_alert_id());
    }
    if (from.has_from_message_id()) {
      set_from_message_id(from.from_message_id());
    }
    if (from.has_from_time()) {
      set_from_time(from.from_time());
    }
    if (from.has_max_message_count()) {
      set_max_message_count(from.max_message_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryAlertMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryAlertMessageRequest::CopyFrom(const HistoryAlertMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryAlertMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void HistoryAlertMessageRequest::Swap(HistoryAlertMessageRequest* other) {
  if (other != this) {
    std::swap(history_alert_id_, other->history_alert_id_);
    std::swap(from_message_id_, other->from_message_id_);
    std::swap(from_time_, other->from_time_);
    std::swap(max_message_count_, other->max_message_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryAlertMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryAlertMessageRequest_descriptor_;
  metadata.reflection = HistoryAlertMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryAlertMessageResponse::kHistoryAlertIdFieldNumber;
const int HistoryAlertMessageResponse::kMessagesFieldNumber;
const int HistoryAlertMessageResponse::kLeaveMessageCountFieldNumber;
#endif  // !_MSC_VER

HistoryAlertMessageResponse::HistoryAlertMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryAlertMessageResponse::InitAsDefaultInstance() {
}

HistoryAlertMessageResponse::HistoryAlertMessageResponse(const HistoryAlertMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryAlertMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  history_alert_id_ = 0u;
  leave_message_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryAlertMessageResponse::~HistoryAlertMessageResponse() {
  SharedDtor();
}

void HistoryAlertMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryAlertMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryAlertMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryAlertMessageResponse_descriptor_;
}

const HistoryAlertMessageResponse& HistoryAlertMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

HistoryAlertMessageResponse* HistoryAlertMessageResponse::default_instance_ = NULL;

HistoryAlertMessageResponse* HistoryAlertMessageResponse::New() const {
  return new HistoryAlertMessageResponse;
}

void HistoryAlertMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    history_alert_id_ = 0u;
    leave_message_count_ = 0u;
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryAlertMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 history_alert_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &history_alert_id_)));
          set_has_history_alert_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        break;
      }

      // repeated .pbmsg.MediaMessage messages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        if (input->ExpectTag(29)) goto parse_leave_message_count;
        break;
      }

      // required fixed32 leave_message_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leave_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &leave_message_count_)));
          set_has_leave_message_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryAlertMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 history_alert_id = 1;
  if (has_history_alert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->history_alert_id(), output);
  }

  // repeated .pbmsg.MediaMessage messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->messages(i), output);
  }

  // required fixed32 leave_message_count = 3;
  if (has_leave_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->leave_message_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryAlertMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 history_alert_id = 1;
  if (has_history_alert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->history_alert_id(), target);
  }

  // repeated .pbmsg.MediaMessage messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->messages(i), target);
  }

  // required fixed32 leave_message_count = 3;
  if (has_leave_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->leave_message_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryAlertMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 history_alert_id = 1;
    if (has_history_alert_id()) {
      total_size += 1 + 4;
    }

    // required fixed32 leave_message_count = 3;
    if (has_leave_message_count()) {
      total_size += 1 + 4;
    }

  }
  // repeated .pbmsg.MediaMessage messages = 2;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryAlertMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryAlertMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryAlertMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryAlertMessageResponse::MergeFrom(const HistoryAlertMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history_alert_id()) {
      set_history_alert_id(from.history_alert_id());
    }
    if (from.has_leave_message_count()) {
      set_leave_message_count(from.leave_message_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryAlertMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryAlertMessageResponse::CopyFrom(const HistoryAlertMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryAlertMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void HistoryAlertMessageResponse::Swap(HistoryAlertMessageResponse* other) {
  if (other != this) {
    std::swap(history_alert_id_, other->history_alert_id_);
    messages_.Swap(&other->messages_);
    std::swap(leave_message_count_, other->leave_message_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryAlertMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryAlertMessageResponse_descriptor_;
  metadata.reflection = HistoryAlertMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteHistoryAlertRequest::kHistoryAlertIdFieldNumber;
#endif  // !_MSC_VER

DeleteHistoryAlertRequest::DeleteHistoryAlertRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteHistoryAlertRequest::InitAsDefaultInstance() {
}

DeleteHistoryAlertRequest::DeleteHistoryAlertRequest(const DeleteHistoryAlertRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteHistoryAlertRequest::SharedCtor() {
  _cached_size_ = 0;
  history_alert_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteHistoryAlertRequest::~DeleteHistoryAlertRequest() {
  SharedDtor();
}

void DeleteHistoryAlertRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteHistoryAlertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteHistoryAlertRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteHistoryAlertRequest_descriptor_;
}

const DeleteHistoryAlertRequest& DeleteHistoryAlertRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

DeleteHistoryAlertRequest* DeleteHistoryAlertRequest::default_instance_ = NULL;

DeleteHistoryAlertRequest* DeleteHistoryAlertRequest::New() const {
  return new DeleteHistoryAlertRequest;
}

void DeleteHistoryAlertRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    history_alert_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteHistoryAlertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 history_alert_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &history_alert_id_)));
          set_has_history_alert_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteHistoryAlertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 history_alert_id = 1;
  if (has_history_alert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->history_alert_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteHistoryAlertRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 history_alert_id = 1;
  if (has_history_alert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->history_alert_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteHistoryAlertRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 history_alert_id = 1;
    if (has_history_alert_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteHistoryAlertRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteHistoryAlertRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteHistoryAlertRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteHistoryAlertRequest::MergeFrom(const DeleteHistoryAlertRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history_alert_id()) {
      set_history_alert_id(from.history_alert_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteHistoryAlertRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteHistoryAlertRequest::CopyFrom(const DeleteHistoryAlertRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteHistoryAlertRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteHistoryAlertRequest::Swap(DeleteHistoryAlertRequest* other) {
  if (other != this) {
    std::swap(history_alert_id_, other->history_alert_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteHistoryAlertRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteHistoryAlertRequest_descriptor_;
  metadata.reflection = DeleteHistoryAlertRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteGroupRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

DeleteGroupRequest::DeleteGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteGroupRequest::InitAsDefaultInstance() {
  group_id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

DeleteGroupRequest::DeleteGroupRequest(const DeleteGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteGroupRequest::~DeleteGroupRequest() {
  SharedDtor();
}

void DeleteGroupRequest::SharedDtor() {
  if (this != default_instance_) {
    delete group_id_;
  }
}

void DeleteGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteGroupRequest_descriptor_;
}

const DeleteGroupRequest& DeleteGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

DeleteGroupRequest* DeleteGroupRequest::default_instance_ = NULL;

DeleteGroupRequest* DeleteGroupRequest::New() const {
  return new DeleteGroupRequest;
}

void DeleteGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != NULL) group_id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteGroupRequest::MergeFrom(const DeleteGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      mutable_group_id()->::pbmsg::Entity::MergeFrom(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGroupRequest::CopyFrom(const DeleteGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteGroupRequest::Swap(DeleteGroupRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteGroupRequest_descriptor_;
  metadata.reflection = DeleteGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveUnitNotification::kIdFieldNumber;
#endif  // !_MSC_VER

MoveUnitNotification::MoveUnitNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveUnitNotification::InitAsDefaultInstance() {
  id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

MoveUnitNotification::MoveUnitNotification(const MoveUnitNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveUnitNotification::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveUnitNotification::~MoveUnitNotification() {
  SharedDtor();
}

void MoveUnitNotification::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void MoveUnitNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveUnitNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveUnitNotification_descriptor_;
}

const MoveUnitNotification& MoveUnitNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

MoveUnitNotification* MoveUnitNotification::default_instance_ = NULL;

MoveUnitNotification* MoveUnitNotification::New() const {
  return new MoveUnitNotification;
}

void MoveUnitNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveUnitNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveUnitNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveUnitNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveUnitNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveUnitNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveUnitNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveUnitNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveUnitNotification::MergeFrom(const MoveUnitNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::pbmsg::Entity::MergeFrom(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveUnitNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveUnitNotification::CopyFrom(const MoveUnitNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveUnitNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MoveUnitNotification::Swap(MoveUnitNotification* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveUnitNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveUnitNotification_descriptor_;
  metadata.reflection = MoveUnitNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kLoginFieldNumber;
const int Request::kEntityFieldNumber;
const int Request::kAppendGroupFieldNumber;
const int Request::kModifyGroupFieldNumber;
const int Request::kModifyParticipantsFieldNumber;
const int Request::kGroupMessageFieldNumber;
const int Request::kInviteParticipantFieldNumber;
const int Request::kDropParticipantFieldNumber;
const int Request::kReleaseParticipantTokenFieldNumber;
const int Request::kAppointParticipantSpeakFieldNumber;
const int Request::kJionGroupFieldNumber;
const int Request::kLeaveGroupFieldNumber;
const int Request::kSendMessageFieldNumber;
const int Request::kKickParticipantFieldNumber;
const int Request::kStartRecordFieldNumber;
const int Request::kStopRecordFieldNumber;
const int Request::kSubscribeAccountLocationFieldNumber;
const int Request::kAppendAlertFieldNumber;
const int Request::kModifyAlertFieldNumber;
const int Request::kStopAlertFieldNumber;
const int Request::kHistoryAlertsFieldNumber;
const int Request::kHistoryAlertFieldNumber;
const int Request::kDeleteHistoryAlertFieldNumber;
const int Request::kDeleteGroupFieldNumber;
const int Request::kHistoryAlertMessageFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
  login_ = const_cast< ::app::dispatch::LoginRequest*>(&::app::dispatch::LoginRequest::default_instance());
  entity_ = const_cast< ::app::dispatch::EntityRequest*>(&::app::dispatch::EntityRequest::default_instance());
  append_group_ = const_cast< ::app::dispatch::AppendGroupRequest*>(&::app::dispatch::AppendGroupRequest::default_instance());
  modify_group_ = const_cast< ::app::dispatch::ModifyGroupRequest*>(&::app::dispatch::ModifyGroupRequest::default_instance());
  modify_participants_ = const_cast< ::app::dispatch::ModifyParticipantsRequest*>(&::app::dispatch::ModifyParticipantsRequest::default_instance());
  group_message_ = const_cast< ::app::dispatch::MediaMessageRequest*>(&::app::dispatch::MediaMessageRequest::default_instance());
  invite_participant_ = const_cast< ::app::dispatch::InviteParticipantRequest*>(&::app::dispatch::InviteParticipantRequest::default_instance());
  drop_participant_ = const_cast< ::app::dispatch::DropParticipantRequest*>(&::app::dispatch::DropParticipantRequest::default_instance());
  release_participant_token_ = const_cast< ::app::dispatch::ReleaseParticipantTokenRequest*>(&::app::dispatch::ReleaseParticipantTokenRequest::default_instance());
  appoint_participant_speak_ = const_cast< ::app::dispatch::AppointParticipantSpeakRequest*>(&::app::dispatch::AppointParticipantSpeakRequest::default_instance());
  jion_group_ = const_cast< ::app::dispatch::JionGroupRequest*>(&::app::dispatch::JionGroupRequest::default_instance());
  leave_group_ = const_cast< ::app::dispatch::LeaveGroupRequest*>(&::app::dispatch::LeaveGroupRequest::default_instance());
  send_message_ = const_cast< ::app::dispatch::SendMessageRequest*>(&::app::dispatch::SendMessageRequest::default_instance());
  kick_participant_ = const_cast< ::app::dispatch::KickParticipantRequest*>(&::app::dispatch::KickParticipantRequest::default_instance());
  start_record_ = const_cast< ::app::dispatch::StartRecordRequest*>(&::app::dispatch::StartRecordRequest::default_instance());
  stop_record_ = const_cast< ::app::dispatch::StopRecordRequest*>(&::app::dispatch::StopRecordRequest::default_instance());
  subscribe_account_location_ = const_cast< ::app::dispatch::SubscribeAccountLocationRequest*>(&::app::dispatch::SubscribeAccountLocationRequest::default_instance());
  append_alert_ = const_cast< ::app::dispatch::AppendAlertRequest*>(&::app::dispatch::AppendAlertRequest::default_instance());
  modify_alert_ = const_cast< ::app::dispatch::ModifyAlertRequest*>(&::app::dispatch::ModifyAlertRequest::default_instance());
  stop_alert_ = const_cast< ::app::dispatch::StopAlertRequest*>(&::app::dispatch::StopAlertRequest::default_instance());
  history_alerts_ = const_cast< ::app::dispatch::HistoryAlertsRequest*>(&::app::dispatch::HistoryAlertsRequest::default_instance());
  history_alert_ = const_cast< ::app::dispatch::HistoryAlertRequest*>(&::app::dispatch::HistoryAlertRequest::default_instance());
  delete_history_alert_ = const_cast< ::app::dispatch::DeleteHistoryAlertRequest*>(&::app::dispatch::DeleteHistoryAlertRequest::default_instance());
  delete_group_ = const_cast< ::app::dispatch::DeleteGroupRequest*>(&::app::dispatch::DeleteGroupRequest::default_instance());
  history_alert_message_ = const_cast< ::app::dispatch::HistoryAlertMessageRequest*>(&::app::dispatch::HistoryAlertMessageRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  login_ = NULL;
  entity_ = NULL;
  append_group_ = NULL;
  modify_group_ = NULL;
  modify_participants_ = NULL;
  group_message_ = NULL;
  invite_participant_ = NULL;
  drop_participant_ = NULL;
  release_participant_token_ = NULL;
  appoint_participant_speak_ = NULL;
  jion_group_ = NULL;
  leave_group_ = NULL;
  send_message_ = NULL;
  kick_participant_ = NULL;
  start_record_ = NULL;
  stop_record_ = NULL;
  subscribe_account_location_ = NULL;
  append_alert_ = NULL;
  modify_alert_ = NULL;
  stop_alert_ = NULL;
  history_alerts_ = NULL;
  history_alert_ = NULL;
  delete_history_alert_ = NULL;
  delete_group_ = NULL;
  history_alert_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete login_;
    delete entity_;
    delete append_group_;
    delete modify_group_;
    delete modify_participants_;
    delete group_message_;
    delete invite_participant_;
    delete drop_participant_;
    delete release_participant_token_;
    delete appoint_participant_speak_;
    delete jion_group_;
    delete leave_group_;
    delete send_message_;
    delete kick_participant_;
    delete start_record_;
    delete stop_record_;
    delete subscribe_account_location_;
    delete append_alert_;
    delete modify_alert_;
    delete stop_alert_;
    delete history_alerts_;
    delete history_alert_;
    delete delete_history_alert_;
    delete delete_group_;
    delete history_alert_message_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_login()) {
      if (login_ != NULL) login_->::app::dispatch::LoginRequest::Clear();
    }
    if (has_entity()) {
      if (entity_ != NULL) entity_->::app::dispatch::EntityRequest::Clear();
    }
    if (has_append_group()) {
      if (append_group_ != NULL) append_group_->::app::dispatch::AppendGroupRequest::Clear();
    }
    if (has_modify_group()) {
      if (modify_group_ != NULL) modify_group_->::app::dispatch::ModifyGroupRequest::Clear();
    }
    if (has_modify_participants()) {
      if (modify_participants_ != NULL) modify_participants_->::app::dispatch::ModifyParticipantsRequest::Clear();
    }
    if (has_group_message()) {
      if (group_message_ != NULL) group_message_->::app::dispatch::MediaMessageRequest::Clear();
    }
    if (has_invite_participant()) {
      if (invite_participant_ != NULL) invite_participant_->::app::dispatch::InviteParticipantRequest::Clear();
    }
    if (has_drop_participant()) {
      if (drop_participant_ != NULL) drop_participant_->::app::dispatch::DropParticipantRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_release_participant_token()) {
      if (release_participant_token_ != NULL) release_participant_token_->::app::dispatch::ReleaseParticipantTokenRequest::Clear();
    }
    if (has_appoint_participant_speak()) {
      if (appoint_participant_speak_ != NULL) appoint_participant_speak_->::app::dispatch::AppointParticipantSpeakRequest::Clear();
    }
    if (has_jion_group()) {
      if (jion_group_ != NULL) jion_group_->::app::dispatch::JionGroupRequest::Clear();
    }
    if (has_leave_group()) {
      if (leave_group_ != NULL) leave_group_->::app::dispatch::LeaveGroupRequest::Clear();
    }
    if (has_send_message()) {
      if (send_message_ != NULL) send_message_->::app::dispatch::SendMessageRequest::Clear();
    }
    if (has_kick_participant()) {
      if (kick_participant_ != NULL) kick_participant_->::app::dispatch::KickParticipantRequest::Clear();
    }
    if (has_start_record()) {
      if (start_record_ != NULL) start_record_->::app::dispatch::StartRecordRequest::Clear();
    }
    if (has_stop_record()) {
      if (stop_record_ != NULL) stop_record_->::app::dispatch::StopRecordRequest::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_subscribe_account_location()) {
      if (subscribe_account_location_ != NULL) subscribe_account_location_->::app::dispatch::SubscribeAccountLocationRequest::Clear();
    }
    if (has_append_alert()) {
      if (append_alert_ != NULL) append_alert_->::app::dispatch::AppendAlertRequest::Clear();
    }
    if (has_modify_alert()) {
      if (modify_alert_ != NULL) modify_alert_->::app::dispatch::ModifyAlertRequest::Clear();
    }
    if (has_stop_alert()) {
      if (stop_alert_ != NULL) stop_alert_->::app::dispatch::StopAlertRequest::Clear();
    }
    if (has_history_alerts()) {
      if (history_alerts_ != NULL) history_alerts_->::app::dispatch::HistoryAlertsRequest::Clear();
    }
    if (has_history_alert()) {
      if (history_alert_ != NULL) history_alert_->::app::dispatch::HistoryAlertRequest::Clear();
    }
    if (has_delete_history_alert()) {
      if (delete_history_alert_ != NULL) delete_history_alert_->::app::dispatch::DeleteHistoryAlertRequest::Clear();
    }
    if (has_delete_group()) {
      if (delete_group_ != NULL) delete_group_->::app::dispatch::DeleteGroupRequest::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_history_alert_message()) {
      if (history_alert_message_ != NULL) history_alert_message_->::app::dispatch::HistoryAlertMessageRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.dispatch.LoginRequest login = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entity;
        break;
      }

      // optional .app.dispatch.EntityRequest entity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_append_group;
        break;
      }

      // optional .app.dispatch.AppendGroupRequest append_group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_append_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_append_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_modify_group;
        break;
      }

      // optional .app.dispatch.ModifyGroupRequest modify_group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modify_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modify_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_modify_participants;
        break;
      }

      // optional .app.dispatch.ModifyParticipantsRequest modify_participants = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modify_participants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modify_participants()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_group_message;
        break;
      }

      // optional .app.dispatch.MediaMessageRequest group_message = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_invite_participant;
        break;
      }

      // optional .app.dispatch.InviteParticipantRequest invite_participant = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invite_participant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invite_participant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_drop_participant;
        break;
      }

      // optional .app.dispatch.DropParticipantRequest drop_participant = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop_participant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drop_participant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_release_participant_token;
        break;
      }

      // optional .app.dispatch.ReleaseParticipantTokenRequest release_participant_token = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_release_participant_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_release_participant_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_appoint_participant_speak;
        break;
      }

      // optional .app.dispatch.AppointParticipantSpeakRequest appoint_participant_speak = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appoint_participant_speak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appoint_participant_speak()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_jion_group;
        break;
      }

      // optional .app.dispatch.JionGroupRequest jion_group = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jion_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jion_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_leave_group;
        break;
      }

      // optional .app.dispatch.LeaveGroupRequest leave_group = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leave_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leave_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_send_message;
        break;
      }

      // optional .app.dispatch.SendMessageRequest send_message = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_kick_participant;
        break;
      }

      // optional .app.dispatch.KickParticipantRequest kick_participant = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kick_participant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kick_participant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_start_record;
        break;
      }

      // optional .app.dispatch.StartRecordRequest start_record = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_stop_record;
        break;
      }

      // optional .app.dispatch.StopRecordRequest stop_record = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_subscribe_account_location;
        break;
      }

      // optional .app.dispatch.SubscribeAccountLocationRequest subscribe_account_location = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscribe_account_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscribe_account_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_append_alert;
        break;
      }

      // optional .app.dispatch.AppendAlertRequest append_alert = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_append_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_append_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_modify_alert;
        break;
      }

      // optional .app.dispatch.ModifyAlertRequest modify_alert = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modify_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modify_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_stop_alert;
        break;
      }

      // optional .app.dispatch.StopAlertRequest stop_alert = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_history_alerts;
        break;
      }

      // optional .app.dispatch.HistoryAlertsRequest history_alerts = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_alerts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_alerts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_history_alert;
        break;
      }

      // optional .app.dispatch.HistoryAlertRequest history_alert = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_delete_history_alert;
        break;
      }

      // optional .app.dispatch.DeleteHistoryAlertRequest delete_history_alert = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delete_history_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_history_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_delete_group;
        break;
      }

      // optional .app.dispatch.DeleteGroupRequest delete_group = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delete_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_history_alert_message;
        break;
      }

      // optional .app.dispatch.HistoryAlertMessageRequest history_alert_message = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_alert_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_alert_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.dispatch.LoginRequest login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->login(), output);
  }

  // optional .app.dispatch.EntityRequest entity = 2;
  if (has_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entity(), output);
  }

  // optional .app.dispatch.AppendGroupRequest append_group = 3;
  if (has_append_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->append_group(), output);
  }

  // optional .app.dispatch.ModifyGroupRequest modify_group = 4;
  if (has_modify_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->modify_group(), output);
  }

  // optional .app.dispatch.ModifyParticipantsRequest modify_participants = 5;
  if (has_modify_participants()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->modify_participants(), output);
  }

  // optional .app.dispatch.MediaMessageRequest group_message = 6;
  if (has_group_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->group_message(), output);
  }

  // optional .app.dispatch.InviteParticipantRequest invite_participant = 7;
  if (has_invite_participant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->invite_participant(), output);
  }

  // optional .app.dispatch.DropParticipantRequest drop_participant = 8;
  if (has_drop_participant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->drop_participant(), output);
  }

  // optional .app.dispatch.ReleaseParticipantTokenRequest release_participant_token = 9;
  if (has_release_participant_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->release_participant_token(), output);
  }

  // optional .app.dispatch.AppointParticipantSpeakRequest appoint_participant_speak = 10;
  if (has_appoint_participant_speak()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->appoint_participant_speak(), output);
  }

  // optional .app.dispatch.JionGroupRequest jion_group = 11;
  if (has_jion_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->jion_group(), output);
  }

  // optional .app.dispatch.LeaveGroupRequest leave_group = 12;
  if (has_leave_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->leave_group(), output);
  }

  // optional .app.dispatch.SendMessageRequest send_message = 13;
  if (has_send_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->send_message(), output);
  }

  // optional .app.dispatch.KickParticipantRequest kick_participant = 14;
  if (has_kick_participant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->kick_participant(), output);
  }

  // optional .app.dispatch.StartRecordRequest start_record = 15;
  if (has_start_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->start_record(), output);
  }

  // optional .app.dispatch.StopRecordRequest stop_record = 16;
  if (has_stop_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->stop_record(), output);
  }

  // optional .app.dispatch.SubscribeAccountLocationRequest subscribe_account_location = 17;
  if (has_subscribe_account_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->subscribe_account_location(), output);
  }

  // optional .app.dispatch.AppendAlertRequest append_alert = 18;
  if (has_append_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->append_alert(), output);
  }

  // optional .app.dispatch.ModifyAlertRequest modify_alert = 19;
  if (has_modify_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->modify_alert(), output);
  }

  // optional .app.dispatch.StopAlertRequest stop_alert = 20;
  if (has_stop_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->stop_alert(), output);
  }

  // optional .app.dispatch.HistoryAlertsRequest history_alerts = 21;
  if (has_history_alerts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->history_alerts(), output);
  }

  // optional .app.dispatch.HistoryAlertRequest history_alert = 22;
  if (has_history_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->history_alert(), output);
  }

  // optional .app.dispatch.DeleteHistoryAlertRequest delete_history_alert = 23;
  if (has_delete_history_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->delete_history_alert(), output);
  }

  // optional .app.dispatch.DeleteGroupRequest delete_group = 24;
  if (has_delete_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->delete_group(), output);
  }

  // optional .app.dispatch.HistoryAlertMessageRequest history_alert_message = 25;
  if (has_history_alert_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->history_alert_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.dispatch.LoginRequest login = 1;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->login(), target);
  }

  // optional .app.dispatch.EntityRequest entity = 2;
  if (has_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entity(), target);
  }

  // optional .app.dispatch.AppendGroupRequest append_group = 3;
  if (has_append_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->append_group(), target);
  }

  // optional .app.dispatch.ModifyGroupRequest modify_group = 4;
  if (has_modify_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->modify_group(), target);
  }

  // optional .app.dispatch.ModifyParticipantsRequest modify_participants = 5;
  if (has_modify_participants()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->modify_participants(), target);
  }

  // optional .app.dispatch.MediaMessageRequest group_message = 6;
  if (has_group_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->group_message(), target);
  }

  // optional .app.dispatch.InviteParticipantRequest invite_participant = 7;
  if (has_invite_participant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->invite_participant(), target);
  }

  // optional .app.dispatch.DropParticipantRequest drop_participant = 8;
  if (has_drop_participant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->drop_participant(), target);
  }

  // optional .app.dispatch.ReleaseParticipantTokenRequest release_participant_token = 9;
  if (has_release_participant_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->release_participant_token(), target);
  }

  // optional .app.dispatch.AppointParticipantSpeakRequest appoint_participant_speak = 10;
  if (has_appoint_participant_speak()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->appoint_participant_speak(), target);
  }

  // optional .app.dispatch.JionGroupRequest jion_group = 11;
  if (has_jion_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->jion_group(), target);
  }

  // optional .app.dispatch.LeaveGroupRequest leave_group = 12;
  if (has_leave_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->leave_group(), target);
  }

  // optional .app.dispatch.SendMessageRequest send_message = 13;
  if (has_send_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->send_message(), target);
  }

  // optional .app.dispatch.KickParticipantRequest kick_participant = 14;
  if (has_kick_participant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->kick_participant(), target);
  }

  // optional .app.dispatch.StartRecordRequest start_record = 15;
  if (has_start_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->start_record(), target);
  }

  // optional .app.dispatch.StopRecordRequest stop_record = 16;
  if (has_stop_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->stop_record(), target);
  }

  // optional .app.dispatch.SubscribeAccountLocationRequest subscribe_account_location = 17;
  if (has_subscribe_account_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->subscribe_account_location(), target);
  }

  // optional .app.dispatch.AppendAlertRequest append_alert = 18;
  if (has_append_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->append_alert(), target);
  }

  // optional .app.dispatch.ModifyAlertRequest modify_alert = 19;
  if (has_modify_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->modify_alert(), target);
  }

  // optional .app.dispatch.StopAlertRequest stop_alert = 20;
  if (has_stop_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->stop_alert(), target);
  }

  // optional .app.dispatch.HistoryAlertsRequest history_alerts = 21;
  if (has_history_alerts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->history_alerts(), target);
  }

  // optional .app.dispatch.HistoryAlertRequest history_alert = 22;
  if (has_history_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->history_alert(), target);
  }

  // optional .app.dispatch.DeleteHistoryAlertRequest delete_history_alert = 23;
  if (has_delete_history_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->delete_history_alert(), target);
  }

  // optional .app.dispatch.DeleteGroupRequest delete_group = 24;
  if (has_delete_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->delete_group(), target);
  }

  // optional .app.dispatch.HistoryAlertMessageRequest history_alert_message = 25;
  if (has_history_alert_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->history_alert_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.dispatch.LoginRequest login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

    // optional .app.dispatch.EntityRequest entity = 2;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity());
    }

    // optional .app.dispatch.AppendGroupRequest append_group = 3;
    if (has_append_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->append_group());
    }

    // optional .app.dispatch.ModifyGroupRequest modify_group = 4;
    if (has_modify_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modify_group());
    }

    // optional .app.dispatch.ModifyParticipantsRequest modify_participants = 5;
    if (has_modify_participants()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modify_participants());
    }

    // optional .app.dispatch.MediaMessageRequest group_message = 6;
    if (has_group_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_message());
    }

    // optional .app.dispatch.InviteParticipantRequest invite_participant = 7;
    if (has_invite_participant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invite_participant());
    }

    // optional .app.dispatch.DropParticipantRequest drop_participant = 8;
    if (has_drop_participant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drop_participant());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .app.dispatch.ReleaseParticipantTokenRequest release_participant_token = 9;
    if (has_release_participant_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->release_participant_token());
    }

    // optional .app.dispatch.AppointParticipantSpeakRequest appoint_participant_speak = 10;
    if (has_appoint_participant_speak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->appoint_participant_speak());
    }

    // optional .app.dispatch.JionGroupRequest jion_group = 11;
    if (has_jion_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jion_group());
    }

    // optional .app.dispatch.LeaveGroupRequest leave_group = 12;
    if (has_leave_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leave_group());
    }

    // optional .app.dispatch.SendMessageRequest send_message = 13;
    if (has_send_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->send_message());
    }

    // optional .app.dispatch.KickParticipantRequest kick_participant = 14;
    if (has_kick_participant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kick_participant());
    }

    // optional .app.dispatch.StartRecordRequest start_record = 15;
    if (has_start_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_record());
    }

    // optional .app.dispatch.StopRecordRequest stop_record = 16;
    if (has_stop_record()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop_record());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .app.dispatch.SubscribeAccountLocationRequest subscribe_account_location = 17;
    if (has_subscribe_account_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscribe_account_location());
    }

    // optional .app.dispatch.AppendAlertRequest append_alert = 18;
    if (has_append_alert()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->append_alert());
    }

    // optional .app.dispatch.ModifyAlertRequest modify_alert = 19;
    if (has_modify_alert()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modify_alert());
    }

    // optional .app.dispatch.StopAlertRequest stop_alert = 20;
    if (has_stop_alert()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop_alert());
    }

    // optional .app.dispatch.HistoryAlertsRequest history_alerts = 21;
    if (has_history_alerts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_alerts());
    }

    // optional .app.dispatch.HistoryAlertRequest history_alert = 22;
    if (has_history_alert()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_alert());
    }

    // optional .app.dispatch.DeleteHistoryAlertRequest delete_history_alert = 23;
    if (has_delete_history_alert()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delete_history_alert());
    }

    // optional .app.dispatch.DeleteGroupRequest delete_group = 24;
    if (has_delete_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delete_group());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .app.dispatch.HistoryAlertMessageRequest history_alert_message = 25;
    if (has_history_alert_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_alert_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      mutable_login()->::app::dispatch::LoginRequest::MergeFrom(from.login());
    }
    if (from.has_entity()) {
      mutable_entity()->::app::dispatch::EntityRequest::MergeFrom(from.entity());
    }
    if (from.has_append_group()) {
      mutable_append_group()->::app::dispatch::AppendGroupRequest::MergeFrom(from.append_group());
    }
    if (from.has_modify_group()) {
      mutable_modify_group()->::app::dispatch::ModifyGroupRequest::MergeFrom(from.modify_group());
    }
    if (from.has_modify_participants()) {
      mutable_modify_participants()->::app::dispatch::ModifyParticipantsRequest::MergeFrom(from.modify_participants());
    }
    if (from.has_group_message()) {
      mutable_group_message()->::app::dispatch::MediaMessageRequest::MergeFrom(from.group_message());
    }
    if (from.has_invite_participant()) {
      mutable_invite_participant()->::app::dispatch::InviteParticipantRequest::MergeFrom(from.invite_participant());
    }
    if (from.has_drop_participant()) {
      mutable_drop_participant()->::app::dispatch::DropParticipantRequest::MergeFrom(from.drop_participant());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_release_participant_token()) {
      mutable_release_participant_token()->::app::dispatch::ReleaseParticipantTokenRequest::MergeFrom(from.release_participant_token());
    }
    if (from.has_appoint_participant_speak()) {
      mutable_appoint_participant_speak()->::app::dispatch::AppointParticipantSpeakRequest::MergeFrom(from.appoint_participant_speak());
    }
    if (from.has_jion_group()) {
      mutable_jion_group()->::app::dispatch::JionGroupRequest::MergeFrom(from.jion_group());
    }
    if (from.has_leave_group()) {
      mutable_leave_group()->::app::dispatch::LeaveGroupRequest::MergeFrom(from.leave_group());
    }
    if (from.has_send_message()) {
      mutable_send_message()->::app::dispatch::SendMessageRequest::MergeFrom(from.send_message());
    }
    if (from.has_kick_participant()) {
      mutable_kick_participant()->::app::dispatch::KickParticipantRequest::MergeFrom(from.kick_participant());
    }
    if (from.has_start_record()) {
      mutable_start_record()->::app::dispatch::StartRecordRequest::MergeFrom(from.start_record());
    }
    if (from.has_stop_record()) {
      mutable_stop_record()->::app::dispatch::StopRecordRequest::MergeFrom(from.stop_record());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_subscribe_account_location()) {
      mutable_subscribe_account_location()->::app::dispatch::SubscribeAccountLocationRequest::MergeFrom(from.subscribe_account_location());
    }
    if (from.has_append_alert()) {
      mutable_append_alert()->::app::dispatch::AppendAlertRequest::MergeFrom(from.append_alert());
    }
    if (from.has_modify_alert()) {
      mutable_modify_alert()->::app::dispatch::ModifyAlertRequest::MergeFrom(from.modify_alert());
    }
    if (from.has_stop_alert()) {
      mutable_stop_alert()->::app::dispatch::StopAlertRequest::MergeFrom(from.stop_alert());
    }
    if (from.has_history_alerts()) {
      mutable_history_alerts()->::app::dispatch::HistoryAlertsRequest::MergeFrom(from.history_alerts());
    }
    if (from.has_history_alert()) {
      mutable_history_alert()->::app::dispatch::HistoryAlertRequest::MergeFrom(from.history_alert());
    }
    if (from.has_delete_history_alert()) {
      mutable_delete_history_alert()->::app::dispatch::DeleteHistoryAlertRequest::MergeFrom(from.delete_history_alert());
    }
    if (from.has_delete_group()) {
      mutable_delete_group()->::app::dispatch::DeleteGroupRequest::MergeFrom(from.delete_group());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_history_alert_message()) {
      mutable_history_alert_message()->::app::dispatch::HistoryAlertMessageRequest::MergeFrom(from.history_alert_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  if (has_login()) {
    if (!this->login().IsInitialized()) return false;
  }
  if (has_entity()) {
    if (!this->entity().IsInitialized()) return false;
  }
  if (has_append_group()) {
    if (!this->append_group().IsInitialized()) return false;
  }
  if (has_modify_group()) {
    if (!this->modify_group().IsInitialized()) return false;
  }
  if (has_modify_participants()) {
    if (!this->modify_participants().IsInitialized()) return false;
  }
  if (has_group_message()) {
    if (!this->group_message().IsInitialized()) return false;
  }
  if (has_invite_participant()) {
    if (!this->invite_participant().IsInitialized()) return false;
  }
  if (has_drop_participant()) {
    if (!this->drop_participant().IsInitialized()) return false;
  }
  if (has_release_participant_token()) {
    if (!this->release_participant_token().IsInitialized()) return false;
  }
  if (has_appoint_participant_speak()) {
    if (!this->appoint_participant_speak().IsInitialized()) return false;
  }
  if (has_jion_group()) {
    if (!this->jion_group().IsInitialized()) return false;
  }
  if (has_leave_group()) {
    if (!this->leave_group().IsInitialized()) return false;
  }
  if (has_send_message()) {
    if (!this->send_message().IsInitialized()) return false;
  }
  if (has_kick_participant()) {
    if (!this->kick_participant().IsInitialized()) return false;
  }
  if (has_start_record()) {
    if (!this->start_record().IsInitialized()) return false;
  }
  if (has_stop_record()) {
    if (!this->stop_record().IsInitialized()) return false;
  }
  if (has_subscribe_account_location()) {
    if (!this->subscribe_account_location().IsInitialized()) return false;
  }
  if (has_append_alert()) {
    if (!this->append_alert().IsInitialized()) return false;
  }
  if (has_modify_alert()) {
    if (!this->modify_alert().IsInitialized()) return false;
  }
  if (has_stop_alert()) {
    if (!this->stop_alert().IsInitialized()) return false;
  }
  if (has_history_alert()) {
    if (!this->history_alert().IsInitialized()) return false;
  }
  if (has_delete_history_alert()) {
    if (!this->delete_history_alert().IsInitialized()) return false;
  }
  if (has_delete_group()) {
    if (!this->delete_group().IsInitialized()) return false;
  }
  if (has_history_alert_message()) {
    if (!this->history_alert_message().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(entity_, other->entity_);
    std::swap(append_group_, other->append_group_);
    std::swap(modify_group_, other->modify_group_);
    std::swap(modify_participants_, other->modify_participants_);
    std::swap(group_message_, other->group_message_);
    std::swap(invite_participant_, other->invite_participant_);
    std::swap(drop_participant_, other->drop_participant_);
    std::swap(release_participant_token_, other->release_participant_token_);
    std::swap(appoint_participant_speak_, other->appoint_participant_speak_);
    std::swap(jion_group_, other->jion_group_);
    std::swap(leave_group_, other->leave_group_);
    std::swap(send_message_, other->send_message_);
    std::swap(kick_participant_, other->kick_participant_);
    std::swap(start_record_, other->start_record_);
    std::swap(stop_record_, other->stop_record_);
    std::swap(subscribe_account_location_, other->subscribe_account_location_);
    std::swap(append_alert_, other->append_alert_);
    std::swap(modify_alert_, other->modify_alert_);
    std::swap(stop_alert_, other->stop_alert_);
    std::swap(history_alerts_, other->history_alerts_);
    std::swap(history_alert_, other->history_alert_);
    std::swap(delete_history_alert_, other->delete_history_alert_);
    std::swap(delete_group_, other->delete_group_);
    std::swap(history_alert_message_, other->history_alert_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kResultFieldNumber;
const int Response::kLastResponseFieldNumber;
const int Response::kErrorDescribeFieldNumber;
const int Response::kLoginFieldNumber;
const int Response::kEntityFieldNumber;
const int Response::kAppendGroupFieldNumber;
const int Response::kModifyGroupFieldNumber;
const int Response::kModifyParticipantsFieldNumber;
const int Response::kGroupMessageFieldNumber;
const int Response::kAppendAlertFieldNumber;
const int Response::kHistoryAlertsFieldNumber;
const int Response::kHistoryAlertFieldNumber;
const int Response::kHistoryAlertMessageFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response::InitAsDefaultInstance() {
  login_ = const_cast< ::app::dispatch::LoginResponse*>(&::app::dispatch::LoginResponse::default_instance());
  entity_ = const_cast< ::app::dispatch::EntityResponse*>(&::app::dispatch::EntityResponse::default_instance());
  append_group_ = const_cast< ::app::dispatch::AppendGroupResponse*>(&::app::dispatch::AppendGroupResponse::default_instance());
  modify_group_ = const_cast< ::app::dispatch::ModifyGroupResponse*>(&::app::dispatch::ModifyGroupResponse::default_instance());
  modify_participants_ = const_cast< ::app::dispatch::ModifyParticipantsResponse*>(&::app::dispatch::ModifyParticipantsResponse::default_instance());
  group_message_ = const_cast< ::app::dispatch::MediaMessageResponse*>(&::app::dispatch::MediaMessageResponse::default_instance());
  append_alert_ = const_cast< ::app::dispatch::AppendAlertResponse*>(&::app::dispatch::AppendAlertResponse::default_instance());
  history_alerts_ = const_cast< ::app::dispatch::HistoryAlertsResponse*>(&::app::dispatch::HistoryAlertsResponse::default_instance());
  history_alert_ = const_cast< ::app::dispatch::HistoryAlertResponse*>(&::app::dispatch::HistoryAlertResponse::default_instance());
  history_alert_message_ = const_cast< ::app::dispatch::HistoryAlertMessageResponse*>(&::app::dispatch::HistoryAlertMessageResponse::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  last_response_ = false;
  error_describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_ = NULL;
  entity_ = NULL;
  append_group_ = NULL;
  modify_group_ = NULL;
  modify_participants_ = NULL;
  group_message_ = NULL;
  append_alert_ = NULL;
  history_alerts_ = NULL;
  history_alert_ = NULL;
  history_alert_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  SharedDtor();
}

void Response::SharedDtor() {
  if (error_describe_ != &::google::protobuf::internal::kEmptyString) {
    delete error_describe_;
  }
  if (this != default_instance_) {
    delete login_;
    delete entity_;
    delete append_group_;
    delete modify_group_;
    delete modify_participants_;
    delete group_message_;
    delete append_alert_;
    delete history_alerts_;
    delete history_alert_;
    delete history_alert_message_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    last_response_ = false;
    if (has_error_describe()) {
      if (error_describe_ != &::google::protobuf::internal::kEmptyString) {
        error_describe_->clear();
      }
    }
    if (has_login()) {
      if (login_ != NULL) login_->::app::dispatch::LoginResponse::Clear();
    }
    if (has_entity()) {
      if (entity_ != NULL) entity_->::app::dispatch::EntityResponse::Clear();
    }
    if (has_append_group()) {
      if (append_group_ != NULL) append_group_->::app::dispatch::AppendGroupResponse::Clear();
    }
    if (has_modify_group()) {
      if (modify_group_ != NULL) modify_group_->::app::dispatch::ModifyGroupResponse::Clear();
    }
    if (has_modify_participants()) {
      if (modify_participants_ != NULL) modify_participants_->::app::dispatch::ModifyParticipantsResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_group_message()) {
      if (group_message_ != NULL) group_message_->::app::dispatch::MediaMessageResponse::Clear();
    }
    if (has_append_alert()) {
      if (append_alert_ != NULL) append_alert_->::app::dispatch::AppendAlertResponse::Clear();
    }
    if (has_history_alerts()) {
      if (history_alerts_ != NULL) history_alerts_->::app::dispatch::HistoryAlertsResponse::Clear();
    }
    if (has_history_alert()) {
      if (history_alert_ != NULL) history_alert_->::app::dispatch::HistoryAlertResponse::Clear();
    }
    if (has_history_alert_message()) {
      if (history_alert_message_ != NULL) history_alert_message_->::app::dispatch::HistoryAlertMessageResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_response;
        break;
      }

      // required bool last_response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_response_)));
          set_has_last_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_error_describe;
        break;
      }

      // optional bytes error_describe = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_describe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_login;
        break;
      }

      // optional .app.dispatch.LoginResponse login = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_entity;
        break;
      }

      // optional .app.dispatch.EntityResponse entity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_append_group;
        break;
      }

      // optional .app.dispatch.AppendGroupResponse append_group = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_append_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_append_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_modify_group;
        break;
      }

      // optional .app.dispatch.ModifyGroupResponse modify_group = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modify_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modify_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_modify_participants;
        break;
      }

      // optional .app.dispatch.ModifyParticipantsResponse modify_participants = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modify_participants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modify_participants()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_group_message;
        break;
      }

      // optional .app.dispatch.MediaMessageResponse group_message = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_append_alert;
        break;
      }

      // optional .app.dispatch.AppendAlertResponse append_alert = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_append_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_append_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_history_alerts;
        break;
      }

      // optional .app.dispatch.HistoryAlertsResponse history_alerts = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_alerts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_alerts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_history_alert;
        break;
      }

      // optional .app.dispatch.HistoryAlertResponse history_alert = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_history_alert_message;
        break;
      }

      // optional .app.dispatch.HistoryAlertMessageResponse history_alert_message = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_alert_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_alert_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // required bool last_response = 2;
  if (has_last_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->last_response(), output);
  }

  // optional bytes error_describe = 3;
  if (has_error_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->error_describe(), output);
  }

  // optional .app.dispatch.LoginResponse login = 4;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->login(), output);
  }

  // optional .app.dispatch.EntityResponse entity = 5;
  if (has_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->entity(), output);
  }

  // optional .app.dispatch.AppendGroupResponse append_group = 6;
  if (has_append_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->append_group(), output);
  }

  // optional .app.dispatch.ModifyGroupResponse modify_group = 7;
  if (has_modify_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->modify_group(), output);
  }

  // optional .app.dispatch.ModifyParticipantsResponse modify_participants = 8;
  if (has_modify_participants()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->modify_participants(), output);
  }

  // optional .app.dispatch.MediaMessageResponse group_message = 9;
  if (has_group_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->group_message(), output);
  }

  // optional .app.dispatch.AppendAlertResponse append_alert = 10;
  if (has_append_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->append_alert(), output);
  }

  // optional .app.dispatch.HistoryAlertsResponse history_alerts = 11;
  if (has_history_alerts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->history_alerts(), output);
  }

  // optional .app.dispatch.HistoryAlertResponse history_alert = 12;
  if (has_history_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->history_alert(), output);
  }

  // optional .app.dispatch.HistoryAlertMessageResponse history_alert_message = 13;
  if (has_history_alert_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->history_alert_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // required bool last_response = 2;
  if (has_last_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->last_response(), target);
  }

  // optional bytes error_describe = 3;
  if (has_error_describe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->error_describe(), target);
  }

  // optional .app.dispatch.LoginResponse login = 4;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->login(), target);
  }

  // optional .app.dispatch.EntityResponse entity = 5;
  if (has_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->entity(), target);
  }

  // optional .app.dispatch.AppendGroupResponse append_group = 6;
  if (has_append_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->append_group(), target);
  }

  // optional .app.dispatch.ModifyGroupResponse modify_group = 7;
  if (has_modify_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->modify_group(), target);
  }

  // optional .app.dispatch.ModifyParticipantsResponse modify_participants = 8;
  if (has_modify_participants()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->modify_participants(), target);
  }

  // optional .app.dispatch.MediaMessageResponse group_message = 9;
  if (has_group_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->group_message(), target);
  }

  // optional .app.dispatch.AppendAlertResponse append_alert = 10;
  if (has_append_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->append_alert(), target);
  }

  // optional .app.dispatch.HistoryAlertsResponse history_alerts = 11;
  if (has_history_alerts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->history_alerts(), target);
  }

  // optional .app.dispatch.HistoryAlertResponse history_alert = 12;
  if (has_history_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->history_alert(), target);
  }

  // optional .app.dispatch.HistoryAlertMessageResponse history_alert_message = 13;
  if (has_history_alert_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->history_alert_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // required bool last_response = 2;
    if (has_last_response()) {
      total_size += 1 + 1;
    }

    // optional bytes error_describe = 3;
    if (has_error_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->error_describe());
    }

    // optional .app.dispatch.LoginResponse login = 4;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

    // optional .app.dispatch.EntityResponse entity = 5;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity());
    }

    // optional .app.dispatch.AppendGroupResponse append_group = 6;
    if (has_append_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->append_group());
    }

    // optional .app.dispatch.ModifyGroupResponse modify_group = 7;
    if (has_modify_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modify_group());
    }

    // optional .app.dispatch.ModifyParticipantsResponse modify_participants = 8;
    if (has_modify_participants()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modify_participants());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .app.dispatch.MediaMessageResponse group_message = 9;
    if (has_group_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_message());
    }

    // optional .app.dispatch.AppendAlertResponse append_alert = 10;
    if (has_append_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->append_alert());
    }

    // optional .app.dispatch.HistoryAlertsResponse history_alerts = 11;
    if (has_history_alerts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_alerts());
    }

    // optional .app.dispatch.HistoryAlertResponse history_alert = 12;
    if (has_history_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_alert());
    }

    // optional .app.dispatch.HistoryAlertMessageResponse history_alert_message = 13;
    if (has_history_alert_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_alert_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_last_response()) {
      set_last_response(from.last_response());
    }
    if (from.has_error_describe()) {
      set_error_describe(from.error_describe());
    }
    if (from.has_login()) {
      mutable_login()->::app::dispatch::LoginResponse::MergeFrom(from.login());
    }
    if (from.has_entity()) {
      mutable_entity()->::app::dispatch::EntityResponse::MergeFrom(from.entity());
    }
    if (from.has_append_group()) {
      mutable_append_group()->::app::dispatch::AppendGroupResponse::MergeFrom(from.append_group());
    }
    if (from.has_modify_group()) {
      mutable_modify_group()->::app::dispatch::ModifyGroupResponse::MergeFrom(from.modify_group());
    }
    if (from.has_modify_participants()) {
      mutable_modify_participants()->::app::dispatch::ModifyParticipantsResponse::MergeFrom(from.modify_participants());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_group_message()) {
      mutable_group_message()->::app::dispatch::MediaMessageResponse::MergeFrom(from.group_message());
    }
    if (from.has_append_alert()) {
      mutable_append_alert()->::app::dispatch::AppendAlertResponse::MergeFrom(from.append_alert());
    }
    if (from.has_history_alerts()) {
      mutable_history_alerts()->::app::dispatch::HistoryAlertsResponse::MergeFrom(from.history_alerts());
    }
    if (from.has_history_alert()) {
      mutable_history_alert()->::app::dispatch::HistoryAlertResponse::MergeFrom(from.history_alert());
    }
    if (from.has_history_alert_message()) {
      mutable_history_alert_message()->::app::dispatch::HistoryAlertMessageResponse::MergeFrom(from.history_alert_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_login()) {
    if (!this->login().IsInitialized()) return false;
  }
  if (has_entity()) {
    if (!this->entity().IsInitialized()) return false;
  }
  if (has_append_group()) {
    if (!this->append_group().IsInitialized()) return false;
  }
  if (has_modify_group()) {
    if (!this->modify_group().IsInitialized()) return false;
  }
  if (has_modify_participants()) {
    if (!this->modify_participants().IsInitialized()) return false;
  }
  if (has_group_message()) {
    if (!this->group_message().IsInitialized()) return false;
  }
  if (has_append_alert()) {
    if (!this->append_alert().IsInitialized()) return false;
  }
  if (has_history_alert()) {
    if (!this->history_alert().IsInitialized()) return false;
  }
  if (has_history_alert_message()) {
    if (!this->history_alert_message().IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(last_response_, other->last_response_);
    std::swap(error_describe_, other->error_describe_);
    std::swap(login_, other->login_);
    std::swap(entity_, other->entity_);
    std::swap(append_group_, other->append_group_);
    std::swap(modify_group_, other->modify_group_);
    std::swap(modify_participants_, other->modify_participants_);
    std::swap(group_message_, other->group_message_);
    std::swap(append_alert_, other->append_alert_);
    std::swap(history_alerts_, other->history_alerts_);
    std::swap(history_alert_, other->history_alert_);
    std::swap(history_alert_message_, other->history_alert_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Indication::kEntityFieldNumber;
const int Indication::kEntityStatusFieldNumber;
const int Indication::kParticipantsFieldNumber;
const int Indication::kJoinGroupRequestFieldNumber;
const int Indication::kParticipantStatusFieldNumber;
const int Indication::kMediaMessageFieldNumber;
const int Indication::kParticipantConnectRequestFieldNumber;
const int Indication::kParticipantSpeakRequestFieldNumber;
const int Indication::kSessionStatusFieldNumber;
const int Indication::kRecordStatusFieldNumber;
const int Indication::kAccountLocationFieldNumber;
const int Indication::kAlertOveredFieldNumber;
const int Indication::kMoveUnitFieldNumber;
#endif  // !_MSC_VER

Indication::Indication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Indication::InitAsDefaultInstance() {
  entity_ = const_cast< ::app::dispatch::EntityNotification*>(&::app::dispatch::EntityNotification::default_instance());
  entity_status_ = const_cast< ::app::dispatch::EntityStatusNotification*>(&::app::dispatch::EntityStatusNotification::default_instance());
  participants_ = const_cast< ::app::dispatch::ParticipantsNotification*>(&::app::dispatch::ParticipantsNotification::default_instance());
  join_group_request_ = const_cast< ::app::dispatch::JoinGroupRequestNotification*>(&::app::dispatch::JoinGroupRequestNotification::default_instance());
  participant_status_ = const_cast< ::app::dispatch::ParticipantStatusNotification*>(&::app::dispatch::ParticipantStatusNotification::default_instance());
  media_message_ = const_cast< ::app::dispatch::MediaMessageNotification*>(&::app::dispatch::MediaMessageNotification::default_instance());
  participant_connect_request_ = const_cast< ::app::dispatch::ParticipantConnectRequestNotification*>(&::app::dispatch::ParticipantConnectRequestNotification::default_instance());
  participant_speak_request_ = const_cast< ::app::dispatch::ParticipantSpeakRequestNotification*>(&::app::dispatch::ParticipantSpeakRequestNotification::default_instance());
  session_status_ = const_cast< ::app::dispatch::SessionStatusNotification*>(&::app::dispatch::SessionStatusNotification::default_instance());
  record_status_ = const_cast< ::app::dispatch::RecordStatusNotification*>(&::app::dispatch::RecordStatusNotification::default_instance());
  account_location_ = const_cast< ::app::dispatch::AccountLocationNotification*>(&::app::dispatch::AccountLocationNotification::default_instance());
  alert_overed_ = const_cast< ::app::dispatch::AlertOveredNotification*>(&::app::dispatch::AlertOveredNotification::default_instance());
  move_unit_ = const_cast< ::app::dispatch::MoveUnitNotification*>(&::app::dispatch::MoveUnitNotification::default_instance());
}

Indication::Indication(const Indication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Indication::SharedCtor() {
  _cached_size_ = 0;
  entity_ = NULL;
  entity_status_ = NULL;
  participants_ = NULL;
  join_group_request_ = NULL;
  participant_status_ = NULL;
  media_message_ = NULL;
  participant_connect_request_ = NULL;
  participant_speak_request_ = NULL;
  session_status_ = NULL;
  record_status_ = NULL;
  account_location_ = NULL;
  alert_overed_ = NULL;
  move_unit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Indication::~Indication() {
  SharedDtor();
}

void Indication::SharedDtor() {
  if (this != default_instance_) {
    delete entity_;
    delete entity_status_;
    delete participants_;
    delete join_group_request_;
    delete participant_status_;
    delete media_message_;
    delete participant_connect_request_;
    delete participant_speak_request_;
    delete session_status_;
    delete record_status_;
    delete account_location_;
    delete alert_overed_;
    delete move_unit_;
  }
}

void Indication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Indication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Indication_descriptor_;
}

const Indication& Indication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

Indication* Indication::default_instance_ = NULL;

Indication* Indication::New() const {
  return new Indication;
}

void Indication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_entity()) {
      if (entity_ != NULL) entity_->::app::dispatch::EntityNotification::Clear();
    }
    if (has_entity_status()) {
      if (entity_status_ != NULL) entity_status_->::app::dispatch::EntityStatusNotification::Clear();
    }
    if (has_participants()) {
      if (participants_ != NULL) participants_->::app::dispatch::ParticipantsNotification::Clear();
    }
    if (has_join_group_request()) {
      if (join_group_request_ != NULL) join_group_request_->::app::dispatch::JoinGroupRequestNotification::Clear();
    }
    if (has_participant_status()) {
      if (participant_status_ != NULL) participant_status_->::app::dispatch::ParticipantStatusNotification::Clear();
    }
    if (has_media_message()) {
      if (media_message_ != NULL) media_message_->::app::dispatch::MediaMessageNotification::Clear();
    }
    if (has_participant_connect_request()) {
      if (participant_connect_request_ != NULL) participant_connect_request_->::app::dispatch::ParticipantConnectRequestNotification::Clear();
    }
    if (has_participant_speak_request()) {
      if (participant_speak_request_ != NULL) participant_speak_request_->::app::dispatch::ParticipantSpeakRequestNotification::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_session_status()) {
      if (session_status_ != NULL) session_status_->::app::dispatch::SessionStatusNotification::Clear();
    }
    if (has_record_status()) {
      if (record_status_ != NULL) record_status_->::app::dispatch::RecordStatusNotification::Clear();
    }
    if (has_account_location()) {
      if (account_location_ != NULL) account_location_->::app::dispatch::AccountLocationNotification::Clear();
    }
    if (has_alert_overed()) {
      if (alert_overed_ != NULL) alert_overed_->::app::dispatch::AlertOveredNotification::Clear();
    }
    if (has_move_unit()) {
      if (move_unit_ != NULL) move_unit_->::app::dispatch::MoveUnitNotification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Indication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.dispatch.EntityNotification entity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entity_status;
        break;
      }

      // optional .app.dispatch.EntityStatusNotification entity_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entity_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_participants;
        break;
      }

      // optional .app.dispatch.ParticipantsNotification participants = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_participants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_participants()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_join_group_request;
        break;
      }

      // optional .app.dispatch.JoinGroupRequestNotification join_group_request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_join_group_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_join_group_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_participant_status;
        break;
      }

      // optional .app.dispatch.ParticipantStatusNotification participant_status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_participant_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_participant_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_media_message;
        break;
      }

      // optional .app.dispatch.MediaMessageNotification media_message = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_media_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_media_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_participant_connect_request;
        break;
      }

      // optional .app.dispatch.ParticipantConnectRequestNotification participant_connect_request = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_participant_connect_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_participant_connect_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_participant_speak_request;
        break;
      }

      // optional .app.dispatch.ParticipantSpeakRequestNotification participant_speak_request = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_participant_speak_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_participant_speak_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_session_status;
        break;
      }

      // optional .app.dispatch.SessionStatusNotification session_status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_record_status;
        break;
      }

      // optional .app.dispatch.RecordStatusNotification record_status = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_account_location;
        break;
      }

      // optional .app.dispatch.AccountLocationNotification account_location = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_alert_overed;
        break;
      }

      // optional .app.dispatch.AlertOveredNotification alert_overed = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alert_overed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert_overed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_move_unit;
        break;
      }

      // optional .app.dispatch.MoveUnitNotification move_unit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_move_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_move_unit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Indication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.dispatch.EntityNotification entity = 1;
  if (has_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entity(), output);
  }

  // optional .app.dispatch.EntityStatusNotification entity_status = 2;
  if (has_entity_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entity_status(), output);
  }

  // optional .app.dispatch.ParticipantsNotification participants = 3;
  if (has_participants()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->participants(), output);
  }

  // optional .app.dispatch.JoinGroupRequestNotification join_group_request = 4;
  if (has_join_group_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->join_group_request(), output);
  }

  // optional .app.dispatch.ParticipantStatusNotification participant_status = 5;
  if (has_participant_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->participant_status(), output);
  }

  // optional .app.dispatch.MediaMessageNotification media_message = 6;
  if (has_media_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->media_message(), output);
  }

  // optional .app.dispatch.ParticipantConnectRequestNotification participant_connect_request = 7;
  if (has_participant_connect_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->participant_connect_request(), output);
  }

  // optional .app.dispatch.ParticipantSpeakRequestNotification participant_speak_request = 8;
  if (has_participant_speak_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->participant_speak_request(), output);
  }

  // optional .app.dispatch.SessionStatusNotification session_status = 9;
  if (has_session_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->session_status(), output);
  }

  // optional .app.dispatch.RecordStatusNotification record_status = 10;
  if (has_record_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->record_status(), output);
  }

  // optional .app.dispatch.AccountLocationNotification account_location = 11;
  if (has_account_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->account_location(), output);
  }

  // optional .app.dispatch.AlertOveredNotification alert_overed = 12;
  if (has_alert_overed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->alert_overed(), output);
  }

  // optional .app.dispatch.MoveUnitNotification move_unit = 13;
  if (has_move_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->move_unit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Indication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.dispatch.EntityNotification entity = 1;
  if (has_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entity(), target);
  }

  // optional .app.dispatch.EntityStatusNotification entity_status = 2;
  if (has_entity_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entity_status(), target);
  }

  // optional .app.dispatch.ParticipantsNotification participants = 3;
  if (has_participants()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->participants(), target);
  }

  // optional .app.dispatch.JoinGroupRequestNotification join_group_request = 4;
  if (has_join_group_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->join_group_request(), target);
  }

  // optional .app.dispatch.ParticipantStatusNotification participant_status = 5;
  if (has_participant_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->participant_status(), target);
  }

  // optional .app.dispatch.MediaMessageNotification media_message = 6;
  if (has_media_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->media_message(), target);
  }

  // optional .app.dispatch.ParticipantConnectRequestNotification participant_connect_request = 7;
  if (has_participant_connect_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->participant_connect_request(), target);
  }

  // optional .app.dispatch.ParticipantSpeakRequestNotification participant_speak_request = 8;
  if (has_participant_speak_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->participant_speak_request(), target);
  }

  // optional .app.dispatch.SessionStatusNotification session_status = 9;
  if (has_session_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->session_status(), target);
  }

  // optional .app.dispatch.RecordStatusNotification record_status = 10;
  if (has_record_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->record_status(), target);
  }

  // optional .app.dispatch.AccountLocationNotification account_location = 11;
  if (has_account_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->account_location(), target);
  }

  // optional .app.dispatch.AlertOveredNotification alert_overed = 12;
  if (has_alert_overed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->alert_overed(), target);
  }

  // optional .app.dispatch.MoveUnitNotification move_unit = 13;
  if (has_move_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->move_unit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Indication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.dispatch.EntityNotification entity = 1;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity());
    }

    // optional .app.dispatch.EntityStatusNotification entity_status = 2;
    if (has_entity_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity_status());
    }

    // optional .app.dispatch.ParticipantsNotification participants = 3;
    if (has_participants()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->participants());
    }

    // optional .app.dispatch.JoinGroupRequestNotification join_group_request = 4;
    if (has_join_group_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->join_group_request());
    }

    // optional .app.dispatch.ParticipantStatusNotification participant_status = 5;
    if (has_participant_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->participant_status());
    }

    // optional .app.dispatch.MediaMessageNotification media_message = 6;
    if (has_media_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->media_message());
    }

    // optional .app.dispatch.ParticipantConnectRequestNotification participant_connect_request = 7;
    if (has_participant_connect_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->participant_connect_request());
    }

    // optional .app.dispatch.ParticipantSpeakRequestNotification participant_speak_request = 8;
    if (has_participant_speak_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->participant_speak_request());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .app.dispatch.SessionStatusNotification session_status = 9;
    if (has_session_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_status());
    }

    // optional .app.dispatch.RecordStatusNotification record_status = 10;
    if (has_record_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record_status());
    }

    // optional .app.dispatch.AccountLocationNotification account_location = 11;
    if (has_account_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_location());
    }

    // optional .app.dispatch.AlertOveredNotification alert_overed = 12;
    if (has_alert_overed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert_overed());
    }

    // optional .app.dispatch.MoveUnitNotification move_unit = 13;
    if (has_move_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->move_unit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Indication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Indication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Indication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Indication::MergeFrom(const Indication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity()) {
      mutable_entity()->::app::dispatch::EntityNotification::MergeFrom(from.entity());
    }
    if (from.has_entity_status()) {
      mutable_entity_status()->::app::dispatch::EntityStatusNotification::MergeFrom(from.entity_status());
    }
    if (from.has_participants()) {
      mutable_participants()->::app::dispatch::ParticipantsNotification::MergeFrom(from.participants());
    }
    if (from.has_join_group_request()) {
      mutable_join_group_request()->::app::dispatch::JoinGroupRequestNotification::MergeFrom(from.join_group_request());
    }
    if (from.has_participant_status()) {
      mutable_participant_status()->::app::dispatch::ParticipantStatusNotification::MergeFrom(from.participant_status());
    }
    if (from.has_media_message()) {
      mutable_media_message()->::app::dispatch::MediaMessageNotification::MergeFrom(from.media_message());
    }
    if (from.has_participant_connect_request()) {
      mutable_participant_connect_request()->::app::dispatch::ParticipantConnectRequestNotification::MergeFrom(from.participant_connect_request());
    }
    if (from.has_participant_speak_request()) {
      mutable_participant_speak_request()->::app::dispatch::ParticipantSpeakRequestNotification::MergeFrom(from.participant_speak_request());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_session_status()) {
      mutable_session_status()->::app::dispatch::SessionStatusNotification::MergeFrom(from.session_status());
    }
    if (from.has_record_status()) {
      mutable_record_status()->::app::dispatch::RecordStatusNotification::MergeFrom(from.record_status());
    }
    if (from.has_account_location()) {
      mutable_account_location()->::app::dispatch::AccountLocationNotification::MergeFrom(from.account_location());
    }
    if (from.has_alert_overed()) {
      mutable_alert_overed()->::app::dispatch::AlertOveredNotification::MergeFrom(from.alert_overed());
    }
    if (from.has_move_unit()) {
      mutable_move_unit()->::app::dispatch::MoveUnitNotification::MergeFrom(from.move_unit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Indication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Indication::CopyFrom(const Indication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Indication::IsInitialized() const {

  if (has_entity()) {
    if (!this->entity().IsInitialized()) return false;
  }
  if (has_entity_status()) {
    if (!this->entity_status().IsInitialized()) return false;
  }
  if (has_participants()) {
    if (!this->participants().IsInitialized()) return false;
  }
  if (has_join_group_request()) {
    if (!this->join_group_request().IsInitialized()) return false;
  }
  if (has_participant_status()) {
    if (!this->participant_status().IsInitialized()) return false;
  }
  if (has_media_message()) {
    if (!this->media_message().IsInitialized()) return false;
  }
  if (has_participant_connect_request()) {
    if (!this->participant_connect_request().IsInitialized()) return false;
  }
  if (has_participant_speak_request()) {
    if (!this->participant_speak_request().IsInitialized()) return false;
  }
  if (has_session_status()) {
    if (!this->session_status().IsInitialized()) return false;
  }
  if (has_record_status()) {
    if (!this->record_status().IsInitialized()) return false;
  }
  if (has_account_location()) {
    if (!this->account_location().IsInitialized()) return false;
  }
  if (has_alert_overed()) {
    if (!this->alert_overed().IsInitialized()) return false;
  }
  if (has_move_unit()) {
    if (!this->move_unit().IsInitialized()) return false;
  }
  return true;
}

void Indication::Swap(Indication* other) {
  if (other != this) {
    std::swap(entity_, other->entity_);
    std::swap(entity_status_, other->entity_status_);
    std::swap(participants_, other->participants_);
    std::swap(join_group_request_, other->join_group_request_);
    std::swap(participant_status_, other->participant_status_);
    std::swap(media_message_, other->media_message_);
    std::swap(participant_connect_request_, other->participant_connect_request_);
    std::swap(participant_speak_request_, other->participant_speak_request_);
    std::swap(session_status_, other->session_status_);
    std::swap(record_status_, other->record_status_);
    std::swap(account_location_, other->account_location_);
    std::swap(alert_overed_, other->alert_overed_);
    std::swap(move_unit_, other->move_unit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Indication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Indication_descriptor_;
  metadata.reflection = Indication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kMsgTypeFieldNumber;
const int Message::kSequenceFieldNumber;
const int Message::kSessionIdFieldNumber;
const int Message::kRequestFieldNumber;
const int Message::kResponseFieldNumber;
const int Message::kIndicationFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
  request_ = const_cast< ::app::dispatch::Request*>(&::app::dispatch::Request::default_instance());
  response_ = const_cast< ::app::dispatch::Response*>(&::app::dispatch::Response::default_instance());
  indication_ = const_cast< ::app::dispatch::Indication*>(&::app::dispatch::Indication::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 200001;
  sequence_ = 0u;
  session_id_ = 0u;
  request_ = NULL;
  response_ = NULL;
  indication_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
    delete indication_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2edispatch_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 200001;
    sequence_ = 0u;
    session_id_ = 0u;
    if (has_request()) {
      if (request_ != NULL) request_->::app::dispatch::Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::app::dispatch::Response::Clear();
    }
    if (has_indication()) {
      if (indication_ != NULL) indication_->::app::dispatch::Indication::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .app.dispatch.MSG msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::dispatch::MSG_IsValid(value)) {
            set_msg_type(static_cast< ::app::dispatch::MSG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sequence;
        break;
      }

      // required fixed32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_session_id;
        break;
      }

      // optional fixed32 session_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_request;
        break;
      }

      // optional .app.dispatch.Request request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_response;
        break;
      }

      // optional .app.dispatch.Response response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_indication;
        break;
      }

      // optional .app.dispatch.Indication indication = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indication:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indication()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .app.dispatch.MSG msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // required fixed32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->sequence(), output);
  }

  // optional fixed32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->session_id(), output);
  }

  // optional .app.dispatch.Request request = 4;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->request(), output);
  }

  // optional .app.dispatch.Response response = 5;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->response(), output);
  }

  // optional .app.dispatch.Indication indication = 6;
  if (has_indication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->indication(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .app.dispatch.MSG msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // required fixed32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->sequence(), target);
  }

  // optional fixed32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->session_id(), target);
  }

  // optional .app.dispatch.Request request = 4;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->request(), target);
  }

  // optional .app.dispatch.Response response = 5;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->response(), target);
  }

  // optional .app.dispatch.Indication indication = 6;
  if (has_indication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->indication(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .app.dispatch.MSG msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // required fixed32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 + 4;
    }

    // optional fixed32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 + 4;
    }

    // optional .app.dispatch.Request request = 4;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .app.dispatch.Response response = 5;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional .app.dispatch.Indication indication = 6;
    if (has_indication()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indication());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_request()) {
      mutable_request()->::app::dispatch::Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::app::dispatch::Response::MergeFrom(from.response());
    }
    if (from.has_indication()) {
      mutable_indication()->::app::dispatch::Indication::MergeFrom(from.indication());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_request()) {
    if (!this->request().IsInitialized()) return false;
  }
  if (has_response()) {
    if (!this->response().IsInitialized()) return false;
  }
  if (has_indication()) {
    if (!this->indication().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(sequence_, other->sequence_);
    std::swap(session_id_, other->session_id_);
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(indication_, other->indication_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dispatch
}  // namespace app

// @@protoc_insertion_point(global_scope)
