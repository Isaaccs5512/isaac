// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EntityData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EntityData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbmsg {

namespace {

const ::google::protobuf::Descriptor* EntityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EntityNotifyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ListModifyType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_EntityData_2eproto() {
  protobuf_AddDesc_EntityData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EntityData.proto");
  GOOGLE_CHECK(file != NULL);
  EntityData_descriptor_ = file->message_type(0);
  static const int EntityData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, gateway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, organization_),
  };
  EntityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntityData_descriptor_,
      EntityData::default_instance_,
      EntityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntityData));
  EntityNotifyType_descriptor_ = file->enum_type(0);
  ListModifyType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EntityData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntityData_descriptor_, &EntityData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EntityData_2eproto() {
  delete EntityData::default_instance_;
  delete EntityData_reflection_;
}

void protobuf_AddDesc_EntityData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pbmsg::protobuf_AddDesc_AppData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020EntityData.proto\022\005pbmsg\032\rAppData.proto"
    "\"\204\002\n\nEntityData\022\031\n\002id\030\001 \002(\0132\r.pbmsg.Enti"
    "ty\022\031\n\004unit\030\002 \001(\0132\013.pbmsg.Unit\022\037\n\007account"
    "\030\003 \001(\0132\016.pbmsg.Account\022\031\n\004user\030\004 \001(\0132\013.p"
    "bmsg.User\022\033\n\005group\030\005 \001(\0132\014.pbmsg.Group\022\033"
    "\n\005alert\030\006 \001(\0132\014.pbmsg.Alert\022\037\n\007gateway\030\007"
    " \001(\0132\016.pbmsg.Gateway\022)\n\014organization\030\010 \001"
    "(\0132\023.pbmsg.Organization*D\n\020EntityNotifyT"
    "ype\022\013\n\007Created\020\000\022\n\n\006Modify\020\001\022\n\n\006Update\020\002"
    "\022\013\n\007Deleted\020\003*:\n\016ListModifyType\022\r\n\tIncre"
    "ased\020\000\022\014\n\010Decrease\020\001\022\013\n\007Replace\020\002", 433);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EntityData.proto", &protobuf_RegisterTypes);
  EntityData::default_instance_ = new EntityData();
  EntityData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EntityData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EntityData_2eproto {
  StaticDescriptorInitializer_EntityData_2eproto() {
    protobuf_AddDesc_EntityData_2eproto();
  }
} static_descriptor_initializer_EntityData_2eproto_;
const ::google::protobuf::EnumDescriptor* EntityNotifyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityNotifyType_descriptor_;
}
bool EntityNotifyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ListModifyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListModifyType_descriptor_;
}
bool ListModifyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int EntityData::kIdFieldNumber;
const int EntityData::kUnitFieldNumber;
const int EntityData::kAccountFieldNumber;
const int EntityData::kUserFieldNumber;
const int EntityData::kGroupFieldNumber;
const int EntityData::kAlertFieldNumber;
const int EntityData::kGatewayFieldNumber;
const int EntityData::kOrganizationFieldNumber;
#endif  // !_MSC_VER

EntityData::EntityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntityData::InitAsDefaultInstance() {
  id_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  unit_ = const_cast< ::pbmsg::Unit*>(&::pbmsg::Unit::default_instance());
  account_ = const_cast< ::pbmsg::Account*>(&::pbmsg::Account::default_instance());
  user_ = const_cast< ::pbmsg::User*>(&::pbmsg::User::default_instance());
  group_ = const_cast< ::pbmsg::Group*>(&::pbmsg::Group::default_instance());
  alert_ = const_cast< ::pbmsg::Alert*>(&::pbmsg::Alert::default_instance());
  gateway_ = const_cast< ::pbmsg::Gateway*>(&::pbmsg::Gateway::default_instance());
  organization_ = const_cast< ::pbmsg::Organization*>(&::pbmsg::Organization::default_instance());
}

EntityData::EntityData(const EntityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntityData::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  unit_ = NULL;
  account_ = NULL;
  user_ = NULL;
  group_ = NULL;
  alert_ = NULL;
  gateway_ = NULL;
  organization_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityData::~EntityData() {
  SharedDtor();
}

void EntityData::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete unit_;
    delete account_;
    delete user_;
    delete group_;
    delete alert_;
    delete gateway_;
    delete organization_;
  }
}

void EntityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityData_descriptor_;
}

const EntityData& EntityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EntityData_2eproto();
  return *default_instance_;
}

EntityData* EntityData::default_instance_ = NULL;

EntityData* EntityData::New() const {
  return new EntityData;
}

void EntityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::pbmsg::Entity::Clear();
    }
    if (has_unit()) {
      if (unit_ != NULL) unit_->::pbmsg::Unit::Clear();
    }
    if (has_account()) {
      if (account_ != NULL) account_->::pbmsg::Account::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::pbmsg::User::Clear();
    }
    if (has_group()) {
      if (group_ != NULL) group_->::pbmsg::Group::Clear();
    }
    if (has_alert()) {
      if (alert_ != NULL) alert_->::pbmsg::Alert::Clear();
    }
    if (has_gateway()) {
      if (gateway_ != NULL) gateway_->::pbmsg::Gateway::Clear();
    }
    if (has_organization()) {
      if (organization_ != NULL) organization_->::pbmsg::Organization::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unit;
        break;
      }

      // optional .pbmsg.Unit unit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional .pbmsg.Account account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // optional .pbmsg.User user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_group;
        break;
      }

      // optional .pbmsg.Group group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_alert;
        break;
      }

      // optional .pbmsg.Alert alert = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_gateway;
        break;
      }

      // optional .pbmsg.Gateway gateway = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateway:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gateway()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_organization;
        break;
      }

      // optional .pbmsg.Organization organization = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_organization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_organization()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional .pbmsg.Unit unit = 2;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unit(), output);
  }

  // optional .pbmsg.Account account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->account(), output);
  }

  // optional .pbmsg.User user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user(), output);
  }

  // optional .pbmsg.Group group = 5;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->group(), output);
  }

  // optional .pbmsg.Alert alert = 6;
  if (has_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->alert(), output);
  }

  // optional .pbmsg.Gateway gateway = 7;
  if (has_gateway()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gateway(), output);
  }

  // optional .pbmsg.Organization organization = 8;
  if (has_organization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->organization(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional .pbmsg.Unit unit = 2;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unit(), target);
  }

  // optional .pbmsg.Account account = 3;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->account(), target);
  }

  // optional .pbmsg.User user = 4;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user(), target);
  }

  // optional .pbmsg.Group group = 5;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->group(), target);
  }

  // optional .pbmsg.Alert alert = 6;
  if (has_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->alert(), target);
  }

  // optional .pbmsg.Gateway gateway = 7;
  if (has_gateway()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->gateway(), target);
  }

  // optional .pbmsg.Organization organization = 8;
  if (has_organization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->organization(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .pbmsg.Unit unit = 2;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit());
    }

    // optional .pbmsg.Account account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

    // optional .pbmsg.User user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .pbmsg.Group group = 5;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
    }

    // optional .pbmsg.Alert alert = 6;
    if (has_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert());
    }

    // optional .pbmsg.Gateway gateway = 7;
    if (has_gateway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gateway());
    }

    // optional .pbmsg.Organization organization = 8;
    if (has_organization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->organization());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityData::MergeFrom(const EntityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::pbmsg::Entity::MergeFrom(from.id());
    }
    if (from.has_unit()) {
      mutable_unit()->::pbmsg::Unit::MergeFrom(from.unit());
    }
    if (from.has_account()) {
      mutable_account()->::pbmsg::Account::MergeFrom(from.account());
    }
    if (from.has_user()) {
      mutable_user()->::pbmsg::User::MergeFrom(from.user());
    }
    if (from.has_group()) {
      mutable_group()->::pbmsg::Group::MergeFrom(from.group());
    }
    if (from.has_alert()) {
      mutable_alert()->::pbmsg::Alert::MergeFrom(from.alert());
    }
    if (from.has_gateway()) {
      mutable_gateway()->::pbmsg::Gateway::MergeFrom(from.gateway());
    }
    if (from.has_organization()) {
      mutable_organization()->::pbmsg::Organization::MergeFrom(from.organization());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityData::CopyFrom(const EntityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_unit()) {
    if (!this->unit().IsInitialized()) return false;
  }
  if (has_account()) {
    if (!this->account().IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_group()) {
    if (!this->group().IsInitialized()) return false;
  }
  if (has_alert()) {
    if (!this->alert().IsInitialized()) return false;
  }
  if (has_gateway()) {
    if (!this->gateway().IsInitialized()) return false;
  }
  if (has_organization()) {
    if (!this->organization().IsInitialized()) return false;
  }
  return true;
}

void EntityData::Swap(EntityData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(unit_, other->unit_);
    std::swap(account_, other->account_);
    std::swap(user_, other->user_);
    std::swap(group_, other->group_);
    std::swap(alert_, other->alert_);
    std::swap(gateway_, other->gateway_);
    std::swap(organization_, other->organization_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityData_descriptor_;
  metadata.reflection = EntityData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbmsg

// @@protoc_insertion_point(global_scope)
