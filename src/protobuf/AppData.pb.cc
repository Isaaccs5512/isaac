// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AppData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AppData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbmsg {

namespace {

const ::google::protobuf::Descriptor* Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Unit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Unit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Account_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* Organization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Organization_reflection_ = NULL;
const ::google::protobuf::Descriptor* Participant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Participant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Group_reflection_ = NULL;
const ::google::protobuf::Descriptor* Alert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Alert_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gateway_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gateway_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AlertStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AlertLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RecordType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AccountServiceStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CallPrivilege_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CustomStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RegisterStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EntityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TokenPrivilege_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AccountType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GpsReportMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RecordStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AppData_2eproto() {
  protobuf_AddDesc_AppData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AppData.proto");
  GOOGLE_CHECK(file != NULL);
  Address_descriptor_ = file->message_type(0);
  static const int Address_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, port_),
  };
  Address_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Address_descriptor_,
      Address::default_instance_,
      Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Address));
  Entity_descriptor_ = file->message_type(1);
  static const int Entity_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, entity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, parent_),
  };
  Entity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Entity_descriptor_,
      Entity::default_instance_,
      Entity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Entity));
  Unit_descriptor_ = file->message_type(2);
  static const int Unit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, include_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, members_),
  };
  Unit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Unit_descriptor_,
      Unit::default_instance_,
      Unit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Unit));
  Account_descriptor_ = file->message_type(3);
  static const int Account_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, short_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, service_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, call_privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, token_privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, gps_report_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, gps_ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, sip_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, binding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, subscribing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, participant_subscribing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, message_subscribing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, custom_status_),
  };
  Account_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Account_descriptor_,
      Account::default_instance_,
      Account_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Account));
  User_descriptor_ = file->message_type(4);
  static const int User_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, user_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, address_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  Organization_descriptor_ = file->message_type(5);
  static const int Organization_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, include_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, members_),
  };
  Organization_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Organization_descriptor_,
      Organization::default_instance_,
      Organization_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Organization, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Organization));
  Participant_descriptor_ = file->message_type(6);
  static const int Participant_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, call_privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, token_privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, join_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, participant_subscribing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, message_subscribing_),
  };
  Participant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Participant_descriptor_,
      Participant::default_instance_,
      Participant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Participant));
  Group_descriptor_ = file->message_type(7);
  static const int Group_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, short_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, sealed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, include_participants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, participants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, temporary_),
  };
  Group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Group_descriptor_,
      Group::default_instance_,
      Group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Group));
  Alert_descriptor_ = file->message_type(8);
  static const int Alert_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, alram_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, use_cars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, create_time_),
  };
  Alert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Alert_descriptor_,
      Alert::default_instance_,
      Alert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Alert));
  Gateway_descriptor_ = file->message_type(9);
  static const int Gateway_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gateway, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gateway, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gateway, status_),
  };
  Gateway_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gateway_descriptor_,
      Gateway::default_instance_,
      Gateway_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gateway, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gateway, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gateway));
  AlertStatus_descriptor_ = file->enum_type(0);
  AlertLevel_descriptor_ = file->enum_type(1);
  SessionStatus_descriptor_ = file->enum_type(2);
  RecordType_descriptor_ = file->enum_type(3);
  AccountServiceStatus_descriptor_ = file->enum_type(4);
  CallPrivilege_descriptor_ = file->enum_type(5);
  CustomStatus_descriptor_ = file->enum_type(6);
  RegisterStatus_descriptor_ = file->enum_type(7);
  EntityType_descriptor_ = file->enum_type(8);
  UserType_descriptor_ = file->enum_type(9);
  MessageType_descriptor_ = file->enum_type(10);
  TokenPrivilege_descriptor_ = file->enum_type(11);
  AccountType_descriptor_ = file->enum_type(12);
  GpsReportMode_descriptor_ = file->enum_type(13);
  RecordStatus_descriptor_ = file->enum_type(14);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AppData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Address_descriptor_, &Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Entity_descriptor_, &Entity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Unit_descriptor_, &Unit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Account_descriptor_, &Account::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Organization_descriptor_, &Organization::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Participant_descriptor_, &Participant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Group_descriptor_, &Group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Alert_descriptor_, &Alert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gateway_descriptor_, &Gateway::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AppData_2eproto() {
  delete Address::default_instance_;
  delete Address_reflection_;
  delete Entity::default_instance_;
  delete Entity_reflection_;
  delete Unit::default_instance_;
  delete Unit_reflection_;
  delete Account::default_instance_;
  delete Account_reflection_;
  delete User::default_instance_;
  delete User_reflection_;
  delete Organization::default_instance_;
  delete Organization_reflection_;
  delete Participant::default_instance_;
  delete Participant_reflection_;
  delete Group::default_instance_;
  delete Group_reflection_;
  delete Alert::default_instance_;
  delete Alert_reflection_;
  delete Gateway::default_instance_;
  delete Gateway_reflection_;
}

void protobuf_AddDesc_AppData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rAppData.proto\022\005pbmsg\"#\n\007Address\022\n\n\002ip\030"
    "\001 \001(\014\022\014\n\004port\030\002 \001(\007\"i\n\006Entity\022\n\n\002id\030\001 \001("
    "\007\022\014\n\004name\030\002 \001(\014\022&\n\013entity_type\030\003 \001(\0162\021.p"
    "bmsg.EntityType\022\035\n\006parent\030\004 \001(\0132\r.pbmsg."
    "Entity\"\\\n\004Unit\022\033\n\004base\030\001 \002(\0132\r.pbmsg.Ent"
    "ity\022\027\n\017include_members\030\002 \001(\010\022\036\n\007members\030"
    "\003 \003(\0132\r.pbmsg.Entity\"\265\005\n\007Account\022\033\n\004base"
    "\030\001 \002(\0132\r.pbmsg.Entity\022(\n\014account_type\030\002 "
    "\001(\0162\022.pbmsg.AccountType\022\016\n\006number\030\003 \001(\014\022"
    "\024\n\014short_number\030\004 \001(\014\022\020\n\010password\030\005 \001(\014\022"
    "3\n\016service_status\030\006 \001(\0162\033.pbmsg.AccountS"
    "erviceStatus\022\020\n\010priority\030\007 \001(\007\022,\n\016call_p"
    "rivilege\030\010 \001(\0162\024.pbmsg.CallPrivilege\022.\n\017"
    "token_privilege\030\t \001(\0162\025.pbmsg.TokenPrivi"
    "lege\022-\n\017gps_report_mode\030\n \001(\0162\024.pbmsg.Gp"
    "sReportMode\022\013\n\003ttl\030\013 \001(\007\022\017\n\007gps_ttl\030\014 \001("
    "\007\022%\n\006status\030\r \001(\0162\025.pbmsg.RegisterStatus"
    "\022)\n\nsip_status\030\016 \001(\0162\025.pbmsg.RegisterSta"
    "tus\022\037\n\007address\030\017 \001(\0132\016.pbmsg.Address\022\017\n\007"
    "binding\030\020 \001(\010\022\023\n\013subscribing\030\021 \001(\010\022\020\n\010la"
    "titude\030\022 \001(\001\022\021\n\tlongitude\030\023 \001(\001\022\021\n\ttimes"
    "tamp\030\024 \001(\014\022\037\n\027participant_subscribing\030\025 "
    "\001(\010\022\033\n\023message_subscribing\030\026 \001(\010\022*\n\rcust"
    "om_status\030\027 \001(\0162\023.pbmsg.CustomStatus\"\301\001\n"
    "\004User\022\033\n\004base\030\001 \002(\0132\r.pbmsg.Entity\022\020\n\010pa"
    "ssword\030\002 \001(\014\022\"\n\tuser_type\030\003 \001(\0162\017.pbmsg."
    "UserType\022\036\n\007account\030\004 \001(\0132\r.pbmsg.Entity"
    "\022%\n\006status\030\005 \001(\0162\025.pbmsg.RegisterStatus\022"
    "\037\n\007address\030\006 \001(\0132\016.pbmsg.Address\"d\n\014Orga"
    "nization\022\033\n\004base\030\001 \002(\0132\r.pbmsg.Entity\022\027\n"
    "\017include_members\030\002 \001(\010\022\036\n\007members\030\003 \003(\0132"
    "\r.pbmsg.Entity\"\303\002\n\013Participant\022\n\n\002id\030\001 \001"
    "(\007\022\034\n\005group\030\002 \001(\0132\r.pbmsg.Entity\022\036\n\007acco"
    "unt\030\003 \001(\0132\r.pbmsg.Entity\022\020\n\010priority\030\004 \001"
    "(\007\022,\n\016call_privilege\030\005 \001(\0162\024.pbmsg.CallP"
    "rivilege\022.\n\017token_privilege\030\006 \001(\0162\025.pbms"
    "g.TokenPrivilege\022\026\n\016join_timestamp\030\007 \001(\014"
    "\022$\n\006status\030\010 \001(\0162\024.pbmsg.SessionStatus\022\037"
    "\n\027participant_subscribing\030\t \001(\010\022\033\n\023messa"
    "ge_subscribing\030\n \001(\010\"\323\001\n\005Group\022\033\n\004base\030\001"
    " \002(\0132\r.pbmsg.Entity\022\034\n\005owner\030\002 \001(\0132\r.pbm"
    "sg.Entity\022\016\n\006number\030\003 \001(\014\022\024\n\014short_numbe"
    "r\030\004 \001(\014\022\016\n\006sealed\030\005 \001(\010\022\034\n\024include_parti"
    "cipants\030\006 \001(\010\022(\n\014participants\030\007 \003(\0132\022.pb"
    "msg.Participant\022\021\n\ttemporary\030\010 \001(\010\"\261\001\n\005A"
    "lert\022\033\n\004base\030\001 \002(\0132\r.pbmsg.Entity\022\034\n\005gro"
    "up\030\002 \001(\0132\r.pbmsg.Entity\022\020\n\010describe\030\003 \001("
    "\014\022 \n\005level\030\004 \001(\0162\021.pbmsg.AlertLevel\022\022\n\na"
    "lram_time\030\005 \001(\014\022\020\n\010use_cars\030\006 \001(\007\022\023\n\013cre"
    "ate_time\030\007 \001(\014\"n\n\007Gateway\022\033\n\004base\030\001 \002(\0132"
    "\r.pbmsg.Entity\022\037\n\007address\030\002 \001(\0132\016.pbmsg."
    "Address\022%\n\006status\030\003 \001(\0162\025.pbmsg.Register"
    "Status*-\n\013AlertStatus\022\017\n\013AlertActive\020\000\022\r"
    "\n\tAlertOver\020\001*K\n\nAlertLevel\022\014\n\010Exigency\020"
    "\000\022\016\n\nImportance\020\001\022\021\n\rSubordination\020\002\022\014\n\010"
    "Ordinary\020\003*3\n\rSessionStatus\022\010\n\004IDLE\020\000\022\013\n"
    "\007InGroup\020\001\022\013\n\007Talking\020\002*>\n\nRecordType\022\016\n"
    "\nDontRecord\020\000\022\016\n\nAutoRecord\020\001\022\020\n\014ManualR"
    "ecord\020\002*:\n\024AccountServiceStatus\022\017\n\013Accou"
    "ntStop\020\000\022\021\n\rAccountActive\020\001*@\n\rCallPrivi"
    "lege\022\016\n\nCallForbid\020\000\022\017\n\013CallFreedom\020\001\022\016\n"
    "\nCallPolicy\020\002*@\n\014CustomStatus\022\013\n\007Standby"
    "\020\000\022\010\n\004Duty\020\001\022\013\n\007Turnout\020\002\022\014\n\010Training\020\003*"
    ")\n\016RegisterStatus\022\013\n\007OffLine\020\000\022\n\n\006OnLine"
    "\020\001*b\n\nEntityType\022\010\n\004UNIT\020\000\022\013\n\007ACCOUNT\020\001\022"
    "\010\n\004USER\020\002\022\t\n\005GROUP\020\003\022\013\n\007GATEWAY\020\004\022\020\n\014ORG"
    "ANIZATION\020\005\022\t\n\005ALERT\020\006*#\n\010UserType\022\t\n\005Ad"
    "min\020\000\022\014\n\010Operator\020\001*8\n\013MessageType\022\010\n\004Te"
    "xt\020\000\022\013\n\007Picture\020\001\022\022\n\016TextPictureMix\020\002*D\n"
    "\016TokenPrivilege\022\017\n\013TokenForbid\020\000\022\020\n\014Toke"
    "nFreedom\020\001\022\017\n\013TokenPolicy\020\002*I\n\013AccountTy"
    "pe\022\016\n\nDispatcher\020\000\022\014\n\010Terminal\020\001\022\n\n\006Reco"
    "rd\020\002\022\020\n\014MediaGateway\020\003*F\n\rGpsReportMode\022"
    "\021\n\rGpsManualPull\020\000\022\021\n\rGpsManualPush\020\001\022\017\n"
    "\013GpsAutoPush\020\002*/\n\014RecordStatus\022\016\n\nRecord"
    "Stop\020\000\022\017\n\013RecordStart\020\001", 3023);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AppData.proto", &protobuf_RegisterTypes);
  Address::default_instance_ = new Address();
  Entity::default_instance_ = new Entity();
  Unit::default_instance_ = new Unit();
  Account::default_instance_ = new Account();
  User::default_instance_ = new User();
  Organization::default_instance_ = new Organization();
  Participant::default_instance_ = new Participant();
  Group::default_instance_ = new Group();
  Alert::default_instance_ = new Alert();
  Gateway::default_instance_ = new Gateway();
  Address::default_instance_->InitAsDefaultInstance();
  Entity::default_instance_->InitAsDefaultInstance();
  Unit::default_instance_->InitAsDefaultInstance();
  Account::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  Organization::default_instance_->InitAsDefaultInstance();
  Participant::default_instance_->InitAsDefaultInstance();
  Group::default_instance_->InitAsDefaultInstance();
  Alert::default_instance_->InitAsDefaultInstance();
  Gateway::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AppData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AppData_2eproto {
  StaticDescriptorInitializer_AppData_2eproto() {
    protobuf_AddDesc_AppData_2eproto();
  }
} static_descriptor_initializer_AppData_2eproto_;
const ::google::protobuf::EnumDescriptor* AlertStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlertStatus_descriptor_;
}
bool AlertStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AlertLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlertLevel_descriptor_;
}
bool AlertLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SessionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionStatus_descriptor_;
}
bool SessionStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RecordType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordType_descriptor_;
}
bool RecordType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AccountServiceStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountServiceStatus_descriptor_;
}
bool AccountServiceStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CallPrivilege_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallPrivilege_descriptor_;
}
bool CallPrivilege_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CustomStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustomStatus_descriptor_;
}
bool CustomStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RegisterStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterStatus_descriptor_;
}
bool RegisterStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EntityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityType_descriptor_;
}
bool EntityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserType_descriptor_;
}
bool UserType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TokenPrivilege_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenPrivilege_descriptor_;
}
bool TokenPrivilege_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AccountType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountType_descriptor_;
}
bool AccountType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GpsReportMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsReportMode_descriptor_;
}
bool GpsReportMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RecordStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordStatus_descriptor_;
}
bool RecordStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Address::kIpFieldNumber;
const int Address::kPortFieldNumber;
#endif  // !_MSC_VER

Address::Address()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Address::InitAsDefaultInstance() {
}

Address::Address(const Address& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Address::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Address::~Address() {
  SharedDtor();
}

void Address::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Address_descriptor_;
}

const Address& Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AppData_2eproto();
  return *default_instance_;
}

Address* Address::default_instance_ = NULL;

Address* Address::New() const {
  return new Address;
}

void Address::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_port;
        break;
      }

      // optional fixed32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ip(), output);
  }

  // optional fixed32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // optional fixed32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Address::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional fixed32 port = 2;
    if (has_port()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Address* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Address*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {

  return true;
}

void Address::Swap(Address* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Address_descriptor_;
  metadata.reflection = Address_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Entity::kIdFieldNumber;
const int Entity::kNameFieldNumber;
const int Entity::kEntityTypeFieldNumber;
const int Entity::kParentFieldNumber;
#endif  // !_MSC_VER

Entity::Entity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Entity::InitAsDefaultInstance() {
  parent_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

Entity::Entity(const Entity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Entity::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entity_type_ = 0;
  parent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entity::~Entity() {
  SharedDtor();
}

void Entity::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete parent_;
  }
}

void Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_descriptor_;
}

const Entity& Entity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AppData_2eproto();
  return *default_instance_;
}

Entity* Entity::default_instance_ = NULL;

Entity* Entity::New() const {
  return new Entity;
}

void Entity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    entity_type_ = 0;
    if (has_parent()) {
      if (parent_ != NULL) parent_->::pbmsg::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_entity_type;
        break;
      }

      // optional .pbmsg.EntityType entity_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entity_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::EntityType_IsValid(value)) {
            set_entity_type(static_cast< ::pbmsg::EntityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parent;
        break;
      }

      // optional .pbmsg.Entity parent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional .pbmsg.EntityType entity_type = 3;
  if (has_entity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->entity_type(), output);
  }

  // optional .pbmsg.Entity parent = 4;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->parent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Entity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional .pbmsg.EntityType entity_type = 3;
  if (has_entity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->entity_type(), target);
  }

  // optional .pbmsg.Entity parent = 4;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->parent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Entity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional .pbmsg.EntityType entity_type = 3;
    if (has_entity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_type());
    }

    // optional .pbmsg.Entity parent = 4;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Entity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Entity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_entity_type()) {
      set_entity_type(from.entity_type());
    }
    if (from.has_parent()) {
      mutable_parent()->::pbmsg::Entity::MergeFrom(from.parent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {

  return true;
}

void Entity::Swap(Entity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(entity_type_, other->entity_type_);
    std::swap(parent_, other->parent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entity_descriptor_;
  metadata.reflection = Entity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Unit::kBaseFieldNumber;
const int Unit::kIncludeMembersFieldNumber;
const int Unit::kMembersFieldNumber;
#endif  // !_MSC_VER

Unit::Unit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Unit::InitAsDefaultInstance() {
  base_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

Unit::Unit(const Unit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Unit::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  include_members_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Unit::~Unit() {
  SharedDtor();
}

void Unit::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void Unit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Unit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Unit_descriptor_;
}

const Unit& Unit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AppData_2eproto();
  return *default_instance_;
}

Unit* Unit::default_instance_ = NULL;

Unit* Unit::New() const {
  return new Unit;
}

void Unit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::pbmsg::Entity::Clear();
    }
    include_members_ = false;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_include_members;
        break;
      }

      // optional bool include_members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_include_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_members_)));
          set_has_include_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        break;
      }

      // repeated .pbmsg.Entity members = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional bool include_members = 2;
  if (has_include_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->include_members(), output);
  }

  // repeated .pbmsg.Entity members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Unit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional bool include_members = 2;
  if (has_include_members()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->include_members(), target);
  }

  // repeated .pbmsg.Entity members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Unit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional bool include_members = 2;
    if (has_include_members()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pbmsg.Entity members = 3;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Unit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Unit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Unit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Unit::MergeFrom(const Unit& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::pbmsg::Entity::MergeFrom(from.base());
    }
    if (from.has_include_members()) {
      set_include_members(from.include_members());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Unit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unit::CopyFrom(const Unit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Unit::Swap(Unit* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(include_members_, other->include_members_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Unit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Unit_descriptor_;
  metadata.reflection = Unit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Account::kBaseFieldNumber;
const int Account::kAccountTypeFieldNumber;
const int Account::kNumberFieldNumber;
const int Account::kShortNumberFieldNumber;
const int Account::kPasswordFieldNumber;
const int Account::kServiceStatusFieldNumber;
const int Account::kPriorityFieldNumber;
const int Account::kCallPrivilegeFieldNumber;
const int Account::kTokenPrivilegeFieldNumber;
const int Account::kGpsReportModeFieldNumber;
const int Account::kTtlFieldNumber;
const int Account::kGpsTtlFieldNumber;
const int Account::kStatusFieldNumber;
const int Account::kSipStatusFieldNumber;
const int Account::kAddressFieldNumber;
const int Account::kBindingFieldNumber;
const int Account::kSubscribingFieldNumber;
const int Account::kLatitudeFieldNumber;
const int Account::kLongitudeFieldNumber;
const int Account::kTimestampFieldNumber;
const int Account::kParticipantSubscribingFieldNumber;
const int Account::kMessageSubscribingFieldNumber;
const int Account::kCustomStatusFieldNumber;
#endif  // !_MSC_VER

Account::Account()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Account::InitAsDefaultInstance() {
  base_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  address_ = const_cast< ::pbmsg::Address*>(&::pbmsg::Address::default_instance());
}

Account::Account(const Account& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Account::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  account_type_ = 0;
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  short_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_status_ = 0;
  priority_ = 0u;
  call_privilege_ = 0;
  token_privilege_ = 0;
  gps_report_mode_ = 0;
  ttl_ = 0u;
  gps_ttl_ = 0u;
  status_ = 0;
  sip_status_ = 0;
  address_ = NULL;
  binding_ = false;
  subscribing_ = false;
  latitude_ = 0;
  longitude_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  participant_subscribing_ = false;
  message_subscribing_ = false;
  custom_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account::~Account() {
  SharedDtor();
}

void Account::SharedDtor() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (short_number_ != &::google::protobuf::internal::kEmptyString) {
    delete short_number_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
    delete base_;
    delete address_;
  }
}

void Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Account_descriptor_;
}

const Account& Account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AppData_2eproto();
  return *default_instance_;
}

Account* Account::default_instance_ = NULL;

Account* Account::New() const {
  return new Account;
}

void Account::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::pbmsg::Entity::Clear();
    }
    account_type_ = 0;
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::kEmptyString) {
        number_->clear();
      }
    }
    if (has_short_number()) {
      if (short_number_ != &::google::protobuf::internal::kEmptyString) {
        short_number_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    service_status_ = 0;
    priority_ = 0u;
    call_privilege_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    token_privilege_ = 0;
    gps_report_mode_ = 0;
    ttl_ = 0u;
    gps_ttl_ = 0u;
    status_ = 0;
    sip_status_ = 0;
    if (has_address()) {
      if (address_ != NULL) address_->::pbmsg::Address::Clear();
    }
    binding_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    subscribing_ = false;
    latitude_ = 0;
    longitude_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    participant_subscribing_ = false;
    message_subscribing_ = false;
    custom_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_type;
        break;
      }

      // optional .pbmsg.AccountType account_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::AccountType_IsValid(value)) {
            set_account_type(static_cast< ::pbmsg::AccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_number;
        break;
      }

      // optional bytes number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_short_number;
        break;
      }

      // optional bytes short_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_short_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_short_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_password;
        break;
      }

      // optional bytes password = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_service_status;
        break;
      }

      // optional .pbmsg.AccountServiceStatus service_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::AccountServiceStatus_IsValid(value)) {
            set_service_status(static_cast< ::pbmsg::AccountServiceStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_priority;
        break;
      }

      // optional fixed32 priority = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_call_privilege;
        break;
      }

      // optional .pbmsg.CallPrivilege call_privilege = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_privilege:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::CallPrivilege_IsValid(value)) {
            set_call_privilege(static_cast< ::pbmsg::CallPrivilege >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_token_privilege;
        break;
      }

      // optional .pbmsg.TokenPrivilege token_privilege = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_privilege:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::TokenPrivilege_IsValid(value)) {
            set_token_privilege(static_cast< ::pbmsg::TokenPrivilege >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gps_report_mode;
        break;
      }

      // optional .pbmsg.GpsReportMode gps_report_mode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gps_report_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::GpsReportMode_IsValid(value)) {
            set_gps_report_mode(static_cast< ::pbmsg::GpsReportMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_ttl;
        break;
      }

      // optional fixed32 ttl = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_gps_ttl;
        break;
      }

      // optional fixed32 gps_ttl = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gps_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &gps_ttl_)));
          set_has_gps_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_status;
        break;
      }

      // optional .pbmsg.RegisterStatus status = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::RegisterStatus_IsValid(value)) {
            set_status(static_cast< ::pbmsg::RegisterStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_sip_status;
        break;
      }

      // optional .pbmsg.RegisterStatus sip_status = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sip_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::RegisterStatus_IsValid(value)) {
            set_sip_status(static_cast< ::pbmsg::RegisterStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_address;
        break;
      }

      // optional .pbmsg.Address address = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_binding;
        break;
      }

      // optional bool binding = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_binding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binding_)));
          set_has_binding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_subscribing;
        break;
      }

      // optional bool subscribing = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subscribing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subscribing_)));
          set_has_subscribing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_latitude;
        break;
      }

      // optional double latitude = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_longitude;
        break;
      }

      // optional double longitude = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_timestamp;
        break;
      }

      // optional bytes timestamp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_participant_subscribing;
        break;
      }

      // optional bool participant_subscribing = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_participant_subscribing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &participant_subscribing_)));
          set_has_participant_subscribing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_message_subscribing;
        break;
      }

      // optional bool message_subscribing = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_subscribing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &message_subscribing_)));
          set_has_message_subscribing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_custom_status;
        break;
      }

      // optional .pbmsg.CustomStatus custom_status = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::CustomStatus_IsValid(value)) {
            set_custom_status(static_cast< ::pbmsg::CustomStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .pbmsg.AccountType account_type = 2;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->account_type(), output);
  }

  // optional bytes number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->number(), output);
  }

  // optional bytes short_number = 4;
  if (has_short_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->short_number(), output);
  }

  // optional bytes password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->password(), output);
  }

  // optional .pbmsg.AccountServiceStatus service_status = 6;
  if (has_service_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->service_status(), output);
  }

  // optional fixed32 priority = 7;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->priority(), output);
  }

  // optional .pbmsg.CallPrivilege call_privilege = 8;
  if (has_call_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->call_privilege(), output);
  }

  // optional .pbmsg.TokenPrivilege token_privilege = 9;
  if (has_token_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->token_privilege(), output);
  }

  // optional .pbmsg.GpsReportMode gps_report_mode = 10;
  if (has_gps_report_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->gps_report_mode(), output);
  }

  // optional fixed32 ttl = 11;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->ttl(), output);
  }

  // optional fixed32 gps_ttl = 12;
  if (has_gps_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->gps_ttl(), output);
  }

  // optional .pbmsg.RegisterStatus status = 13;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->status(), output);
  }

  // optional .pbmsg.RegisterStatus sip_status = 14;
  if (has_sip_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->sip_status(), output);
  }

  // optional .pbmsg.Address address = 15;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->address(), output);
  }

  // optional bool binding = 16;
  if (has_binding()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->binding(), output);
  }

  // optional bool subscribing = 17;
  if (has_subscribing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->subscribing(), output);
  }

  // optional double latitude = 18;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->latitude(), output);
  }

  // optional double longitude = 19;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->longitude(), output);
  }

  // optional bytes timestamp = 20;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->timestamp(), output);
  }

  // optional bool participant_subscribing = 21;
  if (has_participant_subscribing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->participant_subscribing(), output);
  }

  // optional bool message_subscribing = 22;
  if (has_message_subscribing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->message_subscribing(), output);
  }

  // optional .pbmsg.CustomStatus custom_status = 23;
  if (has_custom_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->custom_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Account::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .pbmsg.AccountType account_type = 2;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->account_type(), target);
  }

  // optional bytes number = 3;
  if (has_number()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->number(), target);
  }

  // optional bytes short_number = 4;
  if (has_short_number()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->short_number(), target);
  }

  // optional bytes password = 5;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->password(), target);
  }

  // optional .pbmsg.AccountServiceStatus service_status = 6;
  if (has_service_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->service_status(), target);
  }

  // optional fixed32 priority = 7;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->priority(), target);
  }

  // optional .pbmsg.CallPrivilege call_privilege = 8;
  if (has_call_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->call_privilege(), target);
  }

  // optional .pbmsg.TokenPrivilege token_privilege = 9;
  if (has_token_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->token_privilege(), target);
  }

  // optional .pbmsg.GpsReportMode gps_report_mode = 10;
  if (has_gps_report_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->gps_report_mode(), target);
  }

  // optional fixed32 ttl = 11;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->ttl(), target);
  }

  // optional fixed32 gps_ttl = 12;
  if (has_gps_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(12, this->gps_ttl(), target);
  }

  // optional .pbmsg.RegisterStatus status = 13;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->status(), target);
  }

  // optional .pbmsg.RegisterStatus sip_status = 14;
  if (has_sip_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->sip_status(), target);
  }

  // optional .pbmsg.Address address = 15;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->address(), target);
  }

  // optional bool binding = 16;
  if (has_binding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->binding(), target);
  }

  // optional bool subscribing = 17;
  if (has_subscribing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->subscribing(), target);
  }

  // optional double latitude = 18;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->latitude(), target);
  }

  // optional double longitude = 19;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->longitude(), target);
  }

  // optional bytes timestamp = 20;
  if (has_timestamp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->timestamp(), target);
  }

  // optional bool participant_subscribing = 21;
  if (has_participant_subscribing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->participant_subscribing(), target);
  }

  // optional bool message_subscribing = 22;
  if (has_message_subscribing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->message_subscribing(), target);
  }

  // optional .pbmsg.CustomStatus custom_status = 23;
  if (has_custom_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->custom_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Account::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .pbmsg.AccountType account_type = 2;
    if (has_account_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->account_type());
    }

    // optional bytes number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->number());
    }

    // optional bytes short_number = 4;
    if (has_short_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->short_number());
    }

    // optional bytes password = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional .pbmsg.AccountServiceStatus service_status = 6;
    if (has_service_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->service_status());
    }

    // optional fixed32 priority = 7;
    if (has_priority()) {
      total_size += 1 + 4;
    }

    // optional .pbmsg.CallPrivilege call_privilege = 8;
    if (has_call_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->call_privilege());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pbmsg.TokenPrivilege token_privilege = 9;
    if (has_token_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->token_privilege());
    }

    // optional .pbmsg.GpsReportMode gps_report_mode = 10;
    if (has_gps_report_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gps_report_mode());
    }

    // optional fixed32 ttl = 11;
    if (has_ttl()) {
      total_size += 1 + 4;
    }

    // optional fixed32 gps_ttl = 12;
    if (has_gps_ttl()) {
      total_size += 1 + 4;
    }

    // optional .pbmsg.RegisterStatus status = 13;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .pbmsg.RegisterStatus sip_status = 14;
    if (has_sip_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sip_status());
    }

    // optional .pbmsg.Address address = 15;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

    // optional bool binding = 16;
    if (has_binding()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool subscribing = 17;
    if (has_subscribing()) {
      total_size += 2 + 1;
    }

    // optional double latitude = 18;
    if (has_latitude()) {
      total_size += 2 + 8;
    }

    // optional double longitude = 19;
    if (has_longitude()) {
      total_size += 2 + 8;
    }

    // optional bytes timestamp = 20;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp());
    }

    // optional bool participant_subscribing = 21;
    if (has_participant_subscribing()) {
      total_size += 2 + 1;
    }

    // optional bool message_subscribing = 22;
    if (has_message_subscribing()) {
      total_size += 2 + 1;
    }

    // optional .pbmsg.CustomStatus custom_status = 23;
    if (has_custom_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->custom_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Account* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Account*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::pbmsg::Entity::MergeFrom(from.base());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_short_number()) {
      set_short_number(from.short_number());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_service_status()) {
      set_service_status(from.service_status());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_call_privilege()) {
      set_call_privilege(from.call_privilege());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_token_privilege()) {
      set_token_privilege(from.token_privilege());
    }
    if (from.has_gps_report_mode()) {
      set_gps_report_mode(from.gps_report_mode());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_gps_ttl()) {
      set_gps_ttl(from.gps_ttl());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_sip_status()) {
      set_sip_status(from.sip_status());
    }
    if (from.has_address()) {
      mutable_address()->::pbmsg::Address::MergeFrom(from.address());
    }
    if (from.has_binding()) {
      set_binding(from.binding());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_subscribing()) {
      set_subscribing(from.subscribing());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_participant_subscribing()) {
      set_participant_subscribing(from.participant_subscribing());
    }
    if (from.has_message_subscribing()) {
      set_message_subscribing(from.message_subscribing());
    }
    if (from.has_custom_status()) {
      set_custom_status(from.custom_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Account::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Account::Swap(Account* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(account_type_, other->account_type_);
    std::swap(number_, other->number_);
    std::swap(short_number_, other->short_number_);
    std::swap(password_, other->password_);
    std::swap(service_status_, other->service_status_);
    std::swap(priority_, other->priority_);
    std::swap(call_privilege_, other->call_privilege_);
    std::swap(token_privilege_, other->token_privilege_);
    std::swap(gps_report_mode_, other->gps_report_mode_);
    std::swap(ttl_, other->ttl_);
    std::swap(gps_ttl_, other->gps_ttl_);
    std::swap(status_, other->status_);
    std::swap(sip_status_, other->sip_status_);
    std::swap(address_, other->address_);
    std::swap(binding_, other->binding_);
    std::swap(subscribing_, other->subscribing_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(participant_subscribing_, other->participant_subscribing_);
    std::swap(message_subscribing_, other->message_subscribing_);
    std::swap(custom_status_, other->custom_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Account_descriptor_;
  metadata.reflection = Account_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int User::kBaseFieldNumber;
const int User::kPasswordFieldNumber;
const int User::kUserTypeFieldNumber;
const int User::kAccountFieldNumber;
const int User::kStatusFieldNumber;
const int User::kAddressFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void User::InitAsDefaultInstance() {
  base_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  account_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  address_ = const_cast< ::pbmsg::Address*>(&::pbmsg::Address::default_instance());
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void User::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_type_ = 0;
  account_ = NULL;
  status_ = 0;
  address_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  SharedDtor();
}

void User::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
    delete base_;
    delete account_;
    delete address_;
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AppData_2eproto();
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::pbmsg::Entity::Clear();
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    user_type_ = 0;
    if (has_account()) {
      if (account_ != NULL) account_->::pbmsg::Entity::Clear();
    }
    status_ = 0;
    if (has_address()) {
      if (address_ != NULL) address_->::pbmsg::Address::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional bytes password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_type;
        break;
      }

      // optional .pbmsg.UserType user_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::UserType_IsValid(value)) {
            set_user_type(static_cast< ::pbmsg::UserType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // optional .pbmsg.Entity account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional .pbmsg.RegisterStatus status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::RegisterStatus_IsValid(value)) {
            set_status(static_cast< ::pbmsg::RegisterStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_address;
        break;
      }

      // optional .pbmsg.Address address = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional bytes password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->password(), output);
  }

  // optional .pbmsg.UserType user_type = 3;
  if (has_user_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->user_type(), output);
  }

  // optional .pbmsg.Entity account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->account(), output);
  }

  // optional .pbmsg.RegisterStatus status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // optional .pbmsg.Address address = 6;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional bytes password = 2;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // optional .pbmsg.UserType user_type = 3;
  if (has_user_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->user_type(), target);
  }

  // optional .pbmsg.Entity account = 4;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->account(), target);
  }

  // optional .pbmsg.RegisterStatus status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // optional .pbmsg.Address address = 6;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional .pbmsg.UserType user_type = 3;
    if (has_user_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_type());
    }

    // optional .pbmsg.Entity account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

    // optional .pbmsg.RegisterStatus status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .pbmsg.Address address = 6;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::pbmsg::Entity::MergeFrom(from.base());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_user_type()) {
      set_user_type(from.user_type());
    }
    if (from.has_account()) {
      mutable_account()->::pbmsg::Entity::MergeFrom(from.account());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_address()) {
      mutable_address()->::pbmsg::Address::MergeFrom(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(password_, other->password_);
    std::swap(user_type_, other->user_type_);
    std::swap(account_, other->account_);
    std::swap(status_, other->status_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Organization::kBaseFieldNumber;
const int Organization::kIncludeMembersFieldNumber;
const int Organization::kMembersFieldNumber;
#endif  // !_MSC_VER

Organization::Organization()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Organization::InitAsDefaultInstance() {
  base_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

Organization::Organization(const Organization& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Organization::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  include_members_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Organization::~Organization() {
  SharedDtor();
}

void Organization::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void Organization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Organization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Organization_descriptor_;
}

const Organization& Organization::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AppData_2eproto();
  return *default_instance_;
}

Organization* Organization::default_instance_ = NULL;

Organization* Organization::New() const {
  return new Organization;
}

void Organization::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::pbmsg::Entity::Clear();
    }
    include_members_ = false;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Organization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_include_members;
        break;
      }

      // optional bool include_members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_include_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_members_)));
          set_has_include_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        break;
      }

      // repeated .pbmsg.Entity members = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Organization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional bool include_members = 2;
  if (has_include_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->include_members(), output);
  }

  // repeated .pbmsg.Entity members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Organization::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional bool include_members = 2;
  if (has_include_members()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->include_members(), target);
  }

  // repeated .pbmsg.Entity members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Organization::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional bool include_members = 2;
    if (has_include_members()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pbmsg.Entity members = 3;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Organization::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Organization* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Organization*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Organization::MergeFrom(const Organization& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::pbmsg::Entity::MergeFrom(from.base());
    }
    if (from.has_include_members()) {
      set_include_members(from.include_members());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Organization::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Organization::CopyFrom(const Organization& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Organization::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Organization::Swap(Organization* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(include_members_, other->include_members_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Organization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Organization_descriptor_;
  metadata.reflection = Organization_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Participant::kIdFieldNumber;
const int Participant::kGroupFieldNumber;
const int Participant::kAccountFieldNumber;
const int Participant::kPriorityFieldNumber;
const int Participant::kCallPrivilegeFieldNumber;
const int Participant::kTokenPrivilegeFieldNumber;
const int Participant::kJoinTimestampFieldNumber;
const int Participant::kStatusFieldNumber;
const int Participant::kParticipantSubscribingFieldNumber;
const int Participant::kMessageSubscribingFieldNumber;
#endif  // !_MSC_VER

Participant::Participant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Participant::InitAsDefaultInstance() {
  group_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  account_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

Participant::Participant(const Participant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Participant::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  group_ = NULL;
  account_ = NULL;
  priority_ = 0u;
  call_privilege_ = 0;
  token_privilege_ = 0;
  join_timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  participant_subscribing_ = false;
  message_subscribing_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Participant::~Participant() {
  SharedDtor();
}

void Participant::SharedDtor() {
  if (join_timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete join_timestamp_;
  }
  if (this != default_instance_) {
    delete group_;
    delete account_;
  }
}

void Participant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Participant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Participant_descriptor_;
}

const Participant& Participant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AppData_2eproto();
  return *default_instance_;
}

Participant* Participant::default_instance_ = NULL;

Participant* Participant::New() const {
  return new Participant;
}

void Participant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_group()) {
      if (group_ != NULL) group_->::pbmsg::Entity::Clear();
    }
    if (has_account()) {
      if (account_ != NULL) account_->::pbmsg::Entity::Clear();
    }
    priority_ = 0u;
    call_privilege_ = 0;
    token_privilege_ = 0;
    if (has_join_timestamp()) {
      if (join_timestamp_ != &::google::protobuf::internal::kEmptyString) {
        join_timestamp_->clear();
      }
    }
    status_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    participant_subscribing_ = false;
    message_subscribing_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Participant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group;
        break;
      }

      // optional .pbmsg.Entity group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional .pbmsg.Entity account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_priority;
        break;
      }

      // optional fixed32 priority = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_call_privilege;
        break;
      }

      // optional .pbmsg.CallPrivilege call_privilege = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_privilege:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::CallPrivilege_IsValid(value)) {
            set_call_privilege(static_cast< ::pbmsg::CallPrivilege >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_token_privilege;
        break;
      }

      // optional .pbmsg.TokenPrivilege token_privilege = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_privilege:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::TokenPrivilege_IsValid(value)) {
            set_token_privilege(static_cast< ::pbmsg::TokenPrivilege >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_join_timestamp;
        break;
      }

      // optional bytes join_timestamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_join_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_join_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional .pbmsg.SessionStatus status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::SessionStatus_IsValid(value)) {
            set_status(static_cast< ::pbmsg::SessionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_participant_subscribing;
        break;
      }

      // optional bool participant_subscribing = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_participant_subscribing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &participant_subscribing_)));
          set_has_participant_subscribing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_message_subscribing;
        break;
      }

      // optional bool message_subscribing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_subscribing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &message_subscribing_)));
          set_has_message_subscribing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Participant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // optional .pbmsg.Entity group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group(), output);
  }

  // optional .pbmsg.Entity account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->account(), output);
  }

  // optional fixed32 priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->priority(), output);
  }

  // optional .pbmsg.CallPrivilege call_privilege = 5;
  if (has_call_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->call_privilege(), output);
  }

  // optional .pbmsg.TokenPrivilege token_privilege = 6;
  if (has_token_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->token_privilege(), output);
  }

  // optional bytes join_timestamp = 7;
  if (has_join_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->join_timestamp(), output);
  }

  // optional .pbmsg.SessionStatus status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->status(), output);
  }

  // optional bool participant_subscribing = 9;
  if (has_participant_subscribing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->participant_subscribing(), output);
  }

  // optional bool message_subscribing = 10;
  if (has_message_subscribing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->message_subscribing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Participant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // optional .pbmsg.Entity group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group(), target);
  }

  // optional .pbmsg.Entity account = 3;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->account(), target);
  }

  // optional fixed32 priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->priority(), target);
  }

  // optional .pbmsg.CallPrivilege call_privilege = 5;
  if (has_call_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->call_privilege(), target);
  }

  // optional .pbmsg.TokenPrivilege token_privilege = 6;
  if (has_token_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->token_privilege(), target);
  }

  // optional bytes join_timestamp = 7;
  if (has_join_timestamp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->join_timestamp(), target);
  }

  // optional .pbmsg.SessionStatus status = 8;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->status(), target);
  }

  // optional bool participant_subscribing = 9;
  if (has_participant_subscribing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->participant_subscribing(), target);
  }

  // optional bool message_subscribing = 10;
  if (has_message_subscribing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->message_subscribing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Participant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // optional .pbmsg.Entity group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
    }

    // optional .pbmsg.Entity account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

    // optional fixed32 priority = 4;
    if (has_priority()) {
      total_size += 1 + 4;
    }

    // optional .pbmsg.CallPrivilege call_privilege = 5;
    if (has_call_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->call_privilege());
    }

    // optional .pbmsg.TokenPrivilege token_privilege = 6;
    if (has_token_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->token_privilege());
    }

    // optional bytes join_timestamp = 7;
    if (has_join_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->join_timestamp());
    }

    // optional .pbmsg.SessionStatus status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool participant_subscribing = 9;
    if (has_participant_subscribing()) {
      total_size += 1 + 1;
    }

    // optional bool message_subscribing = 10;
    if (has_message_subscribing()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Participant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Participant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Participant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Participant::MergeFrom(const Participant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_group()) {
      mutable_group()->::pbmsg::Entity::MergeFrom(from.group());
    }
    if (from.has_account()) {
      mutable_account()->::pbmsg::Entity::MergeFrom(from.account());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_call_privilege()) {
      set_call_privilege(from.call_privilege());
    }
    if (from.has_token_privilege()) {
      set_token_privilege(from.token_privilege());
    }
    if (from.has_join_timestamp()) {
      set_join_timestamp(from.join_timestamp());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_participant_subscribing()) {
      set_participant_subscribing(from.participant_subscribing());
    }
    if (from.has_message_subscribing()) {
      set_message_subscribing(from.message_subscribing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Participant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Participant::CopyFrom(const Participant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Participant::IsInitialized() const {

  return true;
}

void Participant::Swap(Participant* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(group_, other->group_);
    std::swap(account_, other->account_);
    std::swap(priority_, other->priority_);
    std::swap(call_privilege_, other->call_privilege_);
    std::swap(token_privilege_, other->token_privilege_);
    std::swap(join_timestamp_, other->join_timestamp_);
    std::swap(status_, other->status_);
    std::swap(participant_subscribing_, other->participant_subscribing_);
    std::swap(message_subscribing_, other->message_subscribing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Participant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Participant_descriptor_;
  metadata.reflection = Participant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Group::kBaseFieldNumber;
const int Group::kOwnerFieldNumber;
const int Group::kNumberFieldNumber;
const int Group::kShortNumberFieldNumber;
const int Group::kSealedFieldNumber;
const int Group::kIncludeParticipantsFieldNumber;
const int Group::kParticipantsFieldNumber;
const int Group::kTemporaryFieldNumber;
#endif  // !_MSC_VER

Group::Group()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Group::InitAsDefaultInstance() {
  base_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  owner_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

Group::Group(const Group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Group::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  owner_ = NULL;
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  short_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sealed_ = false;
  include_participants_ = false;
  temporary_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Group::~Group() {
  SharedDtor();
}

void Group::SharedDtor() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (short_number_ != &::google::protobuf::internal::kEmptyString) {
    delete short_number_;
  }
  if (this != default_instance_) {
    delete base_;
    delete owner_;
  }
}

void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Group_descriptor_;
}

const Group& Group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AppData_2eproto();
  return *default_instance_;
}

Group* Group::default_instance_ = NULL;

Group* Group::New() const {
  return new Group;
}

void Group::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::pbmsg::Entity::Clear();
    }
    if (has_owner()) {
      if (owner_ != NULL) owner_->::pbmsg::Entity::Clear();
    }
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::kEmptyString) {
        number_->clear();
      }
    }
    if (has_short_number()) {
      if (short_number_ != &::google::protobuf::internal::kEmptyString) {
        short_number_->clear();
      }
    }
    sealed_ = false;
    include_participants_ = false;
    temporary_ = false;
  }
  participants_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_owner;
        break;
      }

      // optional .pbmsg.Entity owner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_number;
        break;
      }

      // optional bytes number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_short_number;
        break;
      }

      // optional bytes short_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_short_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_short_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sealed;
        break;
      }

      // optional bool sealed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sealed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sealed_)));
          set_has_sealed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_include_participants;
        break;
      }

      // optional bool include_participants = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_include_participants:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_participants_)));
          set_has_include_participants();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_participants;
        break;
      }

      // repeated .pbmsg.Participant participants = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_participants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_participants()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_participants;
        if (input->ExpectTag(64)) goto parse_temporary;
        break;
      }

      // optional bool temporary = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_temporary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &temporary_)));
          set_has_temporary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .pbmsg.Entity owner = 2;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->owner(), output);
  }

  // optional bytes number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->number(), output);
  }

  // optional bytes short_number = 4;
  if (has_short_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->short_number(), output);
  }

  // optional bool sealed = 5;
  if (has_sealed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->sealed(), output);
  }

  // optional bool include_participants = 6;
  if (has_include_participants()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->include_participants(), output);
  }

  // repeated .pbmsg.Participant participants = 7;
  for (int i = 0; i < this->participants_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->participants(i), output);
  }

  // optional bool temporary = 8;
  if (has_temporary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->temporary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .pbmsg.Entity owner = 2;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->owner(), target);
  }

  // optional bytes number = 3;
  if (has_number()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->number(), target);
  }

  // optional bytes short_number = 4;
  if (has_short_number()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->short_number(), target);
  }

  // optional bool sealed = 5;
  if (has_sealed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->sealed(), target);
  }

  // optional bool include_participants = 6;
  if (has_include_participants()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->include_participants(), target);
  }

  // repeated .pbmsg.Participant participants = 7;
  for (int i = 0; i < this->participants_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->participants(i), target);
  }

  // optional bool temporary = 8;
  if (has_temporary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->temporary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Group::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .pbmsg.Entity owner = 2;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner());
    }

    // optional bytes number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->number());
    }

    // optional bytes short_number = 4;
    if (has_short_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->short_number());
    }

    // optional bool sealed = 5;
    if (has_sealed()) {
      total_size += 1 + 1;
    }

    // optional bool include_participants = 6;
    if (has_include_participants()) {
      total_size += 1 + 1;
    }

    // optional bool temporary = 8;
    if (has_temporary()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pbmsg.Participant participants = 7;
  total_size += 1 * this->participants_size();
  for (int i = 0; i < this->participants_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->participants(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
  GOOGLE_CHECK_NE(&from, this);
  participants_.MergeFrom(from.participants_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::pbmsg::Entity::MergeFrom(from.base());
    }
    if (from.has_owner()) {
      mutable_owner()->::pbmsg::Entity::MergeFrom(from.owner());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_short_number()) {
      set_short_number(from.short_number());
    }
    if (from.has_sealed()) {
      set_sealed(from.sealed());
    }
    if (from.has_include_participants()) {
      set_include_participants(from.include_participants());
    }
    if (from.has_temporary()) {
      set_temporary(from.temporary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Group::Swap(Group* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(owner_, other->owner_);
    std::swap(number_, other->number_);
    std::swap(short_number_, other->short_number_);
    std::swap(sealed_, other->sealed_);
    std::swap(include_participants_, other->include_participants_);
    participants_.Swap(&other->participants_);
    std::swap(temporary_, other->temporary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Group_descriptor_;
  metadata.reflection = Group_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Alert::kBaseFieldNumber;
const int Alert::kGroupFieldNumber;
const int Alert::kDescribeFieldNumber;
const int Alert::kLevelFieldNumber;
const int Alert::kAlramTimeFieldNumber;
const int Alert::kUseCarsFieldNumber;
const int Alert::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

Alert::Alert()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Alert::InitAsDefaultInstance() {
  base_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  group_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
}

Alert::Alert(const Alert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Alert::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  group_ = NULL;
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  alram_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  use_cars_ = 0u;
  create_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Alert::~Alert() {
  SharedDtor();
}

void Alert::SharedDtor() {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (alram_time_ != &::google::protobuf::internal::kEmptyString) {
    delete alram_time_;
  }
  if (create_time_ != &::google::protobuf::internal::kEmptyString) {
    delete create_time_;
  }
  if (this != default_instance_) {
    delete base_;
    delete group_;
  }
}

void Alert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Alert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alert_descriptor_;
}

const Alert& Alert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AppData_2eproto();
  return *default_instance_;
}

Alert* Alert::default_instance_ = NULL;

Alert* Alert::New() const {
  return new Alert;
}

void Alert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::pbmsg::Entity::Clear();
    }
    if (has_group()) {
      if (group_ != NULL) group_->::pbmsg::Entity::Clear();
    }
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::kEmptyString) {
        describe_->clear();
      }
    }
    level_ = 0;
    if (has_alram_time()) {
      if (alram_time_ != &::google::protobuf::internal::kEmptyString) {
        alram_time_->clear();
      }
    }
    use_cars_ = 0u;
    if (has_create_time()) {
      if (create_time_ != &::google::protobuf::internal::kEmptyString) {
        create_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Alert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group;
        break;
      }

      // optional .pbmsg.Entity group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_describe;
        break;
      }

      // optional bytes describe = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_describe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional .pbmsg.AlertLevel level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::AlertLevel_IsValid(value)) {
            set_level(static_cast< ::pbmsg::AlertLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_alram_time;
        break;
      }

      // optional bytes alram_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alram_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_alram_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_use_cars;
        break;
      }

      // optional fixed32 use_cars = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_use_cars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &use_cars_)));
          set_has_use_cars();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_create_time;
        break;
      }

      // optional bytes create_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_create_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Alert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .pbmsg.Entity group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group(), output);
  }

  // optional bytes describe = 3;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->describe(), output);
  }

  // optional .pbmsg.AlertLevel level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->level(), output);
  }

  // optional bytes alram_time = 5;
  if (has_alram_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->alram_time(), output);
  }

  // optional fixed32 use_cars = 6;
  if (has_use_cars()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->use_cars(), output);
  }

  // optional bytes create_time = 7;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Alert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .pbmsg.Entity group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group(), target);
  }

  // optional bytes describe = 3;
  if (has_describe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->describe(), target);
  }

  // optional .pbmsg.AlertLevel level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->level(), target);
  }

  // optional bytes alram_time = 5;
  if (has_alram_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->alram_time(), target);
  }

  // optional fixed32 use_cars = 6;
  if (has_use_cars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->use_cars(), target);
  }

  // optional bytes create_time = 7;
  if (has_create_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Alert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .pbmsg.Entity group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
    }

    // optional bytes describe = 3;
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->describe());
    }

    // optional .pbmsg.AlertLevel level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
    }

    // optional bytes alram_time = 5;
    if (has_alram_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->alram_time());
    }

    // optional fixed32 use_cars = 6;
    if (has_use_cars()) {
      total_size += 1 + 4;
    }

    // optional bytes create_time = 7;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->create_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Alert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Alert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Alert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Alert::MergeFrom(const Alert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::pbmsg::Entity::MergeFrom(from.base());
    }
    if (from.has_group()) {
      mutable_group()->::pbmsg::Entity::MergeFrom(from.group());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_alram_time()) {
      set_alram_time(from.alram_time());
    }
    if (from.has_use_cars()) {
      set_use_cars(from.use_cars());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Alert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alert::CopyFrom(const Alert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Alert::Swap(Alert* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(group_, other->group_);
    std::swap(describe_, other->describe_);
    std::swap(level_, other->level_);
    std::swap(alram_time_, other->alram_time_);
    std::swap(use_cars_, other->use_cars_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Alert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Alert_descriptor_;
  metadata.reflection = Alert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gateway::kBaseFieldNumber;
const int Gateway::kAddressFieldNumber;
const int Gateway::kStatusFieldNumber;
#endif  // !_MSC_VER

Gateway::Gateway()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Gateway::InitAsDefaultInstance() {
  base_ = const_cast< ::pbmsg::Entity*>(&::pbmsg::Entity::default_instance());
  address_ = const_cast< ::pbmsg::Address*>(&::pbmsg::Address::default_instance());
}

Gateway::Gateway(const Gateway& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Gateway::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  address_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gateway::~Gateway() {
  SharedDtor();
}

void Gateway::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete address_;
  }
}

void Gateway::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gateway::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gateway_descriptor_;
}

const Gateway& Gateway::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AppData_2eproto();
  return *default_instance_;
}

Gateway* Gateway::default_instance_ = NULL;

Gateway* Gateway::New() const {
  return new Gateway;
}

void Gateway::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::pbmsg::Entity::Clear();
    }
    if (has_address()) {
      if (address_ != NULL) address_->::pbmsg::Address::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gateway::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbmsg.Entity base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional .pbmsg.Address address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .pbmsg.RegisterStatus status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbmsg::RegisterStatus_IsValid(value)) {
            set_status(static_cast< ::pbmsg::RegisterStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Gateway::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbmsg.Entity base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .pbmsg.Address address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->address(), output);
  }

  // optional .pbmsg.RegisterStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Gateway::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbmsg.Entity base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .pbmsg.Address address = 2;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->address(), target);
  }

  // optional .pbmsg.RegisterStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Gateway::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbmsg.Entity base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .pbmsg.Address address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

    // optional .pbmsg.RegisterStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gateway::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gateway* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gateway*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gateway::MergeFrom(const Gateway& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::pbmsg::Entity::MergeFrom(from.base());
    }
    if (from.has_address()) {
      mutable_address()->::pbmsg::Address::MergeFrom(from.address());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gateway::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gateway::CopyFrom(const Gateway& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gateway::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Gateway::Swap(Gateway* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(address_, other->address_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gateway::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gateway_descriptor_;
  metadata.reflection = Gateway_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbmsg

// @@protoc_insertion_point(global_scope)
