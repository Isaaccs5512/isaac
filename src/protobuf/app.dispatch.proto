
package app.dispatch;

import "AppData.proto";
import "EntityData.proto";
import "MediaMessage.proto";
import "HistoryAlert.proto";
/*
消息类型
XXX_Request为请求消息   如果某个消息有消息体，那么会有一个对应的message XXXRequest消息定义
XXX_Response为应答消息  如果某个消息有消息体，那么会有一个对应的message XXXResponse消息定义
XXX_Notification 为指示消息 消息体为对应的的message XXXNotification消息定义
*/
enum MSG
{
    Login_Request                       =   200001;//登录请求   客户端-->服务器
    Login_Response                      =   200002;//登录应答   服务器-->客户端

    Logout_Request                      =   200003;//注销请求   客户端-->服务器
    Logout_Response                     =   200004;//注销应答   服务器-->客户端


    Keepalive_Request                   =   200005;//保活请求  客户端-->服务器 在ttl超时之间必须发送保活请求到服务器
    Keepalive_Response                  =   200006;//包含应答  服务器-->客户端

    Entity_Request                      =   200007;//实体请求  客户端-->服务器 
    Entity_Response                     =   200008;//实体应答  服务器-->客户端

    Append_Group_Request                =   200009;//新增群组请求 客户端-->服务器
    Append_Group_Response               =   200010;//新增群组应答  服务器-->客户端

    Modify_Group_Request                =   200011;//修改群组请求 客户端-->服务器  值修改群星配置、不包含成员
    Modify_Group_Response               =   200012;//修改群组应答 服务器-->客户端

    Modify_Participants_Request         =   200013;//修改群组成员请求 客户端-->服务器  
    Modify_Participants_Response        =   200014;//修改群组成员应答 服务器-->客户端

    Media_Message_Request               =   200015;//群组消息刷新请求 客户端-->服务器
    Media_Message_Response              =   200016;//群星消息刷新应答 服务器-->客户端

    Invite_Participant_Request          =   200017;//群组成员操作--邀请成员呼入群组请求  客户端-->服务器 
    Invite_Participant_Response         =   200018;//              要求成员呼入群组应答   服务器-->客户端

    Drop_Participant_Request            =   200019;//群组成员操作--释放成员呼叫请求      客户端-->服务器
    Drop_Participant_Response           =   200020;//              释放成员呼叫应答      服务器-->客户端

    Release_Participant_Token_Request   =   200021;//群组成员操作--释放成员话权请求     客户端-->服务器
    Release_Participant_Token_Response  =   200022;//			   释放成员话权应答     服务器-->客户端

    Appoint_Participant_Speak_Request   =   200023;//群组成员操作--请求成员申请话权请求     客户端-->服务器
    Appoint_Participant_Speak_Response  =   200024;//              请求成员申请话权应答     服务器-->客户端

    Jion_Group_Request                  =   200025;//调度员加入群组请求  客户端-->服务器  同等于 Modify_Participants_Request增加一个成员，该成员为调度员绑定的PoC账号
    Jion_Group_Response                 =   200026;//调度员加入群组应答  服务器-->客户端

    Leave_Group_Request                 =   200027;//调度员离开群组请求 客户端-->服务器  同等于 Modify_Participants_Request删除一个成员、该成员为调度员绑定的PoC账号
    Leave_Group_Response                =   200028;//调度员离开群组应答  服务器-->客户端

    Send_Message_Request                =   200029;//发送群组消息请求  客户端-->服务器 
    Send_Message_Response               =   200030;//发送群组消息应答  服务器-->客户端

    Kick_Participant_Request            =   200031;//踢出成员请求  客户端-->服务器 同等于Modify_Participants_Request 删除成员
    Kick_Participant_Response           =   200032;//踢出成员应答  服务器-->客户端

    Start_Record_Request                =   200033;//群组开始录音请求 客户端-->服务器  成员中需要有录音账号
    Start_Record_Response               =   200034;//群组开始录音应答  服务器-->客户端

    Stop_Record_Request                 =   200035;//群组停止录音请求 客户端-->服务器 
    Stop_Record_Response                =   200036;//群组停止录音应答 服务器-->客户端

    Subscribe_Account_Location_Request  =   200037;//订阅终端账号的GPS信息请求 客户端-->服务器 
    Subscribe_Account_Location_Response =   200038;//订阅终端账号的GPS信息应答 服务器-->客户端

    Append_Alert_Request                =   200039;//新增警情请求 客户端-->服务器 
    Append_Alert_Response               =   200040;//新增警情应答 服务器-->客户端

    Modify_Alert_Request                =   200041;//修改警情请求 客户端-->服务器 
    Modify_Alert_Response               =   200042;//修改警情应答 服务器-->客户端

    Stop_Alert_Request                  =   200043;//停止警情请求 客户端-->服务器 
    Stop_Alert_Response                 =   200044;//停止警情应答 服务器-->客户端

    History_Alerts_Request              =   200045;//历史警情查询请求 客户端-->服务器 
    History_Alerts_Response             =   200046;//历史警情查询应答 服务器-->客户端

    History_Alert_Request               =   200047;//历史警情详细信息请求 客户端-->服务器 
    History_Alert_Response              =   200048;//历史警情详细信息应答  服务器-->客户端

    History_Alert_Message_Request       =   200049;//历史警情消息查询请求  客户端-->服务器 
    History_Alert_Message_Response      =   200050;//历史警情消息查询应答  服务器-->客户端

    Delete_History_Alert_Request        =   200051;//删除历史警情请求  客户端-->服务器 
    Delete_History_Alert_Response       =   200052;//删除历史警情应答  服务器-->客户端

    Delete_Group_Request				= 	200053;//删除群组请求   客户端-->服务器  需所有成员的状态都为IDLE时才可以删除
    Delete_Group_Response				=   200054;//删除群组应答  服务器-->客户端

    Entity_Notification                         =   210001;// 实体通知、一般新增、删除、修改实体时会触发该通知
    Entity_Status_Notification                  =   210002;// 实体状态通知、主要用于ACCOUNT等需要注册到服务器的实体的状态通知
    Participants_Notification                   =   210003;// 群组成员变更通知,主要为新增、删除
    Join_Group_Request_Notification              =   210004;//终端PoC ACCOUNT 加入指定群组请求的通知
    Participant_Status_Notification             =   210005;//群组成员状态通知、呼叫状态、话权状态通知
    Media_Message_Notification                  =   210006;//群组消息通知、其他调度员或者终端发送群组消息时 会产生此通知
    Participant_Connect_Request_Notification    =   210007;//群组成员呼叫建立请求通知
    Participant_Speak_Request_Notification      =   210008;//群组成员话权申请请求通知
    Session_Status_Notification                 =   210009;//会话状态通知、该消息废弃，被Participant_Status_Notification替代
    Record_Status_Notification                  =   210010;//录音状态通知、
    Account_Location_Notification               =   210011;//GPS位置更新通知
    Alert_Overed_Notification                   =   210012;//警情结束通知
    Move_Unit_Notification 						=   210013;//单元移动通知

}
/*
	用户登录
	c++ eg:
	using namespace app::dispatch;

	Message msg;
	msg.set_msg_type(Login_Request);
	msg.set_sequence(1); // 客户端自动生成 用于与Response消息进行匹配
	//login.set_session_id(); 登录消息不需要设置session_id
	auto request = login->mutable_request();//参考 Message消息的定义
	auto login   = request->mutable_login();//参考Request消息的定义
	login->set_username("admin");
	login->set_password(md5_str("admin"));

	//初始化完成，可以进行打包等相关操作.
*/
message LoginRequest
{
    required    bytes   username        =   1;//用户名 匹配 User.name
    required    string  password        =   2;// 密码，MD5 字符串格式
}

/*
	void on_reponse( const Message & rsp_msg ){
		assert( rsp_msg.has_response() );//必须包含

		auto response = rsp_msg.response();
		if( response.result() ){
			auto login = response.login();

			//处理具体 的业务逻辑...
		}else{
			std::cout<<"error:"<<response.error_describe();
		}
	}
*/
message LoginResponse
{
    required    fixed32     session_id      =   1;//会话id、服务器分配的、后续客户端发往服务器的消息都需要携带该值
    required    pbmsg.User  self            =   2;//用户的自身配置信息, self.base.parent为所在的单元id、从该单元id开始获取数据
    required    fixed32     ttl             =   3;//保活间隔、ttl超时之前需要发送Keepalive_Request消息到服务器
    optional    string      poc_register    =   4;//poc账号注册服务器,
    optional    string      poc_outbound    =   5;//poc账号的呼叫服务器，如果不存在则使用poc_register值
}
//实体详细内容请求
message EntityRequest
{
    required    pbmsg.Entity    id  =   1; //被请求的实体id、id.id值必须包含、其他的可以不包含、包含其他字段方便调试打印
}
//实体详细内容应答
message EntityResponse
{
    required    pbmsg.EntityData    data    =   1;//具体的内容，如果是unit，可以根据data.unit.members的成员进行递归的请求下级的内容
}
//实体通知
message EntityNotification
{
    required    pbmsg.EntityNotifyType   notify_type =   1;
    required    pbmsg.EntityData        data        =   2;//如果notify_type为deleted时，只需要包含data.id值
}
/*
	Only for Account .
	实体状态通知、目前只用于Account
*/
message EntityStatusNotification
{
    required    pbmsg.Entity            id          =   1; //账号id  id.id必须包含
    optional    pbmsg.RegisterStatus    status      =   2; //注册服务器的状态
    optional    pbmsg.RegisterStatus    sip_status  =   3; //注册SIP Register的状态
    optional    pbmsg.CustomStatus      custom_status = 4; //自定义状态
}

message AppendGroupRequest
{
    required    pbmsg.Group             group       =   1; //新增群组时 group.base.id设置为0、或者不设置
}
message AppendGroupResponse
{
    required    pbmsg.Group             group       =   1;//应答时，group.base.id为服务器分配的唯一id
}

message ModifyGroupRequest
{
    required    pbmsg.Group             group       =   1;
}
message ModifyGroupResponse
{
    required    pbmsg.Group             group       =   1;
}

message ModifyParticipantsRequest
{
	required    pbmsg.Entity			group_id		=   1;//群组id 
    required    pbmsg.ListModifyType    modify_type     =   2;//修改类型、增加成员、删除成员或者覆盖成员
    repeated    pbmsg.Participant       particiapnts    =   3;//成员列表，与modify_type配合；尽量使用增加和删除
}

message ModifyParticipantsResponse
{
	required    pbmsg.Entity			group_id		=   1;
    required    pbmsg.ListModifyType    modify_type     =   2;
    repeated    pbmsg.Participant       particiapnts    =   3;
}

message ParticipantsNotification
{
	required    pbmsg.Entity			group_id		=   1;//群组id
    required    pbmsg.ListModifyType    modify_type     =   2;//修改类型
    repeated    pbmsg.Participant       particiapnts    =   3;//影响的成员类别
}

message JoinGroupRequestNotification
{
    required    pbmsg.Entity            group_id        =   1;
    required    pbmsg.Entity            account_id      =   2;
}
message ParticipantStatusNotification
{
    required    pbmsg.Entity            group_id        =   1;
    required    pbmsg.Entity            account_id      =   2;
    required    pbmsg.SessionStatus     status          =   3;
}

message MediaMessageRequest
{
    required    pbmsg.Entity            id                  =   1;
    optional    fixed32                 from_message_id     =   2;
    optional    string                  from_timestamp      =   3;
    required    fixed32                 max_message_count   =   4;
}

message MediaMessageResponse
{
    required    pbmsg.Entity            id                  =   1;
    repeated    pbmsg.MediaMessage      messages            =   2;
    required    fixed32                 leave_message_count = 3;

}

message MediaMessageNotification
{
    required    pbmsg.Entity            id                  =   1;
    required    pbmsg.MediaMessage      msg                 =   2;
}

message ParticipantConnectRequestNotification
{
    required    pbmsg.Entity            group_id            =   1;
    required    pbmsg.Entity            account_id          =   2;
}

message ParticipantSpeakRequestNotification
{
    required    pbmsg.Entity            group_id            =   1;
    required    pbmsg.Entity            account_id          =   2;
}

message InviteParticipantRequest
{
    required    pbmsg.Entity            group_id            =   1;
    optional    pbmsg.Entity            account_id          =   2;
}

message DropParticipantRequest
{
    required    pbmsg.Entity            group_id            =   1;
    optional    pbmsg.Entity            account_id          =   2;

}

message ReleaseParticipantTokenRequest
{
    required    pbmsg.Entity            group_id            =   1;
    required    pbmsg.Entity            account_id          =   2;

}

message AppointParticipantSpeakRequest
{
    required    pbmsg.Entity            group_id            =   1;
    required    pbmsg.Entity            account_id          =   2;

}

message JionGroupRequest
{
    required    pbmsg.Entity            group_id            =   1;
}

message LeaveGroupRequest
{
    required    pbmsg.Entity            group_id            =   1;
}

message SessionStatusNotification
{
    required    pbmsg.Entity            group_id            =   1;
    required    pbmsg.SessionStatus     status              =   2;

}

message SendMessageRequest
{
    required    pbmsg.Entity            id                  =   1;
    required    pbmsg.MediaMessage      msg                 =   2;
}


message KickParticipantRequest
{
    required    pbmsg.Entity            group_id            =   1;
    optional    pbmsg.Entity            account_id          =   2;

}

message StartRecordRequest
{
    required    pbmsg.Entity            group_id            =   1;
}

message StopRecordRequest
{
    required    pbmsg.Entity            group_id            =   1;
}
message RecordStatusNotification
{
    required    pbmsg.Entity            group_id            =   1;
    required    bool                    recording           =   2;

}

message SubscribeAccountLocationRequest
{
    required    bool                    subscribing         =   1;
    required    pbmsg.Entity            account_id          =   2;
    required    fixed32                 ttl                 =   3;
}

message AccountLocationNotification
{
    required    pbmsg.Entity            account_id          =   1;
    required    double                  longitude           =   2;
    required    double                  latitude            =   3;
    required    string                  timestamp           =   4;
}

message AppendAlertRequest
{
    required    pbmsg.Alert             alert               =   1;
    repeated    pbmsg.Entity            members             =   2;
}

message AppendAlertResponse
{
    required    pbmsg.Alert             alert               =   1;
}

message ModifyAlertRequest
{
    required    pbmsg.Alert             alert               =   1;

}

message StopAlertRequest
{
    required    pbmsg.Entity            alert_id            =   1;
}

message AlertOveredNotification
{
    required    pbmsg.Entity            alert_id            =   1;
}

message HistoryAlertsRequest
{
    optional    bytes           name                    = 1;

    optional    string          create_time_from        = 2;
    optional    string          create_time_to          = 3;

    optional    string          alram_time_from         = 4;
    optional    string          alram_time_to           = 5;

    optional    string          over_time_from          = 6;
    optional    string          over_time_to            = 7;

}

message HistoryAlertsResponse
{
    repeated  pbmsg.HistoryAlert       history_alerts          = 1;
}

message HistoryAlertRequest
{
    required    fixed32                 history_alert_id        =   1;
}

message HistoryAlertResponse
{
    required    pbmsg.HistoryAlert      history_alert       = 1;
}

message HistoryAlertMessageRequest
{
    required    fixed32         history_alert_id        = 1;
    optional    fixed32         from_message_id         = 2;
    optional    string          from_time               = 3;
    required    fixed32         max_message_count       = 4;
}

message HistoryAlertMessageResponse
{
    required    fixed32                 history_alert_id        = 1;
    repeated    pbmsg.MediaMessage      messages                = 2;
    required    fixed32                 leave_message_count     = 3;
}

message DeleteHistoryAlertRequest
{
    required    fixed32         history_alert_id        = 1;
}


message DeleteGroupRequest
{
	required	pbmsg.Entity	group_id				= 1;
}

message MoveUnitNotification
{
	required pbmsg.Entity		id						= 1;
}
message Request
{
    optional    LoginRequest                      login                      =   1;
    optional    EntityRequest                     entity                     =   2;
    optional    AppendGroupRequest                append_group               =   3;
    optional    ModifyGroupRequest                modify_group               =   4;
    optional    ModifyParticipantsRequest         modify_participants        =   5;
    optional    MediaMessageRequest               group_message              =   6;
    optional    InviteParticipantRequest          invite_participant         =   7;
    optional    DropParticipantRequest            drop_participant           =   8;
    optional    ReleaseParticipantTokenRequest    release_participant_token  =   9;
    optional    AppointParticipantSpeakRequest    appoint_participant_speak  =   10;
    optional    JionGroupRequest                  jion_group                 =   11;
    optional    LeaveGroupRequest                 leave_group                =   12;
    optional    SendMessageRequest                send_message               =   13;
    optional    KickParticipantRequest            kick_participant           =   14;
    optional    StartRecordRequest                start_record               =   15;
    optional    StopRecordRequest                 stop_record                =   16;
    optional    SubscribeAccountLocationRequest   subscribe_account_location =   17;
    optional    AppendAlertRequest                append_alert               =   18;
    optional    ModifyAlertRequest                modify_alert               =   19;
    optional    StopAlertRequest                  stop_alert                 =   20;
    optional    HistoryAlertsRequest              history_alerts             =   21;
    optional    HistoryAlertRequest               history_alert              =   22;
    optional    DeleteHistoryAlertRequest         delete_history_alert       =   23;
    optional    DeleteGroupRequest				  delete_group				 =   24;
    optional    HistoryAlertMessageRequest		  history_alert_message      =   25;


}
message Response
{
    required bool                          result                   = 1;
    required bool                          last_response            = 2;
    optional bytes                         error_describe           = 3;

    optional    LoginResponse                      login                     =   4;
    optional    EntityResponse                     entity                    =   5;
    optional    AppendGroupResponse                append_group              =   6;
    optional    ModifyGroupResponse                modify_group              =   7;
    optional    ModifyParticipantsResponse         modify_participants       =   8;
    optional    MediaMessageResponse               group_message             =   9;
    optional    AppendAlertResponse                append_alert              =   10;
    optional    HistoryAlertsResponse              history_alerts            =   11;
    optional    HistoryAlertResponse               history_alert             =   12;
    optional    HistoryAlertMessageResponse         history_alert_message    =   13;

}
message Indication
{
     optional    EntityNotification                        entity                      =   1;
     optional    EntityStatusNotification                  entity_status               =   2;
     optional    ParticipantsNotification                  participants                =   3;
     optional    JoinGroupRequestNotification              join_group_request          =   4;
     optional    ParticipantStatusNotification             participant_status          =   5;
     optional    MediaMessageNotification                  media_message               =   6;
     optional    ParticipantConnectRequestNotification     participant_connect_request =   7;
     optional    ParticipantSpeakRequestNotification       participant_speak_request   =   8;
     optional    SessionStatusNotification                 session_status              =   9;
     optional    RecordStatusNotification                  record_status               =   10;
     optional    AccountLocationNotification               account_location            =   11;
     optional    AlertOveredNotification                   alert_overed                =   12;
     optional    MoveUnitNotification					   move_unit				   =   13;

}

message Message
{
    required    MSG         msg_type        = 1;
    required    fixed32     sequence        = 2;
    optional    fixed32     session_id      = 3;

    optional    Request     request         = 4;
    optional    Response    response        = 5;
    optional    Indication  indication      = 6;
}


