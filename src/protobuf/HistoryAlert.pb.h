// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HistoryAlert.proto

#ifndef PROTOBUF_HistoryAlert_2eproto__INCLUDED
#define PROTOBUF_HistoryAlert_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pbmsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HistoryAlert_2eproto();
void protobuf_AssignDesc_HistoryAlert_2eproto();
void protobuf_ShutdownFile_HistoryAlert_2eproto();

class HistoryAlert;

// ===================================================================

class HistoryAlert : public ::google::protobuf::Message {
 public:
  HistoryAlert();
  virtual ~HistoryAlert();

  HistoryAlert(const HistoryAlert& from);

  inline HistoryAlert& operator=(const HistoryAlert& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HistoryAlert& default_instance();

  void Swap(HistoryAlert* other);

  // implements Message ----------------------------------------------

  HistoryAlert* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HistoryAlert& from);
  void MergeFrom(const HistoryAlert& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes describe = 3;
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 3;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const void* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // optional fixed32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional bytes alram_time = 5;
  inline bool has_alram_time() const;
  inline void clear_alram_time();
  static const int kAlramTimeFieldNumber = 5;
  inline const ::std::string& alram_time() const;
  inline void set_alram_time(const ::std::string& value);
  inline void set_alram_time(const char* value);
  inline void set_alram_time(const void* value, size_t size);
  inline ::std::string* mutable_alram_time();
  inline ::std::string* release_alram_time();
  inline void set_allocated_alram_time(::std::string* alram_time);

  // optional fixed32 use_cars = 6;
  inline bool has_use_cars() const;
  inline void clear_use_cars();
  static const int kUseCarsFieldNumber = 6;
  inline ::google::protobuf::uint32 use_cars() const;
  inline void set_use_cars(::google::protobuf::uint32 value);

  // optional bytes create_time = 7;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 7;
  inline const ::std::string& create_time() const;
  inline void set_create_time(const ::std::string& value);
  inline void set_create_time(const char* value);
  inline void set_create_time(const void* value, size_t size);
  inline ::std::string* mutable_create_time();
  inline ::std::string* release_create_time();
  inline void set_allocated_create_time(::std::string* create_time);

  // optional bytes over_time = 8;
  inline bool has_over_time() const;
  inline void clear_over_time();
  static const int kOverTimeFieldNumber = 8;
  inline const ::std::string& over_time() const;
  inline void set_over_time(const ::std::string& value);
  inline void set_over_time(const char* value);
  inline void set_over_time(const void* value, size_t size);
  inline ::std::string* mutable_over_time();
  inline ::std::string* release_over_time();
  inline void set_allocated_over_time(::std::string* over_time);

  // @@protoc_insertion_point(class_scope:pbmsg.HistoryAlert)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_describe();
  inline void clear_has_describe();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_alram_time();
  inline void clear_has_alram_time();
  inline void set_has_use_cars();
  inline void clear_has_use_cars();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_over_time();
  inline void clear_has_over_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  ::std::string* describe_;
  ::std::string* alram_time_;
  ::std::string* create_time_;
  ::std::string* over_time_;
  ::google::protobuf::uint32 use_cars_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_HistoryAlert_2eproto();
  friend void protobuf_AssignDesc_HistoryAlert_2eproto();
  friend void protobuf_ShutdownFile_HistoryAlert_2eproto();

  void InitAsDefaultInstance();
  static HistoryAlert* default_instance_;
};
// ===================================================================


// ===================================================================

// HistoryAlert

// optional fixed32 id = 1;
inline bool HistoryAlert::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HistoryAlert::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HistoryAlert::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HistoryAlert::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 HistoryAlert::id() const {
  return id_;
}
inline void HistoryAlert::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 2;
inline bool HistoryAlert::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HistoryAlert::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HistoryAlert::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HistoryAlert::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& HistoryAlert::name() const {
  return *name_;
}
inline void HistoryAlert::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HistoryAlert::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HistoryAlert::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HistoryAlert::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* HistoryAlert::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HistoryAlert::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes describe = 3;
inline bool HistoryAlert::has_describe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HistoryAlert::set_has_describe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HistoryAlert::clear_has_describe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HistoryAlert::clear_describe() {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& HistoryAlert::describe() const {
  return *describe_;
}
inline void HistoryAlert::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void HistoryAlert::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void HistoryAlert::set_describe(const void* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HistoryAlert::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  return describe_;
}
inline ::std::string* HistoryAlert::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HistoryAlert::set_allocated_describe(::std::string* describe) {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed32 level = 4;
inline bool HistoryAlert::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HistoryAlert::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HistoryAlert::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HistoryAlert::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 HistoryAlert::level() const {
  return level_;
}
inline void HistoryAlert::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional bytes alram_time = 5;
inline bool HistoryAlert::has_alram_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HistoryAlert::set_has_alram_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HistoryAlert::clear_has_alram_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HistoryAlert::clear_alram_time() {
  if (alram_time_ != &::google::protobuf::internal::kEmptyString) {
    alram_time_->clear();
  }
  clear_has_alram_time();
}
inline const ::std::string& HistoryAlert::alram_time() const {
  return *alram_time_;
}
inline void HistoryAlert::set_alram_time(const ::std::string& value) {
  set_has_alram_time();
  if (alram_time_ == &::google::protobuf::internal::kEmptyString) {
    alram_time_ = new ::std::string;
  }
  alram_time_->assign(value);
}
inline void HistoryAlert::set_alram_time(const char* value) {
  set_has_alram_time();
  if (alram_time_ == &::google::protobuf::internal::kEmptyString) {
    alram_time_ = new ::std::string;
  }
  alram_time_->assign(value);
}
inline void HistoryAlert::set_alram_time(const void* value, size_t size) {
  set_has_alram_time();
  if (alram_time_ == &::google::protobuf::internal::kEmptyString) {
    alram_time_ = new ::std::string;
  }
  alram_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HistoryAlert::mutable_alram_time() {
  set_has_alram_time();
  if (alram_time_ == &::google::protobuf::internal::kEmptyString) {
    alram_time_ = new ::std::string;
  }
  return alram_time_;
}
inline ::std::string* HistoryAlert::release_alram_time() {
  clear_has_alram_time();
  if (alram_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alram_time_;
    alram_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HistoryAlert::set_allocated_alram_time(::std::string* alram_time) {
  if (alram_time_ != &::google::protobuf::internal::kEmptyString) {
    delete alram_time_;
  }
  if (alram_time) {
    set_has_alram_time();
    alram_time_ = alram_time;
  } else {
    clear_has_alram_time();
    alram_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed32 use_cars = 6;
inline bool HistoryAlert::has_use_cars() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HistoryAlert::set_has_use_cars() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HistoryAlert::clear_has_use_cars() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HistoryAlert::clear_use_cars() {
  use_cars_ = 0u;
  clear_has_use_cars();
}
inline ::google::protobuf::uint32 HistoryAlert::use_cars() const {
  return use_cars_;
}
inline void HistoryAlert::set_use_cars(::google::protobuf::uint32 value) {
  set_has_use_cars();
  use_cars_ = value;
}

// optional bytes create_time = 7;
inline bool HistoryAlert::has_create_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HistoryAlert::set_has_create_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HistoryAlert::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HistoryAlert::clear_create_time() {
  if (create_time_ != &::google::protobuf::internal::kEmptyString) {
    create_time_->clear();
  }
  clear_has_create_time();
}
inline const ::std::string& HistoryAlert::create_time() const {
  return *create_time_;
}
inline void HistoryAlert::set_create_time(const ::std::string& value) {
  set_has_create_time();
  if (create_time_ == &::google::protobuf::internal::kEmptyString) {
    create_time_ = new ::std::string;
  }
  create_time_->assign(value);
}
inline void HistoryAlert::set_create_time(const char* value) {
  set_has_create_time();
  if (create_time_ == &::google::protobuf::internal::kEmptyString) {
    create_time_ = new ::std::string;
  }
  create_time_->assign(value);
}
inline void HistoryAlert::set_create_time(const void* value, size_t size) {
  set_has_create_time();
  if (create_time_ == &::google::protobuf::internal::kEmptyString) {
    create_time_ = new ::std::string;
  }
  create_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HistoryAlert::mutable_create_time() {
  set_has_create_time();
  if (create_time_ == &::google::protobuf::internal::kEmptyString) {
    create_time_ = new ::std::string;
  }
  return create_time_;
}
inline ::std::string* HistoryAlert::release_create_time() {
  clear_has_create_time();
  if (create_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = create_time_;
    create_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HistoryAlert::set_allocated_create_time(::std::string* create_time) {
  if (create_time_ != &::google::protobuf::internal::kEmptyString) {
    delete create_time_;
  }
  if (create_time) {
    set_has_create_time();
    create_time_ = create_time;
  } else {
    clear_has_create_time();
    create_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes over_time = 8;
inline bool HistoryAlert::has_over_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HistoryAlert::set_has_over_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HistoryAlert::clear_has_over_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HistoryAlert::clear_over_time() {
  if (over_time_ != &::google::protobuf::internal::kEmptyString) {
    over_time_->clear();
  }
  clear_has_over_time();
}
inline const ::std::string& HistoryAlert::over_time() const {
  return *over_time_;
}
inline void HistoryAlert::set_over_time(const ::std::string& value) {
  set_has_over_time();
  if (over_time_ == &::google::protobuf::internal::kEmptyString) {
    over_time_ = new ::std::string;
  }
  over_time_->assign(value);
}
inline void HistoryAlert::set_over_time(const char* value) {
  set_has_over_time();
  if (over_time_ == &::google::protobuf::internal::kEmptyString) {
    over_time_ = new ::std::string;
  }
  over_time_->assign(value);
}
inline void HistoryAlert::set_over_time(const void* value, size_t size) {
  set_has_over_time();
  if (over_time_ == &::google::protobuf::internal::kEmptyString) {
    over_time_ = new ::std::string;
  }
  over_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HistoryAlert::mutable_over_time() {
  set_has_over_time();
  if (over_time_ == &::google::protobuf::internal::kEmptyString) {
    over_time_ = new ::std::string;
  }
  return over_time_;
}
inline ::std::string* HistoryAlert::release_over_time() {
  clear_has_over_time();
  if (over_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = over_time_;
    over_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HistoryAlert::set_allocated_over_time(::std::string* over_time) {
  if (over_time_ != &::google::protobuf::internal::kEmptyString) {
    delete over_time_;
  }
  if (over_time) {
    set_has_over_time();
    over_time_ = over_time;
  } else {
    clear_has_over_time();
    over_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbmsg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HistoryAlert_2eproto__INCLUDED
