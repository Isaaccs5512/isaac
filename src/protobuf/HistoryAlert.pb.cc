// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HistoryAlert.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HistoryAlert.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbmsg {

namespace {

const ::google::protobuf::Descriptor* HistoryAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryAlert_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HistoryAlert_2eproto() {
  protobuf_AddDesc_HistoryAlert_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HistoryAlert.proto");
  GOOGLE_CHECK(file != NULL);
  HistoryAlert_descriptor_ = file->message_type(0);
  static const int HistoryAlert_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, alram_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, use_cars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, over_time_),
  };
  HistoryAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryAlert_descriptor_,
      HistoryAlert::default_instance_,
      HistoryAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryAlert));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HistoryAlert_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryAlert_descriptor_, &HistoryAlert::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HistoryAlert_2eproto() {
  delete HistoryAlert::default_instance_;
  delete HistoryAlert_reflection_;
}

void protobuf_AddDesc_HistoryAlert_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022HistoryAlert.proto\022\005pbmsg\"\227\001\n\014HistoryA"
    "lert\022\n\n\002id\030\001 \001(\007\022\014\n\004name\030\002 \001(\014\022\020\n\010descri"
    "be\030\003 \001(\014\022\r\n\005level\030\004 \001(\007\022\022\n\nalram_time\030\005 "
    "\001(\014\022\020\n\010use_cars\030\006 \001(\007\022\023\n\013create_time\030\007 \001"
    "(\014\022\021\n\tover_time\030\010 \001(\014", 181);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HistoryAlert.proto", &protobuf_RegisterTypes);
  HistoryAlert::default_instance_ = new HistoryAlert();
  HistoryAlert::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HistoryAlert_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HistoryAlert_2eproto {
  StaticDescriptorInitializer_HistoryAlert_2eproto() {
    protobuf_AddDesc_HistoryAlert_2eproto();
  }
} static_descriptor_initializer_HistoryAlert_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HistoryAlert::kIdFieldNumber;
const int HistoryAlert::kNameFieldNumber;
const int HistoryAlert::kDescribeFieldNumber;
const int HistoryAlert::kLevelFieldNumber;
const int HistoryAlert::kAlramTimeFieldNumber;
const int HistoryAlert::kUseCarsFieldNumber;
const int HistoryAlert::kCreateTimeFieldNumber;
const int HistoryAlert::kOverTimeFieldNumber;
#endif  // !_MSC_VER

HistoryAlert::HistoryAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryAlert::InitAsDefaultInstance() {
}

HistoryAlert::HistoryAlert(const HistoryAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryAlert::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  alram_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  use_cars_ = 0u;
  create_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  over_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryAlert::~HistoryAlert() {
  SharedDtor();
}

void HistoryAlert::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (alram_time_ != &::google::protobuf::internal::kEmptyString) {
    delete alram_time_;
  }
  if (create_time_ != &::google::protobuf::internal::kEmptyString) {
    delete create_time_;
  }
  if (over_time_ != &::google::protobuf::internal::kEmptyString) {
    delete over_time_;
  }
  if (this != default_instance_) {
  }
}

void HistoryAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryAlert_descriptor_;
}

const HistoryAlert& HistoryAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HistoryAlert_2eproto();
  return *default_instance_;
}

HistoryAlert* HistoryAlert::default_instance_ = NULL;

HistoryAlert* HistoryAlert::New() const {
  return new HistoryAlert;
}

void HistoryAlert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::kEmptyString) {
        describe_->clear();
      }
    }
    level_ = 0u;
    if (has_alram_time()) {
      if (alram_time_ != &::google::protobuf::internal::kEmptyString) {
        alram_time_->clear();
      }
    }
    use_cars_ = 0u;
    if (has_create_time()) {
      if (create_time_ != &::google::protobuf::internal::kEmptyString) {
        create_time_->clear();
      }
    }
    if (has_over_time()) {
      if (over_time_ != &::google::protobuf::internal::kEmptyString) {
        over_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_describe;
        break;
      }

      // optional bytes describe = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_describe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_level;
        break;
      }

      // optional fixed32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_alram_time;
        break;
      }

      // optional bytes alram_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alram_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_alram_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_use_cars;
        break;
      }

      // optional fixed32 use_cars = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_use_cars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &use_cars_)));
          set_has_use_cars();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_create_time;
        break;
      }

      // optional bytes create_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_create_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_over_time;
        break;
      }

      // optional bytes over_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_over_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_over_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional bytes describe = 3;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->describe(), output);
  }

  // optional fixed32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->level(), output);
  }

  // optional bytes alram_time = 5;
  if (has_alram_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->alram_time(), output);
  }

  // optional fixed32 use_cars = 6;
  if (has_use_cars()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->use_cars(), output);
  }

  // optional bytes create_time = 7;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->create_time(), output);
  }

  // optional bytes over_time = 8;
  if (has_over_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->over_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes describe = 3;
  if (has_describe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->describe(), target);
  }

  // optional fixed32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->level(), target);
  }

  // optional bytes alram_time = 5;
  if (has_alram_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->alram_time(), target);
  }

  // optional fixed32 use_cars = 6;
  if (has_use_cars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->use_cars(), target);
  }

  // optional bytes create_time = 7;
  if (has_create_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->create_time(), target);
  }

  // optional bytes over_time = 8;
  if (has_over_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->over_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes describe = 3;
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->describe());
    }

    // optional fixed32 level = 4;
    if (has_level()) {
      total_size += 1 + 4;
    }

    // optional bytes alram_time = 5;
    if (has_alram_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->alram_time());
    }

    // optional fixed32 use_cars = 6;
    if (has_use_cars()) {
      total_size += 1 + 4;
    }

    // optional bytes create_time = 7;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->create_time());
    }

    // optional bytes over_time = 8;
    if (has_over_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->over_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryAlert::MergeFrom(const HistoryAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_alram_time()) {
      set_alram_time(from.alram_time());
    }
    if (from.has_use_cars()) {
      set_use_cars(from.use_cars());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_over_time()) {
      set_over_time(from.over_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryAlert::CopyFrom(const HistoryAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryAlert::IsInitialized() const {

  return true;
}

void HistoryAlert::Swap(HistoryAlert* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(describe_, other->describe_);
    std::swap(level_, other->level_);
    std::swap(alram_time_, other->alram_time_);
    std::swap(use_cars_, other->use_cars_);
    std::swap(create_time_, other->create_time_);
    std::swap(over_time_, other->over_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryAlert_descriptor_;
  metadata.reflection = HistoryAlert_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbmsg

// @@protoc_insertion_point(global_scope)
