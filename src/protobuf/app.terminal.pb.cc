// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app.terminal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "app.terminal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace terminal {

namespace {

const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterStatusNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterStatusNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Group_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Participant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Participant_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupParticipantsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupParticipantsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupParticipantsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupParticipantsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinedGroupNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinedGroupNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveGroupNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveGroupNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* OthersJoinedGroupNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OthersJoinedGroupNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* OthersLeaveGroupNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OthersLeaveGroupNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaMessageNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaMessageNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionStatusNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionStatusNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeakRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeakRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReleaseTokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReleaseTokenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppointSpeakRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppointSpeakRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeLocationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeLocationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeLocationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeLocationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocationNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocationNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* Alert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Alert_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlertsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlertsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlertRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlertRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlertResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlertResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlertCreateNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlertCreateNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlertModifyNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlertModifyNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlertOveredNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlertOveredNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryAlertsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryAlertsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryAlertsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryAlertsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryAlertRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryAlertRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryAlertResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryAlertResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryAlertMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryAlertMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryAlertMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryAlertMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupSubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupSubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Indication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Indication_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CallPrivilege_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TokenPrivilege_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GpsReportMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RegisterStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AlertLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CustomStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_app_2eterminal_2eproto() {
  protobuf_AddDesc_app_2eterminal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "app.terminal.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRequest_descriptor_ = file->message_type(0);
  static const int LoginRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, password_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  LoginResponse_descriptor_ = file->message_type(1);
  static const int LoginResponse_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, sip_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, your_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, talk_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, call_privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, token_privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, gps_report_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, upload_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, participant_subscribing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, message_subscribing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, groups_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, accounts_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, unjoin_groups_hash_),
  };
  LoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResponse));
  RegisterStatusNotification_descriptor_ = file->message_type(2);
  static const int RegisterStatusNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterStatusNotification, sip_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterStatusNotification, custom_status_),
  };
  RegisterStatusNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterStatusNotification_descriptor_,
      RegisterStatusNotification::default_instance_,
      RegisterStatusNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterStatusNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterStatusNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterStatusNotification));
  Group_descriptor_ = file->message_type(3);
  static const int Group_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, call_privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, token_privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, participant_subscribing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, message_subscribing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, participants_hash_),
  };
  Group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Group_descriptor_,
      Group::default_instance_,
      Group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Group));
  GroupsRequest_descriptor_ = file->message_type(4);
  static const int GroupsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupsRequest, get_joined_groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupsRequest, get_unjoined_groups_),
  };
  GroupsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupsRequest_descriptor_,
      GroupsRequest::default_instance_,
      GroupsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupsRequest));
  GroupsResponse_descriptor_ = file->message_type(5);
  static const int GroupsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupsResponse, joined_groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupsResponse, unjoin_groups_),
  };
  GroupsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupsResponse_descriptor_,
      GroupsResponse::default_instance_,
      GroupsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupsResponse));
  Participant_descriptor_ = file->message_type(6);
  static const int Participant_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, talk_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, status_),
  };
  Participant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Participant_descriptor_,
      Participant::default_instance_,
      Participant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Participant));
  GroupParticipantsRequest_descriptor_ = file->message_type(7);
  static const int GroupParticipantsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupParticipantsRequest, group_id_),
  };
  GroupParticipantsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupParticipantsRequest_descriptor_,
      GroupParticipantsRequest::default_instance_,
      GroupParticipantsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupParticipantsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupParticipantsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupParticipantsRequest));
  GroupParticipantsResponse_descriptor_ = file->message_type(8);
  static const int GroupParticipantsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupParticipantsResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupParticipantsResponse, participants_),
  };
  GroupParticipantsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupParticipantsResponse_descriptor_,
      GroupParticipantsResponse::default_instance_,
      GroupParticipantsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupParticipantsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupParticipantsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupParticipantsResponse));
  MediaMessageRequest_descriptor_ = file->message_type(9);
  static const int MediaMessageRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageRequest, from_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageRequest, from_message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageRequest, max_message_count_),
  };
  MediaMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaMessageRequest_descriptor_,
      MediaMessageRequest::default_instance_,
      MediaMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaMessageRequest));
  MediaMessage_descriptor_ = file->message_type(10);
  static const int MediaMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessage, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessage, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessage, picture_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessage, audio_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessage, audio_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessage, video_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessage, video_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessage, timestamp_),
  };
  MediaMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaMessage_descriptor_,
      MediaMessage::default_instance_,
      MediaMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaMessage));
  MediaMessageResponse_descriptor_ = file->message_type(11);
  static const int MediaMessageResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageResponse, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageResponse, leave_message_count_),
  };
  MediaMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaMessageResponse_descriptor_,
      MediaMessageResponse::default_instance_,
      MediaMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaMessageResponse));
  JoinedGroupNotification_descriptor_ = file->message_type(12);
  static const int JoinedGroupNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinedGroupNotification, group_),
  };
  JoinedGroupNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinedGroupNotification_descriptor_,
      JoinedGroupNotification::default_instance_,
      JoinedGroupNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinedGroupNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinedGroupNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinedGroupNotification));
  LeaveGroupNotification_descriptor_ = file->message_type(13);
  static const int LeaveGroupNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroupNotification, group_id_),
  };
  LeaveGroupNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveGroupNotification_descriptor_,
      LeaveGroupNotification::default_instance_,
      LeaveGroupNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroupNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroupNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveGroupNotification));
  OthersJoinedGroupNotification_descriptor_ = file->message_type(14);
  static const int OthersJoinedGroupNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OthersJoinedGroupNotification, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OthersJoinedGroupNotification, participants_),
  };
  OthersJoinedGroupNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OthersJoinedGroupNotification_descriptor_,
      OthersJoinedGroupNotification::default_instance_,
      OthersJoinedGroupNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OthersJoinedGroupNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OthersJoinedGroupNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OthersJoinedGroupNotification));
  OthersLeaveGroupNotification_descriptor_ = file->message_type(15);
  static const int OthersLeaveGroupNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OthersLeaveGroupNotification, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OthersLeaveGroupNotification, account_ids_),
  };
  OthersLeaveGroupNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OthersLeaveGroupNotification_descriptor_,
      OthersLeaveGroupNotification::default_instance_,
      OthersLeaveGroupNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OthersLeaveGroupNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OthersLeaveGroupNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OthersLeaveGroupNotification));
  MediaMessageNotification_descriptor_ = file->message_type(16);
  static const int MediaMessageNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageNotification, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageNotification, msg_),
  };
  MediaMessageNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaMessageNotification_descriptor_,
      MediaMessageNotification::default_instance_,
      MediaMessageNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMessageNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaMessageNotification));
  JoinGroupRequest_descriptor_ = file->message_type(17);
  static const int JoinGroupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRequest, group_id_),
  };
  JoinGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinGroupRequest_descriptor_,
      JoinGroupRequest::default_instance_,
      JoinGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinGroupRequest));
  ConnectGroupRequest_descriptor_ = file->message_type(18);
  static const int ConnectGroupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectGroupRequest, group_id_),
  };
  ConnectGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectGroupRequest_descriptor_,
      ConnectGroupRequest::default_instance_,
      ConnectGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectGroupRequest));
  SessionStatusNotification_descriptor_ = file->message_type(19);
  static const int SessionStatusNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStatusNotification, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStatusNotification, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStatusNotification, status_),
  };
  SessionStatusNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionStatusNotification_descriptor_,
      SessionStatusNotification::default_instance_,
      SessionStatusNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStatusNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStatusNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionStatusNotification));
  SpeakRequest_descriptor_ = file->message_type(20);
  static const int SpeakRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakRequest, group_id_),
  };
  SpeakRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeakRequest_descriptor_,
      SpeakRequest::default_instance_,
      SpeakRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeakRequest));
  JoinSessionRequest_descriptor_ = file->message_type(21);
  static const int JoinSessionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSessionRequest, group_id_),
  };
  JoinSessionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinSessionRequest_descriptor_,
      JoinSessionRequest::default_instance_,
      JoinSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSessionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSessionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinSessionRequest));
  LeaveSessionRequest_descriptor_ = file->message_type(22);
  static const int LeaveSessionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveSessionRequest, group_id_),
  };
  LeaveSessionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveSessionRequest_descriptor_,
      LeaveSessionRequest::default_instance_,
      LeaveSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveSessionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveSessionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveSessionRequest));
  ReleaseTokenRequest_descriptor_ = file->message_type(23);
  static const int ReleaseTokenRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseTokenRequest, group_id_),
  };
  ReleaseTokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReleaseTokenRequest_descriptor_,
      ReleaseTokenRequest::default_instance_,
      ReleaseTokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseTokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseTokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReleaseTokenRequest));
  AppointSpeakRequest_descriptor_ = file->message_type(24);
  static const int AppointSpeakRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointSpeakRequest, group_id_),
  };
  AppointSpeakRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppointSpeakRequest_descriptor_,
      AppointSpeakRequest::default_instance_,
      AppointSpeakRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointSpeakRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointSpeakRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppointSpeakRequest));
  SendMessageRequest_descriptor_ = file->message_type(25);
  static const int SendMessageRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, picture_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, audio_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, audio_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, video_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, video_length_),
  };
  SendMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMessageRequest_descriptor_,
      SendMessageRequest::default_instance_,
      SendMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMessageRequest));
  SubscribeLocationRequest_descriptor_ = file->message_type(26);
  static const int SubscribeLocationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeLocationRequest, subscribing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeLocationRequest, ttl_),
  };
  SubscribeLocationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeLocationRequest_descriptor_,
      SubscribeLocationRequest::default_instance_,
      SubscribeLocationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeLocationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeLocationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeLocationRequest));
  SubscribeLocationResponse_descriptor_ = file->message_type(27);
  static const int SubscribeLocationResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeLocationResponse, longtitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeLocationResponse, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeLocationResponse, acquire_location_time_),
  };
  SubscribeLocationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeLocationResponse_descriptor_,
      SubscribeLocationResponse::default_instance_,
      SubscribeLocationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeLocationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeLocationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeLocationResponse));
  LocationNotification_descriptor_ = file->message_type(28);
  static const int LocationNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationNotification, longtitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationNotification, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationNotification, acquire_location_time_),
  };
  LocationNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocationNotification_descriptor_,
      LocationNotification::default_instance_,
      LocationNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocationNotification));
  Alert_descriptor_ = file->message_type(29);
  static const int Alert_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, alarm_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, use_cars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, create_time_),
  };
  Alert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Alert_descriptor_,
      Alert::default_instance_,
      Alert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Alert));
  AlertsResponse_descriptor_ = file->message_type(30);
  static const int AlertsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertsResponse, alerts_),
  };
  AlertsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlertsResponse_descriptor_,
      AlertsResponse::default_instance_,
      AlertsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlertsResponse));
  AlertRequest_descriptor_ = file->message_type(31);
  static const int AlertRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertRequest, alert_id_),
  };
  AlertRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlertRequest_descriptor_,
      AlertRequest::default_instance_,
      AlertRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlertRequest));
  AlertResponse_descriptor_ = file->message_type(32);
  static const int AlertResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertResponse, alert_),
  };
  AlertResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlertResponse_descriptor_,
      AlertResponse::default_instance_,
      AlertResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlertResponse));
  AlertCreateNotification_descriptor_ = file->message_type(33);
  static const int AlertCreateNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertCreateNotification, alert_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertCreateNotification, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertCreateNotification, group_id_),
  };
  AlertCreateNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlertCreateNotification_descriptor_,
      AlertCreateNotification::default_instance_,
      AlertCreateNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertCreateNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertCreateNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlertCreateNotification));
  AlertModifyNotification_descriptor_ = file->message_type(34);
  static const int AlertModifyNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertModifyNotification, alert_),
  };
  AlertModifyNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlertModifyNotification_descriptor_,
      AlertModifyNotification::default_instance_,
      AlertModifyNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertModifyNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertModifyNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlertModifyNotification));
  AlertOveredNotification_descriptor_ = file->message_type(35);
  static const int AlertOveredNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertOveredNotification, alert_id_),
  };
  AlertOveredNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlertOveredNotification_descriptor_,
      AlertOveredNotification::default_instance_,
      AlertOveredNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertOveredNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertOveredNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlertOveredNotification));
  HistoryAlertsRequest_descriptor_ = file->message_type(36);
  static const int HistoryAlertsRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, create_time_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, create_time_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, alram_time_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, alram_time_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, over_time_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, over_time_to_),
  };
  HistoryAlertsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryAlertsRequest_descriptor_,
      HistoryAlertsRequest::default_instance_,
      HistoryAlertsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryAlertsRequest));
  HistoryAlert_descriptor_ = file->message_type(37);
  static const int HistoryAlert_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, alarm_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, use_cars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, over_time_),
  };
  HistoryAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryAlert_descriptor_,
      HistoryAlert::default_instance_,
      HistoryAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryAlert));
  HistoryAlertsResponse_descriptor_ = file->message_type(38);
  static const int HistoryAlertsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsResponse, history_alerts_),
  };
  HistoryAlertsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryAlertsResponse_descriptor_,
      HistoryAlertsResponse::default_instance_,
      HistoryAlertsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryAlertsResponse));
  HistoryAlertRequest_descriptor_ = file->message_type(39);
  static const int HistoryAlertRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertRequest, history_alert_id_),
  };
  HistoryAlertRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryAlertRequest_descriptor_,
      HistoryAlertRequest::default_instance_,
      HistoryAlertRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryAlertRequest));
  HistoryAlertResponse_descriptor_ = file->message_type(40);
  static const int HistoryAlertResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertResponse, history_alert_),
  };
  HistoryAlertResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryAlertResponse_descriptor_,
      HistoryAlertResponse::default_instance_,
      HistoryAlertResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryAlertResponse));
  HistoryAlertMessageRequest_descriptor_ = file->message_type(41);
  static const int HistoryAlertMessageRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageRequest, history_alert_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageRequest, from_message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageRequest, from_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageRequest, max_message_count_),
  };
  HistoryAlertMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryAlertMessageRequest_descriptor_,
      HistoryAlertMessageRequest::default_instance_,
      HistoryAlertMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryAlertMessageRequest));
  HistoryAlertMessageResponse_descriptor_ = file->message_type(42);
  static const int HistoryAlertMessageResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageResponse, history_alert_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageResponse, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageResponse, leave_message_count_),
  };
  HistoryAlertMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryAlertMessageResponse_descriptor_,
      HistoryAlertMessageResponse::default_instance_,
      HistoryAlertMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryAlertMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryAlertMessageResponse));
  AccountsResponse_descriptor_ = file->message_type(43);
  static const int AccountsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountsResponse, ids_),
  };
  AccountsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountsResponse_descriptor_,
      AccountsResponse::default_instance_,
      AccountsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountsResponse));
  AccountRequest_descriptor_ = file->message_type(44);
  static const int AccountRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, id_),
  };
  AccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountRequest_descriptor_,
      AccountRequest::default_instance_,
      AccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountRequest));
  AccountResponse_descriptor_ = file->message_type(45);
  static const int AccountResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountResponse, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountResponse, number_),
  };
  AccountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountResponse_descriptor_,
      AccountResponse::default_instance_,
      AccountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountResponse));
  GroupSubscribeRequest_descriptor_ = file->message_type(46);
  static const int GroupSubscribeRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSubscribeRequest, participant_subscribing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSubscribeRequest, message_subscribing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSubscribeRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSubscribeRequest, effect_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSubscribeRequest, effect_follow_),
  };
  GroupSubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupSubscribeRequest_descriptor_,
      GroupSubscribeRequest::default_instance_,
      GroupSubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupSubscribeRequest));
  Request_descriptor_ = file->message_type(47);
  static const int Request_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, group_participants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, group_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, join_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, connect_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, speak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, join_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, leave_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, release_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, appoint_speak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, send_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, subscribe_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, history_alerts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, history_alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, history_alert_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, group_subscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, groups_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Response_descriptor_ = file->message_type(48);
  static const int Response_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, last_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, group_participants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, group_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, subscribe_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, alerts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, history_alerts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, history_alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, history_alert_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, accounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, account_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  Indication_descriptor_ = file->message_type(49);
  static const int Indication_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, register_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, joined_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, leave_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, others_joined_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, others_leave_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, group_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, session_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, alert_create_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, alert_modify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, alert_overed_),
  };
  Indication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Indication_descriptor_,
      Indication::default_instance_,
      Indication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Indication));
  Message_descriptor_ = file->message_type(50);
  static const int Message_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, indication_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  MSG_descriptor_ = file->enum_type(0);
  CallPrivilege_descriptor_ = file->enum_type(1);
  TokenPrivilege_descriptor_ = file->enum_type(2);
  GpsReportMode_descriptor_ = file->enum_type(3);
  RegisterStatus_descriptor_ = file->enum_type(4);
  SessionStatus_descriptor_ = file->enum_type(5);
  AlertLevel_descriptor_ = file->enum_type(6);
  CustomStatus_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_app_2eterminal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResponse_descriptor_, &LoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterStatusNotification_descriptor_, &RegisterStatusNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Group_descriptor_, &Group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupsRequest_descriptor_, &GroupsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupsResponse_descriptor_, &GroupsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Participant_descriptor_, &Participant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupParticipantsRequest_descriptor_, &GroupParticipantsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupParticipantsResponse_descriptor_, &GroupParticipantsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaMessageRequest_descriptor_, &MediaMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaMessage_descriptor_, &MediaMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaMessageResponse_descriptor_, &MediaMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinedGroupNotification_descriptor_, &JoinedGroupNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveGroupNotification_descriptor_, &LeaveGroupNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OthersJoinedGroupNotification_descriptor_, &OthersJoinedGroupNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OthersLeaveGroupNotification_descriptor_, &OthersLeaveGroupNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaMessageNotification_descriptor_, &MediaMessageNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinGroupRequest_descriptor_, &JoinGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectGroupRequest_descriptor_, &ConnectGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionStatusNotification_descriptor_, &SessionStatusNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeakRequest_descriptor_, &SpeakRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinSessionRequest_descriptor_, &JoinSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveSessionRequest_descriptor_, &LeaveSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReleaseTokenRequest_descriptor_, &ReleaseTokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppointSpeakRequest_descriptor_, &AppointSpeakRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMessageRequest_descriptor_, &SendMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeLocationRequest_descriptor_, &SubscribeLocationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeLocationResponse_descriptor_, &SubscribeLocationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocationNotification_descriptor_, &LocationNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Alert_descriptor_, &Alert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlertsResponse_descriptor_, &AlertsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlertRequest_descriptor_, &AlertRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlertResponse_descriptor_, &AlertResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlertCreateNotification_descriptor_, &AlertCreateNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlertModifyNotification_descriptor_, &AlertModifyNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlertOveredNotification_descriptor_, &AlertOveredNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryAlertsRequest_descriptor_, &HistoryAlertsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryAlert_descriptor_, &HistoryAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryAlertsResponse_descriptor_, &HistoryAlertsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryAlertRequest_descriptor_, &HistoryAlertRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryAlertResponse_descriptor_, &HistoryAlertResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryAlertMessageRequest_descriptor_, &HistoryAlertMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryAlertMessageResponse_descriptor_, &HistoryAlertMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountsResponse_descriptor_, &AccountsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountRequest_descriptor_, &AccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountResponse_descriptor_, &AccountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupSubscribeRequest_descriptor_, &GroupSubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Indication_descriptor_, &Indication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_app_2eterminal_2eproto() {
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
  delete RegisterStatusNotification::default_instance_;
  delete RegisterStatusNotification_reflection_;
  delete Group::default_instance_;
  delete Group_reflection_;
  delete GroupsRequest::default_instance_;
  delete GroupsRequest_reflection_;
  delete GroupsResponse::default_instance_;
  delete GroupsResponse_reflection_;
  delete Participant::default_instance_;
  delete Participant_reflection_;
  delete GroupParticipantsRequest::default_instance_;
  delete GroupParticipantsRequest_reflection_;
  delete GroupParticipantsResponse::default_instance_;
  delete GroupParticipantsResponse_reflection_;
  delete MediaMessageRequest::default_instance_;
  delete MediaMessageRequest_reflection_;
  delete MediaMessage::default_instance_;
  delete MediaMessage_reflection_;
  delete MediaMessageResponse::default_instance_;
  delete MediaMessageResponse_reflection_;
  delete JoinedGroupNotification::default_instance_;
  delete JoinedGroupNotification_reflection_;
  delete LeaveGroupNotification::default_instance_;
  delete LeaveGroupNotification_reflection_;
  delete OthersJoinedGroupNotification::default_instance_;
  delete OthersJoinedGroupNotification_reflection_;
  delete OthersLeaveGroupNotification::default_instance_;
  delete OthersLeaveGroupNotification_reflection_;
  delete MediaMessageNotification::default_instance_;
  delete MediaMessageNotification_reflection_;
  delete JoinGroupRequest::default_instance_;
  delete JoinGroupRequest_reflection_;
  delete ConnectGroupRequest::default_instance_;
  delete ConnectGroupRequest_reflection_;
  delete SessionStatusNotification::default_instance_;
  delete SessionStatusNotification_reflection_;
  delete SpeakRequest::default_instance_;
  delete SpeakRequest_reflection_;
  delete JoinSessionRequest::default_instance_;
  delete JoinSessionRequest_reflection_;
  delete LeaveSessionRequest::default_instance_;
  delete LeaveSessionRequest_reflection_;
  delete ReleaseTokenRequest::default_instance_;
  delete ReleaseTokenRequest_reflection_;
  delete AppointSpeakRequest::default_instance_;
  delete AppointSpeakRequest_reflection_;
  delete SendMessageRequest::default_instance_;
  delete SendMessageRequest_reflection_;
  delete SubscribeLocationRequest::default_instance_;
  delete SubscribeLocationRequest_reflection_;
  delete SubscribeLocationResponse::default_instance_;
  delete SubscribeLocationResponse_reflection_;
  delete LocationNotification::default_instance_;
  delete LocationNotification_reflection_;
  delete Alert::default_instance_;
  delete Alert_reflection_;
  delete AlertsResponse::default_instance_;
  delete AlertsResponse_reflection_;
  delete AlertRequest::default_instance_;
  delete AlertRequest_reflection_;
  delete AlertResponse::default_instance_;
  delete AlertResponse_reflection_;
  delete AlertCreateNotification::default_instance_;
  delete AlertCreateNotification_reflection_;
  delete AlertModifyNotification::default_instance_;
  delete AlertModifyNotification_reflection_;
  delete AlertOveredNotification::default_instance_;
  delete AlertOveredNotification_reflection_;
  delete HistoryAlertsRequest::default_instance_;
  delete HistoryAlertsRequest_reflection_;
  delete HistoryAlert::default_instance_;
  delete HistoryAlert_reflection_;
  delete HistoryAlertsResponse::default_instance_;
  delete HistoryAlertsResponse_reflection_;
  delete HistoryAlertRequest::default_instance_;
  delete HistoryAlertRequest_reflection_;
  delete HistoryAlertResponse::default_instance_;
  delete HistoryAlertResponse_reflection_;
  delete HistoryAlertMessageRequest::default_instance_;
  delete HistoryAlertMessageRequest_reflection_;
  delete HistoryAlertMessageResponse::default_instance_;
  delete HistoryAlertMessageResponse_reflection_;
  delete AccountsResponse::default_instance_;
  delete AccountsResponse_reflection_;
  delete AccountRequest::default_instance_;
  delete AccountRequest_reflection_;
  delete AccountResponse::default_instance_;
  delete AccountResponse_reflection_;
  delete GroupSubscribeRequest::default_instance_;
  delete GroupSubscribeRequest_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Indication::default_instance_;
  delete Indication_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_app_2eterminal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022app.terminal.proto\022\014app.terminal\"0\n\014Lo"
    "ginRequest\022\016\n\006number\030\001 \002(\t\022\020\n\010password\030\002"
    " \001(\t\"\317\003\n\rLoginResponse\022\017\n\007sip_uri\030\001 \002(\t\022"
    "\017\n\007your_id\030\002 \002(\007\022\024\n\014display_name\030\003 \001(\014\022\025"
    "\n\rtalk_priority\030\004 \002(\007\0223\n\016call_privilege\030"
    "\005 \002(\0162\033.app.terminal.CallPrivilege\0225\n\017to"
    "ken_privilege\030\006 \002(\0162\034.app.terminal.Token"
    "Privilege\022\016\n\006number\030\007 \002(\t\022\013\n\003ttl\030\010 \002(\007\0224"
    "\n\017gps_report_mode\030\t \002(\0162\033.app.terminal.G"
    "psReportMode\022\026\n\016upload_address\030\n \002(\t\022\022\n\n"
    "session_id\030\013 \002(\007\022\037\n\027participant_subscrib"
    "ing\030\014 \002(\010\022\033\n\023message_subscribing\030\r \002(\010\022\023"
    "\n\013groups_hash\030\016 \002(\007\022\025\n\raccounts_hash\030\017 \002"
    "(\007\022\032\n\022unjoin_groups_hash\030\020 \002(\007\"\201\001\n\032Regis"
    "terStatusNotification\0220\n\nsip_status\030\001 \001("
    "\0162\034.app.terminal.RegisterStatus\0221\n\rcusto"
    "m_status\030\002 \001(\0162\032.app.terminal.CustomStat"
    "us\"\366\001\n\005Group\022\n\n\002id\030\001 \002(\007\022\014\n\004name\030\002 \002(\014\022\016"
    "\n\006number\030\003 \001(\t\0223\n\016call_privilege\030\004 \001(\0162\033"
    ".app.terminal.CallPrivilege\0225\n\017token_pri"
    "vilege\030\005 \001(\0162\034.app.terminal.TokenPrivile"
    "ge\022\037\n\027participant_subscribing\030\006 \001(\010\022\033\n\023m"
    "essage_subscribing\030\007 \001(\010\022\031\n\021participants"
    "_hash\030\010 \001(\007\"G\n\rGroupsRequest\022\031\n\021get_join"
    "ed_groups\030\001 \002(\010\022\033\n\023get_unjoined_groups\030\002"
    " \002(\010\"h\n\016GroupsResponse\022*\n\rjoined_groups\030"
    "\001 \003(\0132\023.app.terminal.Group\022*\n\runjoin_gro"
    "ups\030\002 \003(\0132\023.app.terminal.Group\"{\n\013Partic"
    "ipant\022\022\n\naccount_id\030\001 \002(\007\022\024\n\014account_nam"
    "e\030\002 \002(\014\022\025\n\rtalk_priority\030\003 \002(\007\022+\n\006status"
    "\030\004 \002(\0162\033.app.terminal.SessionStatus\",\n\030G"
    "roupParticipantsRequest\022\020\n\010group_id\030\001 \002("
    "\007\"^\n\031GroupParticipantsResponse\022\020\n\010group_"
    "id\030\001 \002(\007\022/\n\014participants\030\002 \003(\0132\031.app.ter"
    "minal.Participant\"m\n\023MediaMessageRequest"
    "\022\n\n\002id\030\001 \002(\007\022\026\n\016from_timestamp\030\002 \001(\t\022\027\n\017"
    "from_message_id\030\003 \001(\007\022\031\n\021max_message_cou"
    "nt\030\004 \002(\007\"\262\001\n\014MediaMessage\022\n\n\002id\030\001 \002(\007\022\016\n"
    "\006sender\030\002 \002(\014\022\014\n\004text\030\003 \001(\014\022\023\n\013picture_u"
    "ri\030\004 \001(\t\022\021\n\taudio_uri\030\005 \001(\t\022\024\n\014audio_len"
    "gth\030\006 \001(\007\022\021\n\tvideo_uri\030\007 \001(\t\022\024\n\014video_le"
    "ngth\030\010 \001(\007\022\021\n\ttimestamp\030\t \001(\t\"s\n\024MediaMe"
    "ssageResponse\022\020\n\010group_id\030\001 \002(\007\022,\n\010messa"
    "ges\030\002 \003(\0132\032.app.terminal.MediaMessage\022\033\n"
    "\023leave_message_count\030\003 \002(\007\"=\n\027JoinedGrou"
    "pNotification\022\"\n\005group\030\001 \002(\0132\023.app.termi"
    "nal.Group\"*\n\026LeaveGroupNotification\022\020\n\010g"
    "roup_id\030\001 \002(\007\"b\n\035OthersJoinedGroupNotifi"
    "cation\022\020\n\010group_id\030\001 \002(\007\022/\n\014participants"
    "\030\002 \003(\0132\031.app.terminal.Participant\"E\n\034Oth"
    "ersLeaveGroupNotification\022\020\n\010group_id\030\001 "
    "\002(\007\022\023\n\013account_ids\030\002 \003(\007\"U\n\030MediaMessage"
    "Notification\022\020\n\010group_id\030\001 \002(\007\022\'\n\003msg\030\002 "
    "\002(\0132\032.app.terminal.MediaMessage\"$\n\020JoinG"
    "roupRequest\022\020\n\010group_id\030\001 \002(\007\"\'\n\023Connect"
    "GroupRequest\022\020\n\010group_id\030\001 \002(\007\"n\n\031Sessio"
    "nStatusNotification\022\020\n\010group_id\030\001 \002(\007\022\022\n"
    "\naccount_id\030\002 \002(\007\022+\n\006status\030\003 \002(\0162\033.app."
    "terminal.SessionStatus\" \n\014SpeakRequest\022\020"
    "\n\010group_id\030\001 \002(\007\"&\n\022JoinSessionRequest\022\020"
    "\n\010group_id\030\001 \002(\007\"\'\n\023LeaveSessionRequest\022"
    "\020\n\010group_id\030\001 \002(\007\"\'\n\023ReleaseTokenRequest"
    "\022\020\n\010group_id\030\001 \002(\007\"\'\n\023AppointSpeakReques"
    "t\022\020\n\010group_id\030\001 \002(\007\"\233\001\n\022SendMessageReque"
    "st\022\020\n\010group_id\030\001 \002(\007\022\014\n\004text\030\002 \001(\014\022\023\n\013pi"
    "cture_uri\030\003 \001(\t\022\021\n\taudio_uri\030\004 \001(\t\022\024\n\014au"
    "dio_length\030\005 \001(\007\022\021\n\tvideo_uri\030\006 \001(\t\022\024\n\014v"
    "ideo_length\030\007 \001(\007\"<\n\030SubscribeLocationRe"
    "quest\022\023\n\013subscribing\030\001 \002(\010\022\013\n\003ttl\030\002 \002(\007\""
    "`\n\031SubscribeLocationResponse\022\022\n\nlongtitu"
    "de\030\001 \002(\001\022\020\n\010latitude\030\002 \002(\001\022\035\n\025acquire_lo"
    "cation_time\030\003 \002(\007\"[\n\024LocationNotificatio"
    "n\022\022\n\nlongtitude\030\001 \002(\001\022\020\n\010latitude\030\002 \002(\001\022"
    "\035\n\025acquire_location_time\030\003 \001(\007\"\251\001\n\005Alert"
    "\022\n\n\002id\030\001 \002(\007\022\014\n\004name\030\002 \002(\014\022\020\n\010group_id\030\003"
    " \002(\007\022\'\n\005level\030\004 \001(\0162\030.app.terminal.Alert"
    "Level\022\020\n\010describe\030\005 \001(\014\022\022\n\nalarm_time\030\006 "
    "\001(\t\022\020\n\010use_cars\030\007 \001(\007\022\023\n\013create_time\030\010 \001"
    "(\t\"5\n\016AlertsResponse\022#\n\006alerts\030\004 \003(\0132\023.a"
    "pp.terminal.Alert\" \n\014AlertRequest\022\020\n\010ale"
    "rt_id\030\001 \002(\007\"3\n\rAlertResponse\022\"\n\005alert\030\001 "
    "\002(\0132\023.app.terminal.Alert\"K\n\027AlertCreateN"
    "otification\022\020\n\010alert_id\030\001 \002(\007\022\014\n\004name\030\002 "
    "\002(\014\022\020\n\010group_id\030\003 \002(\007\"=\n\027AlertModifyNoti"
    "fication\022\"\n\005alert\030\001 \002(\0132\023.app.terminal.A"
    "lert\"+\n\027AlertOveredNotification\022\020\n\010alert"
    "_id\030\001 \002(\007\"\264\001\n\024HistoryAlertsRequest\022\014\n\004na"
    "me\030\001 \001(\014\022\030\n\020create_time_from\030\002 \001(\t\022\026\n\016cr"
    "eate_time_to\030\003 \001(\t\022\027\n\017alram_time_from\030\004 "
    "\001(\t\022\025\n\ralram_time_to\030\005 \001(\t\022\026\n\016over_time_"
    "from\030\006 \001(\t\022\024\n\014over_time_to\030\007 \001(\t\"\261\001\n\014His"
    "toryAlert\022\n\n\002id\030\001 \002(\007\022\014\n\004name\030\002 \002(\014\022\'\n\005l"
    "evel\030\003 \001(\0162\030.app.terminal.AlertLevel\022\020\n\010"
    "describe\030\004 \001(\014\022\022\n\nalarm_time\030\005 \001(\t\022\020\n\010us"
    "e_cars\030\006 \001(\007\022\023\n\013create_time\030\007 \001(\t\022\021\n\tove"
    "r_time\030\010 \001(\t\"K\n\025HistoryAlertsResponse\0222\n"
    "\016history_alerts\030\001 \003(\0132\032.app.terminal.His"
    "toryAlert\"/\n\023HistoryAlertRequest\022\030\n\020hist"
    "ory_alert_id\030\001 \002(\007\"I\n\024HistoryAlertRespon"
    "se\0221\n\rhistory_alert\030\001 \002(\0132\032.app.terminal"
    ".HistoryAlert\"}\n\032HistoryAlertMessageRequ"
    "est\022\030\n\020history_alert_id\030\001 \002(\007\022\027\n\017from_me"
    "ssage_id\030\002 \001(\007\022\021\n\tfrom_time\030\003 \001(\t\022\031\n\021max"
    "_message_count\030\004 \002(\007\"\202\001\n\033HistoryAlertMes"
    "sageResponse\022\030\n\020history_alert_id\030\001 \002(\007\022,"
    "\n\010messages\030\002 \003(\0132\032.app.terminal.MediaMes"
    "sage\022\033\n\023leave_message_count\030\003 \002(\007\"\037\n\020Acc"
    "ountsResponse\022\013\n\003ids\030\001 \003(\007\"\034\n\016AccountReq"
    "uest\022\n\n\002id\030\001 \002(\007\";\n\017AccountResponse\022\n\n\002i"
    "d\030\001 \002(\007\022\014\n\004name\030\002 \002(\014\022\016\n\006number\030\003 \002(\t\"\226\001"
    "\n\025GroupSubscribeRequest\022\037\n\027participant_s"
    "ubscribing\030\001 \001(\010\022\033\n\023message_subscribing\030"
    "\002 \001(\010\022\020\n\010group_id\030\003 \001(\007\022\026\n\016effect_curren"
    "t\030\004 \001(\010\022\025\n\reffect_follow\030\005 \001(\010\"\261\010\n\007Reque"
    "st\022)\n\005login\030\001 \001(\0132\032.app.terminal.LoginRe"
    "quest\022B\n\022group_participants\030\002 \001(\0132&.app."
    "terminal.GroupParticipantsRequest\0228\n\rgro"
    "up_message\030\003 \001(\0132!.app.terminal.MediaMes"
    "sageRequest\0222\n\njoin_group\030\004 \001(\0132\036.app.te"
    "rminal.JoinGroupRequest\0228\n\rconnect_group"
    "\030\005 \001(\0132!.app.terminal.ConnectGroupReques"
    "t\022)\n\005speak\030\006 \001(\0132\032.app.terminal.SpeakReq"
    "uest\0226\n\014join_session\030\007 \001(\0132 .app.termina"
    "l.JoinSessionRequest\0228\n\rleave_session\030\010 "
    "\001(\0132!.app.terminal.LeaveSessionRequest\0228"
    "\n\rrelease_token\030\t \001(\0132!.app.terminal.Rel"
    "easeTokenRequest\0228\n\rappoint_speak\030\n \001(\0132"
    "!.app.terminal.AppointSpeakRequest\0226\n\014se"
    "nd_message\030\013 \001(\0132 .app.terminal.SendMess"
    "ageRequest\022B\n\022subscribe_location\030\014 \001(\0132&"
    ".app.terminal.SubscribeLocationRequest\022)"
    "\n\005alert\030\r \001(\0132\032.app.terminal.AlertReques"
    "t\022:\n\016history_alerts\030\016 \001(\0132\".app.terminal"
    ".HistoryAlertsRequest\0228\n\rhistory_alert\030\017"
    " \001(\0132!.app.terminal.HistoryAlertRequest\022"
    "G\n\025history_alert_message\030\020 \001(\0132(.app.ter"
    "minal.HistoryAlertMessageRequest\022-\n\007acco"
    "unt\030\021 \001(\0132\034.app.terminal.AccountRequest\022"
    "<\n\017group_subscribe\030\022 \001(\0132#.app.terminal."
    "GroupSubscribeRequest\022+\n\006groups\030\023 \001(\0132\033."
    "app.terminal.GroupsRequest\"\346\005\n\010Response\022"
    "\016\n\006result\030\001 \002(\010\022\025\n\rlast_response\030\002 \002(\010\022\026"
    "\n\016error_describe\030\003 \001(\014\022*\n\005login\030\004 \001(\0132\033."
    "app.terminal.LoginResponse\022,\n\006groups\030\005 \001"
    "(\0132\034.app.terminal.GroupsResponse\022C\n\022grou"
    "p_participants\030\006 \001(\0132\'.app.terminal.Grou"
    "pParticipantsResponse\0229\n\rgroup_message\030\007"
    " \001(\0132\".app.terminal.MediaMessageResponse"
    "\022C\n\022subscribe_location\030\010 \001(\0132\'.app.termi"
    "nal.SubscribeLocationResponse\022,\n\006alerts\030"
    "\t \001(\0132\034.app.terminal.AlertsResponse\022*\n\005a"
    "lert\030\n \001(\0132\033.app.terminal.AlertResponse\022"
    ";\n\016history_alerts\030\013 \001(\0132#.app.terminal.H"
    "istoryAlertsResponse\0229\n\rhistory_alert\030\014 "
    "\001(\0132\".app.terminal.HistoryAlertResponse\022"
    "H\n\025history_alert_message\030\r \001(\0132).app.ter"
    "minal.HistoryAlertMessageResponse\0220\n\010acc"
    "ounts\030\016 \001(\0132\036.app.terminal.AccountsRespo"
    "nse\022.\n\007account\030\017 \001(\0132\035.app.terminal.Acco"
    "untResponse\"\306\005\n\nIndication\022A\n\017register_s"
    "tatus\030\001 \001(\0132(.app.terminal.RegisterStatu"
    "sNotification\022;\n\014joined_group\030\002 \001(\0132%.ap"
    "p.terminal.JoinedGroupNotification\0229\n\013le"
    "ave_group\030\003 \001(\0132$.app.terminal.LeaveGrou"
    "pNotification\022H\n\023others_joined_group\030\004 \001"
    "(\0132+.app.terminal.OthersJoinedGroupNotif"
    "ication\022F\n\022others_leave_group\030\005 \001(\0132*.ap"
    "p.terminal.OthersLeaveGroupNotification\022"
    "=\n\rgroup_message\030\006 \001(\0132&.app.terminal.Me"
    "diaMessageNotification\022\?\n\016session_status"
    "\030\007 \001(\0132\'.app.terminal.SessionStatusNotif"
    "ication\0224\n\010location\030\010 \001(\0132\".app.terminal"
    ".LocationNotification\022;\n\014alert_create\030\t "
    "\001(\0132%.app.terminal.AlertCreateNotificati"
    "on\022;\n\014alert_modify\030\n \001(\0132%.app.terminal."
    "AlertModifyNotification\022;\n\014alert_overed\030"
    "\013 \001(\0132%.app.terminal.AlertOveredNotifica"
    "tion\"\324\001\n\007Message\022#\n\010msg_type\030\001 \002(\0162\021.app"
    ".terminal.MSG\022\020\n\010sequence\030\002 \002(\007\022\022\n\nsessi"
    "on_id\030\003 \001(\007\022&\n\007request\030\004 \001(\0132\025.app.termi"
    "nal.Request\022(\n\010response\030\005 \001(\0132\026.app.term"
    "inal.Response\022,\n\nindication\030\006 \001(\0132\030.app."
    "terminal.Indication*\363\014\n\003MSG\022\023\n\rLogin_Req"
    "uest\020\341\247\022\022\024\n\016Login_Response\020\342\247\022\022\024\n\016Logout"
    "_Request\020\343\247\022\022\025\n\017Logout_Response\020\344\247\022\022\027\n\021K"
    "eepalive_Request\020\345\247\022\022\030\n\022Keepalive_Respon"
    "se\020\346\247\022\022\024\n\016Groups_Request\020\347\247\022\022\025\n\017Groups_R"
    "esponse\020\350\247\022\022 \n\032Group_Participants_Reques"
    "t\020\351\247\022\022!\n\033Group_Participants_Response\020\352\247\022"
    "\022\033\n\025Media_Message_Request\020\353\247\022\022\034\n\026Media_M"
    "essage_Response\020\354\247\022\022\030\n\022Join_Group_Reques"
    "t\020\355\247\022\022\031\n\023Join_Group_Response\020\356\247\022\022\033\n\025Conn"
    "ect_Group_Request\020\357\247\022\022\034\n\026Connect_Group_R"
    "esponse\020\360\247\022\022\023\n\rSpeak_Request\020\361\247\022\022\024\n\016Spea"
    "k_Response\020\362\247\022\022\032\n\024Join_Session_Request\020\363"
    "\247\022\022\033\n\025Join_Session_Response\020\364\247\022\022\033\n\025Leave"
    "_Session_Request\020\365\247\022\022\034\n\026Leave_Session_Re"
    "sponse\020\366\247\022\022\033\n\025Release_Token_Request\020\367\247\022\022"
    "\034\n\026Release_Token_Response\020\370\247\022\022\033\n\025Appoint"
    "_Speak_Request\020\371\247\022\022\034\n\026Appoint_Speak_Resp"
    "onse\020\372\247\022\022\032\n\024Send_Message_Request\020\373\247\022\022\033\n\025"
    "Send_Message_Response\020\374\247\022\022 \n\032Subscribe_L"
    "ocation_Request\020\375\247\022\022!\n\033Subscribe_Locatio"
    "n_Response\020\376\247\022\022\024\n\016Alerts_Request\020\377\247\022\022\025\n\017"
    "Alerts_Response\020\200\250\022\022\023\n\rAlert_Request\020\201\250\022"
    "\022\024\n\016Alert_Response\020\202\250\022\022\034\n\026History_Alerts"
    "_Request\020\203\250\022\022\035\n\027History_Alerts_Response\020"
    "\204\250\022\022\033\n\025History_Alert_Request\020\205\250\022\022\034\n\026Hist"
    "ory_Alert_Response\020\206\250\022\022#\n\035History_Alert_"
    "Message_Request\020\207\250\022\022$\n\036History_Alert_Mes"
    "sage_Response\020\210\250\022\022\026\n\020Accounts_Request\020\211\250"
    "\022\022\027\n\021Accounts_Response\020\212\250\022\022\025\n\017Account_Re"
    "quest\020\213\250\022\022\026\n\020Account_Response\020\214\250\022\022\035\n\027Gro"
    "up_Subscribe_Request\020\215\250\022\022\036\n\030Group_Subscr"
    "ibe_Response\020\216\250\022\022\"\n\034Register_Status_Noti"
    "fication\020\361\365\022\022\037\n\031Joined_Group_Notificatio"
    "n\020\362\365\022\022\036\n\030Leave_Group_Notification\020\363\365\022\022&\n"
    " Others_Joined_Group_Notification\020\364\365\022\022%\n"
    "\037Others_Leave_Group_Notification\020\365\365\022\022 \n\032"
    "Media_Message_Notification\020\366\365\022\022!\n\033Sessio"
    "n_Status_Notification\020\367\365\022\022\033\n\025Location_No"
    "tification\020\370\365\022\022\037\n\031Alert_Create_Notificat"
    "ion\020\371\365\022\022\037\n\031Alert_Modify_Notification\020\372\365\022"
    "\022\037\n\031Alert_Overed_Notification\020\373\365\022*@\n\rCal"
    "lPrivilege\022\016\n\nCallForbid\020\000\022\017\n\013CallFreedo"
    "m\020\001\022\016\n\nCallPolicy\020\002*D\n\016TokenPrivilege\022\017\n"
    "\013TokenForbid\020\000\022\020\n\014TokenFreedom\020\001\022\017\n\013Toke"
    "nPolicy\020\002*F\n\rGpsReportMode\022\021\n\rGpsManualP"
    "ull\020\000\022\021\n\rGpsManualPush\020\001\022\017\n\013GpsAutoPush\020"
    "\002*)\n\016RegisterStatus\022\013\n\007OffLine\020\000\022\n\n\006OnLi"
    "ne\020\001*3\n\rSessionStatus\022\010\n\004IDLE\020\000\022\013\n\007InGro"
    "up\020\001\022\013\n\007Talking\020\002*K\n\nAlertLevel\022\014\n\010Exige"
    "ncy\020\000\022\016\n\nImportance\020\001\022\021\n\rSubordination\020\002"
    "\022\014\n\010Ordinary\020\003*@\n\014CustomStatus\022\013\n\007Standb"
    "y\020\000\022\010\n\004Duty\020\001\022\013\n\007Turnout\020\002\022\014\n\010Training\020\003", 9400);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "app.terminal.proto", &protobuf_RegisterTypes);
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResponse::default_instance_ = new LoginResponse();
  RegisterStatusNotification::default_instance_ = new RegisterStatusNotification();
  Group::default_instance_ = new Group();
  GroupsRequest::default_instance_ = new GroupsRequest();
  GroupsResponse::default_instance_ = new GroupsResponse();
  Participant::default_instance_ = new Participant();
  GroupParticipantsRequest::default_instance_ = new GroupParticipantsRequest();
  GroupParticipantsResponse::default_instance_ = new GroupParticipantsResponse();
  MediaMessageRequest::default_instance_ = new MediaMessageRequest();
  MediaMessage::default_instance_ = new MediaMessage();
  MediaMessageResponse::default_instance_ = new MediaMessageResponse();
  JoinedGroupNotification::default_instance_ = new JoinedGroupNotification();
  LeaveGroupNotification::default_instance_ = new LeaveGroupNotification();
  OthersJoinedGroupNotification::default_instance_ = new OthersJoinedGroupNotification();
  OthersLeaveGroupNotification::default_instance_ = new OthersLeaveGroupNotification();
  MediaMessageNotification::default_instance_ = new MediaMessageNotification();
  JoinGroupRequest::default_instance_ = new JoinGroupRequest();
  ConnectGroupRequest::default_instance_ = new ConnectGroupRequest();
  SessionStatusNotification::default_instance_ = new SessionStatusNotification();
  SpeakRequest::default_instance_ = new SpeakRequest();
  JoinSessionRequest::default_instance_ = new JoinSessionRequest();
  LeaveSessionRequest::default_instance_ = new LeaveSessionRequest();
  ReleaseTokenRequest::default_instance_ = new ReleaseTokenRequest();
  AppointSpeakRequest::default_instance_ = new AppointSpeakRequest();
  SendMessageRequest::default_instance_ = new SendMessageRequest();
  SubscribeLocationRequest::default_instance_ = new SubscribeLocationRequest();
  SubscribeLocationResponse::default_instance_ = new SubscribeLocationResponse();
  LocationNotification::default_instance_ = new LocationNotification();
  Alert::default_instance_ = new Alert();
  AlertsResponse::default_instance_ = new AlertsResponse();
  AlertRequest::default_instance_ = new AlertRequest();
  AlertResponse::default_instance_ = new AlertResponse();
  AlertCreateNotification::default_instance_ = new AlertCreateNotification();
  AlertModifyNotification::default_instance_ = new AlertModifyNotification();
  AlertOveredNotification::default_instance_ = new AlertOveredNotification();
  HistoryAlertsRequest::default_instance_ = new HistoryAlertsRequest();
  HistoryAlert::default_instance_ = new HistoryAlert();
  HistoryAlertsResponse::default_instance_ = new HistoryAlertsResponse();
  HistoryAlertRequest::default_instance_ = new HistoryAlertRequest();
  HistoryAlertResponse::default_instance_ = new HistoryAlertResponse();
  HistoryAlertMessageRequest::default_instance_ = new HistoryAlertMessageRequest();
  HistoryAlertMessageResponse::default_instance_ = new HistoryAlertMessageResponse();
  AccountsResponse::default_instance_ = new AccountsResponse();
  AccountRequest::default_instance_ = new AccountRequest();
  AccountResponse::default_instance_ = new AccountResponse();
  GroupSubscribeRequest::default_instance_ = new GroupSubscribeRequest();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  Indication::default_instance_ = new Indication();
  Message::default_instance_ = new Message();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  RegisterStatusNotification::default_instance_->InitAsDefaultInstance();
  Group::default_instance_->InitAsDefaultInstance();
  GroupsRequest::default_instance_->InitAsDefaultInstance();
  GroupsResponse::default_instance_->InitAsDefaultInstance();
  Participant::default_instance_->InitAsDefaultInstance();
  GroupParticipantsRequest::default_instance_->InitAsDefaultInstance();
  GroupParticipantsResponse::default_instance_->InitAsDefaultInstance();
  MediaMessageRequest::default_instance_->InitAsDefaultInstance();
  MediaMessage::default_instance_->InitAsDefaultInstance();
  MediaMessageResponse::default_instance_->InitAsDefaultInstance();
  JoinedGroupNotification::default_instance_->InitAsDefaultInstance();
  LeaveGroupNotification::default_instance_->InitAsDefaultInstance();
  OthersJoinedGroupNotification::default_instance_->InitAsDefaultInstance();
  OthersLeaveGroupNotification::default_instance_->InitAsDefaultInstance();
  MediaMessageNotification::default_instance_->InitAsDefaultInstance();
  JoinGroupRequest::default_instance_->InitAsDefaultInstance();
  ConnectGroupRequest::default_instance_->InitAsDefaultInstance();
  SessionStatusNotification::default_instance_->InitAsDefaultInstance();
  SpeakRequest::default_instance_->InitAsDefaultInstance();
  JoinSessionRequest::default_instance_->InitAsDefaultInstance();
  LeaveSessionRequest::default_instance_->InitAsDefaultInstance();
  ReleaseTokenRequest::default_instance_->InitAsDefaultInstance();
  AppointSpeakRequest::default_instance_->InitAsDefaultInstance();
  SendMessageRequest::default_instance_->InitAsDefaultInstance();
  SubscribeLocationRequest::default_instance_->InitAsDefaultInstance();
  SubscribeLocationResponse::default_instance_->InitAsDefaultInstance();
  LocationNotification::default_instance_->InitAsDefaultInstance();
  Alert::default_instance_->InitAsDefaultInstance();
  AlertsResponse::default_instance_->InitAsDefaultInstance();
  AlertRequest::default_instance_->InitAsDefaultInstance();
  AlertResponse::default_instance_->InitAsDefaultInstance();
  AlertCreateNotification::default_instance_->InitAsDefaultInstance();
  AlertModifyNotification::default_instance_->InitAsDefaultInstance();
  AlertOveredNotification::default_instance_->InitAsDefaultInstance();
  HistoryAlertsRequest::default_instance_->InitAsDefaultInstance();
  HistoryAlert::default_instance_->InitAsDefaultInstance();
  HistoryAlertsResponse::default_instance_->InitAsDefaultInstance();
  HistoryAlertRequest::default_instance_->InitAsDefaultInstance();
  HistoryAlertResponse::default_instance_->InitAsDefaultInstance();
  HistoryAlertMessageRequest::default_instance_->InitAsDefaultInstance();
  HistoryAlertMessageResponse::default_instance_->InitAsDefaultInstance();
  AccountsResponse::default_instance_->InitAsDefaultInstance();
  AccountRequest::default_instance_->InitAsDefaultInstance();
  AccountResponse::default_instance_->InitAsDefaultInstance();
  GroupSubscribeRequest::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Indication::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_app_2eterminal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_app_2eterminal_2eproto {
  StaticDescriptorInitializer_app_2eterminal_2eproto() {
    protobuf_AddDesc_app_2eterminal_2eproto();
  }
} static_descriptor_initializer_app_2eterminal_2eproto_;
const ::google::protobuf::EnumDescriptor* MSG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_descriptor_;
}
bool MSG_IsValid(int value) {
  switch(value) {
    case 300001:
    case 300002:
    case 300003:
    case 300004:
    case 300005:
    case 300006:
    case 300007:
    case 300008:
    case 300009:
    case 300010:
    case 300011:
    case 300012:
    case 300013:
    case 300014:
    case 300015:
    case 300016:
    case 300017:
    case 300018:
    case 300019:
    case 300020:
    case 300021:
    case 300022:
    case 300023:
    case 300024:
    case 300025:
    case 300026:
    case 300027:
    case 300028:
    case 300029:
    case 300030:
    case 300031:
    case 300032:
    case 300033:
    case 300034:
    case 300035:
    case 300036:
    case 300037:
    case 300038:
    case 300039:
    case 300040:
    case 300041:
    case 300042:
    case 300043:
    case 300044:
    case 300045:
    case 300046:
    case 310001:
    case 310002:
    case 310003:
    case 310004:
    case 310005:
    case 310006:
    case 310007:
    case 310008:
    case 310009:
    case 310010:
    case 310011:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CallPrivilege_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallPrivilege_descriptor_;
}
bool CallPrivilege_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TokenPrivilege_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenPrivilege_descriptor_;
}
bool TokenPrivilege_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GpsReportMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsReportMode_descriptor_;
}
bool GpsReportMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RegisterStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterStatus_descriptor_;
}
bool RegisterStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SessionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionStatus_descriptor_;
}
bool SessionStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AlertLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlertLevel_descriptor_;
}
bool AlertLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CustomStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustomStatus_descriptor_;
}
bool CustomStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kNumberFieldNumber;
const int LoginRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::kEmptyString) {
        number_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->number(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->number(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponse::kSipUriFieldNumber;
const int LoginResponse::kYourIdFieldNumber;
const int LoginResponse::kDisplayNameFieldNumber;
const int LoginResponse::kTalkPriorityFieldNumber;
const int LoginResponse::kCallPrivilegeFieldNumber;
const int LoginResponse::kTokenPrivilegeFieldNumber;
const int LoginResponse::kNumberFieldNumber;
const int LoginResponse::kTtlFieldNumber;
const int LoginResponse::kGpsReportModeFieldNumber;
const int LoginResponse::kUploadAddressFieldNumber;
const int LoginResponse::kSessionIdFieldNumber;
const int LoginResponse::kParticipantSubscribingFieldNumber;
const int LoginResponse::kMessageSubscribingFieldNumber;
const int LoginResponse::kGroupsHashFieldNumber;
const int LoginResponse::kAccountsHashFieldNumber;
const int LoginResponse::kUnjoinGroupsHashFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResponse::InitAsDefaultInstance() {
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResponse::SharedCtor() {
  _cached_size_ = 0;
  sip_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  your_id_ = 0u;
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  talk_priority_ = 0u;
  call_privilege_ = 0;
  token_privilege_ = 0;
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ttl_ = 0u;
  gps_report_mode_ = 0;
  upload_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = 0u;
  participant_subscribing_ = false;
  message_subscribing_ = false;
  groups_hash_ = 0u;
  accounts_hash_ = 0u;
  unjoin_groups_hash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (sip_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete sip_uri_;
  }
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (upload_address_ != &::google::protobuf::internal::kEmptyString) {
    delete upload_address_;
  }
  if (this != default_instance_) {
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New() const {
  return new LoginResponse;
}

void LoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sip_uri()) {
      if (sip_uri_ != &::google::protobuf::internal::kEmptyString) {
        sip_uri_->clear();
      }
    }
    your_id_ = 0u;
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::kEmptyString) {
        display_name_->clear();
      }
    }
    talk_priority_ = 0u;
    call_privilege_ = 0;
    token_privilege_ = 0;
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::kEmptyString) {
        number_->clear();
      }
    }
    ttl_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gps_report_mode_ = 0;
    if (has_upload_address()) {
      if (upload_address_ != &::google::protobuf::internal::kEmptyString) {
        upload_address_->clear();
      }
    }
    session_id_ = 0u;
    participant_subscribing_ = false;
    message_subscribing_ = false;
    groups_hash_ = 0u;
    accounts_hash_ = 0u;
    unjoin_groups_hash_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sip_uri = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sip_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sip_uri().data(), this->sip_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_your_id;
        break;
      }

      // required fixed32 your_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_your_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &your_id_)));
          set_has_your_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_display_name;
        break;
      }

      // optional bytes display_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_display_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_talk_priority;
        break;
      }

      // required fixed32 talk_priority = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_talk_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &talk_priority_)));
          set_has_talk_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_call_privilege;
        break;
      }

      // required .app.terminal.CallPrivilege call_privilege = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_privilege:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::terminal::CallPrivilege_IsValid(value)) {
            set_call_privilege(static_cast< ::app::terminal::CallPrivilege >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_token_privilege;
        break;
      }

      // required .app.terminal.TokenPrivilege token_privilege = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_privilege:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::terminal::TokenPrivilege_IsValid(value)) {
            set_token_privilege(static_cast< ::app::terminal::TokenPrivilege >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_number;
        break;
      }

      // required string number = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_ttl;
        break;
      }

      // required fixed32 ttl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gps_report_mode;
        break;
      }

      // required .app.terminal.GpsReportMode gps_report_mode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gps_report_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::terminal::GpsReportMode_IsValid(value)) {
            set_gps_report_mode(static_cast< ::app::terminal::GpsReportMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_upload_address;
        break;
      }

      // required string upload_address = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upload_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->upload_address().data(), this->upload_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_session_id;
        break;
      }

      // required fixed32 session_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_participant_subscribing;
        break;
      }

      // required bool participant_subscribing = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_participant_subscribing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &participant_subscribing_)));
          set_has_participant_subscribing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_message_subscribing;
        break;
      }

      // required bool message_subscribing = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_subscribing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &message_subscribing_)));
          set_has_message_subscribing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_groups_hash;
        break;
      }

      // required fixed32 groups_hash = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_groups_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &groups_hash_)));
          set_has_groups_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_accounts_hash;
        break;
      }

      // required fixed32 accounts_hash = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_accounts_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &accounts_hash_)));
          set_has_accounts_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_unjoin_groups_hash;
        break;
      }

      // required fixed32 unjoin_groups_hash = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_unjoin_groups_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &unjoin_groups_hash_)));
          set_has_unjoin_groups_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sip_uri = 1;
  if (has_sip_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sip_uri().data(), this->sip_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sip_uri(), output);
  }

  // required fixed32 your_id = 2;
  if (has_your_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->your_id(), output);
  }

  // optional bytes display_name = 3;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->display_name(), output);
  }

  // required fixed32 talk_priority = 4;
  if (has_talk_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->talk_priority(), output);
  }

  // required .app.terminal.CallPrivilege call_privilege = 5;
  if (has_call_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->call_privilege(), output);
  }

  // required .app.terminal.TokenPrivilege token_privilege = 6;
  if (has_token_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->token_privilege(), output);
  }

  // required string number = 7;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->number(), output);
  }

  // required fixed32 ttl = 8;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->ttl(), output);
  }

  // required .app.terminal.GpsReportMode gps_report_mode = 9;
  if (has_gps_report_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->gps_report_mode(), output);
  }

  // required string upload_address = 10;
  if (has_upload_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->upload_address().data(), this->upload_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->upload_address(), output);
  }

  // required fixed32 session_id = 11;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->session_id(), output);
  }

  // required bool participant_subscribing = 12;
  if (has_participant_subscribing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->participant_subscribing(), output);
  }

  // required bool message_subscribing = 13;
  if (has_message_subscribing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->message_subscribing(), output);
  }

  // required fixed32 groups_hash = 14;
  if (has_groups_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->groups_hash(), output);
  }

  // required fixed32 accounts_hash = 15;
  if (has_accounts_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(15, this->accounts_hash(), output);
  }

  // required fixed32 unjoin_groups_hash = 16;
  if (has_unjoin_groups_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(16, this->unjoin_groups_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sip_uri = 1;
  if (has_sip_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sip_uri().data(), this->sip_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sip_uri(), target);
  }

  // required fixed32 your_id = 2;
  if (has_your_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->your_id(), target);
  }

  // optional bytes display_name = 3;
  if (has_display_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->display_name(), target);
  }

  // required fixed32 talk_priority = 4;
  if (has_talk_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->talk_priority(), target);
  }

  // required .app.terminal.CallPrivilege call_privilege = 5;
  if (has_call_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->call_privilege(), target);
  }

  // required .app.terminal.TokenPrivilege token_privilege = 6;
  if (has_token_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->token_privilege(), target);
  }

  // required string number = 7;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->number(), target);
  }

  // required fixed32 ttl = 8;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->ttl(), target);
  }

  // required .app.terminal.GpsReportMode gps_report_mode = 9;
  if (has_gps_report_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->gps_report_mode(), target);
  }

  // required string upload_address = 10;
  if (has_upload_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->upload_address().data(), this->upload_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->upload_address(), target);
  }

  // required fixed32 session_id = 11;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->session_id(), target);
  }

  // required bool participant_subscribing = 12;
  if (has_participant_subscribing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->participant_subscribing(), target);
  }

  // required bool message_subscribing = 13;
  if (has_message_subscribing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->message_subscribing(), target);
  }

  // required fixed32 groups_hash = 14;
  if (has_groups_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->groups_hash(), target);
  }

  // required fixed32 accounts_hash = 15;
  if (has_accounts_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(15, this->accounts_hash(), target);
  }

  // required fixed32 unjoin_groups_hash = 16;
  if (has_unjoin_groups_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(16, this->unjoin_groups_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sip_uri = 1;
    if (has_sip_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sip_uri());
    }

    // required fixed32 your_id = 2;
    if (has_your_id()) {
      total_size += 1 + 4;
    }

    // optional bytes display_name = 3;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->display_name());
    }

    // required fixed32 talk_priority = 4;
    if (has_talk_priority()) {
      total_size += 1 + 4;
    }

    // required .app.terminal.CallPrivilege call_privilege = 5;
    if (has_call_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->call_privilege());
    }

    // required .app.terminal.TokenPrivilege token_privilege = 6;
    if (has_token_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->token_privilege());
    }

    // required string number = 7;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

    // required fixed32 ttl = 8;
    if (has_ttl()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .app.terminal.GpsReportMode gps_report_mode = 9;
    if (has_gps_report_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gps_report_mode());
    }

    // required string upload_address = 10;
    if (has_upload_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upload_address());
    }

    // required fixed32 session_id = 11;
    if (has_session_id()) {
      total_size += 1 + 4;
    }

    // required bool participant_subscribing = 12;
    if (has_participant_subscribing()) {
      total_size += 1 + 1;
    }

    // required bool message_subscribing = 13;
    if (has_message_subscribing()) {
      total_size += 1 + 1;
    }

    // required fixed32 groups_hash = 14;
    if (has_groups_hash()) {
      total_size += 1 + 4;
    }

    // required fixed32 accounts_hash = 15;
    if (has_accounts_hash()) {
      total_size += 1 + 4;
    }

    // required fixed32 unjoin_groups_hash = 16;
    if (has_unjoin_groups_hash()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sip_uri()) {
      set_sip_uri(from.sip_uri());
    }
    if (from.has_your_id()) {
      set_your_id(from.your_id());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
    if (from.has_talk_priority()) {
      set_talk_priority(from.talk_priority());
    }
    if (from.has_call_privilege()) {
      set_call_privilege(from.call_privilege());
    }
    if (from.has_token_privilege()) {
      set_token_privilege(from.token_privilege());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gps_report_mode()) {
      set_gps_report_mode(from.gps_report_mode());
    }
    if (from.has_upload_address()) {
      set_upload_address(from.upload_address());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_participant_subscribing()) {
      set_participant_subscribing(from.participant_subscribing());
    }
    if (from.has_message_subscribing()) {
      set_message_subscribing(from.message_subscribing());
    }
    if (from.has_groups_hash()) {
      set_groups_hash(from.groups_hash());
    }
    if (from.has_accounts_hash()) {
      set_accounts_hash(from.accounts_hash());
    }
    if (from.has_unjoin_groups_hash()) {
      set_unjoin_groups_hash(from.unjoin_groups_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000fffb) != 0x0000fffb) return false;

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other != this) {
    std::swap(sip_uri_, other->sip_uri_);
    std::swap(your_id_, other->your_id_);
    std::swap(display_name_, other->display_name_);
    std::swap(talk_priority_, other->talk_priority_);
    std::swap(call_privilege_, other->call_privilege_);
    std::swap(token_privilege_, other->token_privilege_);
    std::swap(number_, other->number_);
    std::swap(ttl_, other->ttl_);
    std::swap(gps_report_mode_, other->gps_report_mode_);
    std::swap(upload_address_, other->upload_address_);
    std::swap(session_id_, other->session_id_);
    std::swap(participant_subscribing_, other->participant_subscribing_);
    std::swap(message_subscribing_, other->message_subscribing_);
    std::swap(groups_hash_, other->groups_hash_);
    std::swap(accounts_hash_, other->accounts_hash_);
    std::swap(unjoin_groups_hash_, other->unjoin_groups_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterStatusNotification::kSipStatusFieldNumber;
const int RegisterStatusNotification::kCustomStatusFieldNumber;
#endif  // !_MSC_VER

RegisterStatusNotification::RegisterStatusNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterStatusNotification::InitAsDefaultInstance() {
}

RegisterStatusNotification::RegisterStatusNotification(const RegisterStatusNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterStatusNotification::SharedCtor() {
  _cached_size_ = 0;
  sip_status_ = 0;
  custom_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterStatusNotification::~RegisterStatusNotification() {
  SharedDtor();
}

void RegisterStatusNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterStatusNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterStatusNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterStatusNotification_descriptor_;
}

const RegisterStatusNotification& RegisterStatusNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

RegisterStatusNotification* RegisterStatusNotification::default_instance_ = NULL;

RegisterStatusNotification* RegisterStatusNotification::New() const {
  return new RegisterStatusNotification;
}

void RegisterStatusNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sip_status_ = 0;
    custom_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterStatusNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.terminal.RegisterStatus sip_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::terminal::RegisterStatus_IsValid(value)) {
            set_sip_status(static_cast< ::app::terminal::RegisterStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_custom_status;
        break;
      }

      // optional .app.terminal.CustomStatus custom_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::terminal::CustomStatus_IsValid(value)) {
            set_custom_status(static_cast< ::app::terminal::CustomStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterStatusNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.terminal.RegisterStatus sip_status = 1;
  if (has_sip_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sip_status(), output);
  }

  // optional .app.terminal.CustomStatus custom_status = 2;
  if (has_custom_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->custom_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterStatusNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.terminal.RegisterStatus sip_status = 1;
  if (has_sip_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sip_status(), target);
  }

  // optional .app.terminal.CustomStatus custom_status = 2;
  if (has_custom_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->custom_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterStatusNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.terminal.RegisterStatus sip_status = 1;
    if (has_sip_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sip_status());
    }

    // optional .app.terminal.CustomStatus custom_status = 2;
    if (has_custom_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->custom_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterStatusNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterStatusNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterStatusNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterStatusNotification::MergeFrom(const RegisterStatusNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sip_status()) {
      set_sip_status(from.sip_status());
    }
    if (from.has_custom_status()) {
      set_custom_status(from.custom_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterStatusNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterStatusNotification::CopyFrom(const RegisterStatusNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterStatusNotification::IsInitialized() const {

  return true;
}

void RegisterStatusNotification::Swap(RegisterStatusNotification* other) {
  if (other != this) {
    std::swap(sip_status_, other->sip_status_);
    std::swap(custom_status_, other->custom_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterStatusNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterStatusNotification_descriptor_;
  metadata.reflection = RegisterStatusNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Group::kIdFieldNumber;
const int Group::kNameFieldNumber;
const int Group::kNumberFieldNumber;
const int Group::kCallPrivilegeFieldNumber;
const int Group::kTokenPrivilegeFieldNumber;
const int Group::kParticipantSubscribingFieldNumber;
const int Group::kMessageSubscribingFieldNumber;
const int Group::kParticipantsHashFieldNumber;
#endif  // !_MSC_VER

Group::Group()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Group::InitAsDefaultInstance() {
}

Group::Group(const Group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Group::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  call_privilege_ = 0;
  token_privilege_ = 0;
  participant_subscribing_ = false;
  message_subscribing_ = false;
  participants_hash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Group::~Group() {
  SharedDtor();
}

void Group::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (this != default_instance_) {
  }
}

void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Group_descriptor_;
}

const Group& Group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

Group* Group::default_instance_ = NULL;

Group* Group::New() const {
  return new Group;
}

void Group::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::kEmptyString) {
        number_->clear();
      }
    }
    call_privilege_ = 0;
    token_privilege_ = 0;
    participant_subscribing_ = false;
    message_subscribing_ = false;
    participants_hash_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_number;
        break;
      }

      // optional string number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_call_privilege;
        break;
      }

      // optional .app.terminal.CallPrivilege call_privilege = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_privilege:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::terminal::CallPrivilege_IsValid(value)) {
            set_call_privilege(static_cast< ::app::terminal::CallPrivilege >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_token_privilege;
        break;
      }

      // optional .app.terminal.TokenPrivilege token_privilege = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_privilege:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::terminal::TokenPrivilege_IsValid(value)) {
            set_token_privilege(static_cast< ::app::terminal::TokenPrivilege >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_participant_subscribing;
        break;
      }

      // optional bool participant_subscribing = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_participant_subscribing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &participant_subscribing_)));
          set_has_participant_subscribing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_message_subscribing;
        break;
      }

      // optional bool message_subscribing = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_subscribing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &message_subscribing_)));
          set_has_message_subscribing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_participants_hash;
        break;
      }

      // optional fixed32 participants_hash = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_participants_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &participants_hash_)));
          set_has_participants_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional string number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->number(), output);
  }

  // optional .app.terminal.CallPrivilege call_privilege = 4;
  if (has_call_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->call_privilege(), output);
  }

  // optional .app.terminal.TokenPrivilege token_privilege = 5;
  if (has_token_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->token_privilege(), output);
  }

  // optional bool participant_subscribing = 6;
  if (has_participant_subscribing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->participant_subscribing(), output);
  }

  // optional bool message_subscribing = 7;
  if (has_message_subscribing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->message_subscribing(), output);
  }

  // optional fixed32 participants_hash = 8;
  if (has_participants_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->participants_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional string number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->number(), target);
  }

  // optional .app.terminal.CallPrivilege call_privilege = 4;
  if (has_call_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->call_privilege(), target);
  }

  // optional .app.terminal.TokenPrivilege token_privilege = 5;
  if (has_token_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->token_privilege(), target);
  }

  // optional bool participant_subscribing = 6;
  if (has_participant_subscribing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->participant_subscribing(), target);
  }

  // optional bool message_subscribing = 7;
  if (has_message_subscribing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->message_subscribing(), target);
  }

  // optional fixed32 participants_hash = 8;
  if (has_participants_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->participants_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Group::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional string number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

    // optional .app.terminal.CallPrivilege call_privilege = 4;
    if (has_call_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->call_privilege());
    }

    // optional .app.terminal.TokenPrivilege token_privilege = 5;
    if (has_token_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->token_privilege());
    }

    // optional bool participant_subscribing = 6;
    if (has_participant_subscribing()) {
      total_size += 1 + 1;
    }

    // optional bool message_subscribing = 7;
    if (has_message_subscribing()) {
      total_size += 1 + 1;
    }

    // optional fixed32 participants_hash = 8;
    if (has_participants_hash()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_call_privilege()) {
      set_call_privilege(from.call_privilege());
    }
    if (from.has_token_privilege()) {
      set_token_privilege(from.token_privilege());
    }
    if (from.has_participant_subscribing()) {
      set_participant_subscribing(from.participant_subscribing());
    }
    if (from.has_message_subscribing()) {
      set_message_subscribing(from.message_subscribing());
    }
    if (from.has_participants_hash()) {
      set_participants_hash(from.participants_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Group::Swap(Group* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(number_, other->number_);
    std::swap(call_privilege_, other->call_privilege_);
    std::swap(token_privilege_, other->token_privilege_);
    std::swap(participant_subscribing_, other->participant_subscribing_);
    std::swap(message_subscribing_, other->message_subscribing_);
    std::swap(participants_hash_, other->participants_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Group_descriptor_;
  metadata.reflection = Group_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupsRequest::kGetJoinedGroupsFieldNumber;
const int GroupsRequest::kGetUnjoinedGroupsFieldNumber;
#endif  // !_MSC_VER

GroupsRequest::GroupsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupsRequest::InitAsDefaultInstance() {
}

GroupsRequest::GroupsRequest(const GroupsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupsRequest::SharedCtor() {
  _cached_size_ = 0;
  get_joined_groups_ = false;
  get_unjoined_groups_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupsRequest::~GroupsRequest() {
  SharedDtor();
}

void GroupsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupsRequest_descriptor_;
}

const GroupsRequest& GroupsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

GroupsRequest* GroupsRequest::default_instance_ = NULL;

GroupsRequest* GroupsRequest::New() const {
  return new GroupsRequest;
}

void GroupsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    get_joined_groups_ = false;
    get_unjoined_groups_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool get_joined_groups = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_joined_groups_)));
          set_has_get_joined_groups();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_unjoined_groups;
        break;
      }

      // required bool get_unjoined_groups = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_unjoined_groups:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_unjoined_groups_)));
          set_has_get_unjoined_groups();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool get_joined_groups = 1;
  if (has_get_joined_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->get_joined_groups(), output);
  }

  // required bool get_unjoined_groups = 2;
  if (has_get_unjoined_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->get_unjoined_groups(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool get_joined_groups = 1;
  if (has_get_joined_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->get_joined_groups(), target);
  }

  // required bool get_unjoined_groups = 2;
  if (has_get_unjoined_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->get_unjoined_groups(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool get_joined_groups = 1;
    if (has_get_joined_groups()) {
      total_size += 1 + 1;
    }

    // required bool get_unjoined_groups = 2;
    if (has_get_unjoined_groups()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupsRequest::MergeFrom(const GroupsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_get_joined_groups()) {
      set_get_joined_groups(from.get_joined_groups());
    }
    if (from.has_get_unjoined_groups()) {
      set_get_unjoined_groups(from.get_unjoined_groups());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupsRequest::CopyFrom(const GroupsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupsRequest::Swap(GroupsRequest* other) {
  if (other != this) {
    std::swap(get_joined_groups_, other->get_joined_groups_);
    std::swap(get_unjoined_groups_, other->get_unjoined_groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupsRequest_descriptor_;
  metadata.reflection = GroupsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupsResponse::kJoinedGroupsFieldNumber;
const int GroupsResponse::kUnjoinGroupsFieldNumber;
#endif  // !_MSC_VER

GroupsResponse::GroupsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupsResponse::InitAsDefaultInstance() {
}

GroupsResponse::GroupsResponse(const GroupsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupsResponse::~GroupsResponse() {
  SharedDtor();
}

void GroupsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupsResponse_descriptor_;
}

const GroupsResponse& GroupsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

GroupsResponse* GroupsResponse::default_instance_ = NULL;

GroupsResponse* GroupsResponse::New() const {
  return new GroupsResponse;
}

void GroupsResponse::Clear() {
  joined_groups_.Clear();
  unjoin_groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.terminal.Group joined_groups = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_joined_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_joined_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_joined_groups;
        if (input->ExpectTag(18)) goto parse_unjoin_groups;
        break;
      }

      // repeated .app.terminal.Group unjoin_groups = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unjoin_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unjoin_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unjoin_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.terminal.Group joined_groups = 1;
  for (int i = 0; i < this->joined_groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->joined_groups(i), output);
  }

  // repeated .app.terminal.Group unjoin_groups = 2;
  for (int i = 0; i < this->unjoin_groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unjoin_groups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.terminal.Group joined_groups = 1;
  for (int i = 0; i < this->joined_groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->joined_groups(i), target);
  }

  // repeated .app.terminal.Group unjoin_groups = 2;
  for (int i = 0; i < this->unjoin_groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unjoin_groups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .app.terminal.Group joined_groups = 1;
  total_size += 1 * this->joined_groups_size();
  for (int i = 0; i < this->joined_groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->joined_groups(i));
  }

  // repeated .app.terminal.Group unjoin_groups = 2;
  total_size += 1 * this->unjoin_groups_size();
  for (int i = 0; i < this->unjoin_groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unjoin_groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupsResponse::MergeFrom(const GroupsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  joined_groups_.MergeFrom(from.joined_groups_);
  unjoin_groups_.MergeFrom(from.unjoin_groups_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupsResponse::CopyFrom(const GroupsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupsResponse::IsInitialized() const {

  for (int i = 0; i < joined_groups_size(); i++) {
    if (!this->joined_groups(i).IsInitialized()) return false;
  }
  for (int i = 0; i < unjoin_groups_size(); i++) {
    if (!this->unjoin_groups(i).IsInitialized()) return false;
  }
  return true;
}

void GroupsResponse::Swap(GroupsResponse* other) {
  if (other != this) {
    joined_groups_.Swap(&other->joined_groups_);
    unjoin_groups_.Swap(&other->unjoin_groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupsResponse_descriptor_;
  metadata.reflection = GroupsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Participant::kAccountIdFieldNumber;
const int Participant::kAccountNameFieldNumber;
const int Participant::kTalkPriorityFieldNumber;
const int Participant::kStatusFieldNumber;
#endif  // !_MSC_VER

Participant::Participant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Participant::InitAsDefaultInstance() {
}

Participant::Participant(const Participant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Participant::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  talk_priority_ = 0u;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Participant::~Participant() {
  SharedDtor();
}

void Participant::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (this != default_instance_) {
  }
}

void Participant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Participant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Participant_descriptor_;
}

const Participant& Participant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

Participant* Participant::default_instance_ = NULL;

Participant* Participant::New() const {
  return new Participant;
}

void Participant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    talk_priority_ = 0u;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Participant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_name;
        break;
      }

      // required bytes account_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_talk_priority;
        break;
      }

      // required fixed32 talk_priority = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_talk_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &talk_priority_)));
          set_has_talk_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required .app.terminal.SessionStatus status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::terminal::SessionStatus_IsValid(value)) {
            set_status(static_cast< ::app::terminal::SessionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Participant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->account_id(), output);
  }

  // required bytes account_name = 2;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->account_name(), output);
  }

  // required fixed32 talk_priority = 3;
  if (has_talk_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->talk_priority(), output);
  }

  // required .app.terminal.SessionStatus status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Participant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->account_id(), target);
  }

  // required bytes account_name = 2;
  if (has_account_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account_name(), target);
  }

  // required fixed32 talk_priority = 3;
  if (has_talk_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->talk_priority(), target);
  }

  // required .app.terminal.SessionStatus status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Participant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 + 4;
    }

    // required bytes account_name = 2;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account_name());
    }

    // required fixed32 talk_priority = 3;
    if (has_talk_priority()) {
      total_size += 1 + 4;
    }

    // required .app.terminal.SessionStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Participant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Participant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Participant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Participant::MergeFrom(const Participant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_talk_priority()) {
      set_talk_priority(from.talk_priority());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Participant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Participant::CopyFrom(const Participant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Participant::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Participant::Swap(Participant* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(account_name_, other->account_name_);
    std::swap(talk_priority_, other->talk_priority_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Participant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Participant_descriptor_;
  metadata.reflection = Participant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupParticipantsRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GroupParticipantsRequest::GroupParticipantsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupParticipantsRequest::InitAsDefaultInstance() {
}

GroupParticipantsRequest::GroupParticipantsRequest(const GroupParticipantsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupParticipantsRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupParticipantsRequest::~GroupParticipantsRequest() {
  SharedDtor();
}

void GroupParticipantsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupParticipantsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupParticipantsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupParticipantsRequest_descriptor_;
}

const GroupParticipantsRequest& GroupParticipantsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

GroupParticipantsRequest* GroupParticipantsRequest::default_instance_ = NULL;

GroupParticipantsRequest* GroupParticipantsRequest::New() const {
  return new GroupParticipantsRequest;
}

void GroupParticipantsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupParticipantsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupParticipantsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupParticipantsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupParticipantsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupParticipantsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupParticipantsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupParticipantsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupParticipantsRequest::MergeFrom(const GroupParticipantsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupParticipantsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupParticipantsRequest::CopyFrom(const GroupParticipantsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupParticipantsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupParticipantsRequest::Swap(GroupParticipantsRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupParticipantsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupParticipantsRequest_descriptor_;
  metadata.reflection = GroupParticipantsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupParticipantsResponse::kGroupIdFieldNumber;
const int GroupParticipantsResponse::kParticipantsFieldNumber;
#endif  // !_MSC_VER

GroupParticipantsResponse::GroupParticipantsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupParticipantsResponse::InitAsDefaultInstance() {
}

GroupParticipantsResponse::GroupParticipantsResponse(const GroupParticipantsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupParticipantsResponse::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupParticipantsResponse::~GroupParticipantsResponse() {
  SharedDtor();
}

void GroupParticipantsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupParticipantsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupParticipantsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupParticipantsResponse_descriptor_;
}

const GroupParticipantsResponse& GroupParticipantsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

GroupParticipantsResponse* GroupParticipantsResponse::default_instance_ = NULL;

GroupParticipantsResponse* GroupParticipantsResponse::New() const {
  return new GroupParticipantsResponse;
}

void GroupParticipantsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  participants_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupParticipantsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_participants;
        break;
      }

      // repeated .app.terminal.Participant participants = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_participants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_participants()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_participants;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupParticipantsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  // repeated .app.terminal.Participant participants = 2;
  for (int i = 0; i < this->participants_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->participants(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupParticipantsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  // repeated .app.terminal.Participant participants = 2;
  for (int i = 0; i < this->participants_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->participants(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupParticipantsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  // repeated .app.terminal.Participant participants = 2;
  total_size += 1 * this->participants_size();
  for (int i = 0; i < this->participants_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->participants(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupParticipantsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupParticipantsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupParticipantsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupParticipantsResponse::MergeFrom(const GroupParticipantsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  participants_.MergeFrom(from.participants_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupParticipantsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupParticipantsResponse::CopyFrom(const GroupParticipantsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupParticipantsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < participants_size(); i++) {
    if (!this->participants(i).IsInitialized()) return false;
  }
  return true;
}

void GroupParticipantsResponse::Swap(GroupParticipantsResponse* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    participants_.Swap(&other->participants_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupParticipantsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupParticipantsResponse_descriptor_;
  metadata.reflection = GroupParticipantsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaMessageRequest::kIdFieldNumber;
const int MediaMessageRequest::kFromTimestampFieldNumber;
const int MediaMessageRequest::kFromMessageIdFieldNumber;
const int MediaMessageRequest::kMaxMessageCountFieldNumber;
#endif  // !_MSC_VER

MediaMessageRequest::MediaMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaMessageRequest::InitAsDefaultInstance() {
}

MediaMessageRequest::MediaMessageRequest(const MediaMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  from_timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_message_id_ = 0u;
  max_message_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaMessageRequest::~MediaMessageRequest() {
  SharedDtor();
}

void MediaMessageRequest::SharedDtor() {
  if (from_timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete from_timestamp_;
  }
  if (this != default_instance_) {
  }
}

void MediaMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaMessageRequest_descriptor_;
}

const MediaMessageRequest& MediaMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

MediaMessageRequest* MediaMessageRequest::default_instance_ = NULL;

MediaMessageRequest* MediaMessageRequest::New() const {
  return new MediaMessageRequest;
}

void MediaMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_from_timestamp()) {
      if (from_timestamp_ != &::google::protobuf::internal::kEmptyString) {
        from_timestamp_->clear();
      }
    }
    from_message_id_ = 0u;
    max_message_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from_timestamp;
        break;
      }

      // optional string from_timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_timestamp().data(), this->from_timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_from_message_id;
        break;
      }

      // optional fixed32 from_message_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_message_id_)));
          set_has_from_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_max_message_count;
        break;
      }

      // required fixed32 max_message_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &max_message_count_)));
          set_has_max_message_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // optional string from_timestamp = 2;
  if (has_from_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_timestamp().data(), this->from_timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->from_timestamp(), output);
  }

  // optional fixed32 from_message_id = 3;
  if (has_from_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->from_message_id(), output);
  }

  // required fixed32 max_message_count = 4;
  if (has_max_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->max_message_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // optional string from_timestamp = 2;
  if (has_from_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_timestamp().data(), this->from_timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from_timestamp(), target);
  }

  // optional fixed32 from_message_id = 3;
  if (has_from_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->from_message_id(), target);
  }

  // required fixed32 max_message_count = 4;
  if (has_max_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->max_message_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // optional string from_timestamp = 2;
    if (has_from_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_timestamp());
    }

    // optional fixed32 from_message_id = 3;
    if (has_from_message_id()) {
      total_size += 1 + 4;
    }

    // required fixed32 max_message_count = 4;
    if (has_max_message_count()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaMessageRequest::MergeFrom(const MediaMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_from_timestamp()) {
      set_from_timestamp(from.from_timestamp());
    }
    if (from.has_from_message_id()) {
      set_from_message_id(from.from_message_id());
    }
    if (from.has_max_message_count()) {
      set_max_message_count(from.max_message_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaMessageRequest::CopyFrom(const MediaMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void MediaMessageRequest::Swap(MediaMessageRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(from_timestamp_, other->from_timestamp_);
    std::swap(from_message_id_, other->from_message_id_);
    std::swap(max_message_count_, other->max_message_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaMessageRequest_descriptor_;
  metadata.reflection = MediaMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaMessage::kIdFieldNumber;
const int MediaMessage::kSenderFieldNumber;
const int MediaMessage::kTextFieldNumber;
const int MediaMessage::kPictureUriFieldNumber;
const int MediaMessage::kAudioUriFieldNumber;
const int MediaMessage::kAudioLengthFieldNumber;
const int MediaMessage::kVideoUriFieldNumber;
const int MediaMessage::kVideoLengthFieldNumber;
const int MediaMessage::kTimestampFieldNumber;
#endif  // !_MSC_VER

MediaMessage::MediaMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaMessage::InitAsDefaultInstance() {
}

MediaMessage::MediaMessage(const MediaMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picture_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  audio_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  audio_length_ = 0u;
  video_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  video_length_ = 0u;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaMessage::~MediaMessage() {
  SharedDtor();
}

void MediaMessage::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (picture_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete picture_uri_;
  }
  if (audio_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete audio_uri_;
  }
  if (video_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete video_uri_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void MediaMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaMessage_descriptor_;
}

const MediaMessage& MediaMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

MediaMessage* MediaMessage::default_instance_ = NULL;

MediaMessage* MediaMessage::New() const {
  return new MediaMessage;
}

void MediaMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_picture_uri()) {
      if (picture_uri_ != &::google::protobuf::internal::kEmptyString) {
        picture_uri_->clear();
      }
    }
    if (has_audio_uri()) {
      if (audio_uri_ != &::google::protobuf::internal::kEmptyString) {
        audio_uri_->clear();
      }
    }
    audio_length_ = 0u;
    if (has_video_uri()) {
      if (video_uri_ != &::google::protobuf::internal::kEmptyString) {
        video_uri_->clear();
      }
    }
    video_length_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sender;
        break;
      }

      // required bytes sender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional bytes text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_picture_uri;
        break;
      }

      // optional string picture_uri = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picture_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picture_uri().data(), this->picture_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_audio_uri;
        break;
      }

      // optional string audio_uri = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audio_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audio_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->audio_uri().data(), this->audio_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_audio_length;
        break;
      }

      // optional fixed32 audio_length = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_audio_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &audio_length_)));
          set_has_audio_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_video_uri;
        break;
      }

      // optional string video_uri = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->video_uri().data(), this->video_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_video_length;
        break;
      }

      // optional fixed32 video_length = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_video_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &video_length_)));
          set_has_video_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // required bytes sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sender(), output);
  }

  // optional bytes text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->text(), output);
  }

  // optional string picture_uri = 4;
  if (has_picture_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_uri().data(), this->picture_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->picture_uri(), output);
  }

  // optional string audio_uri = 5;
  if (has_audio_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audio_uri().data(), this->audio_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->audio_uri(), output);
  }

  // optional fixed32 audio_length = 6;
  if (has_audio_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->audio_length(), output);
  }

  // optional string video_uri = 7;
  if (has_video_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->video_uri().data(), this->video_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->video_uri(), output);
  }

  // optional fixed32 video_length = 8;
  if (has_video_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->video_length(), output);
  }

  // optional string timestamp = 9;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // required bytes sender = 2;
  if (has_sender()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sender(), target);
  }

  // optional bytes text = 3;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->text(), target);
  }

  // optional string picture_uri = 4;
  if (has_picture_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_uri().data(), this->picture_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->picture_uri(), target);
  }

  // optional string audio_uri = 5;
  if (has_audio_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audio_uri().data(), this->audio_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->audio_uri(), target);
  }

  // optional fixed32 audio_length = 6;
  if (has_audio_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->audio_length(), target);
  }

  // optional string video_uri = 7;
  if (has_video_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->video_uri().data(), this->video_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->video_uri(), target);
  }

  // optional fixed32 video_length = 8;
  if (has_video_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->video_length(), target);
  }

  // optional string timestamp = 9;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required bytes sender = 2;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sender());
    }

    // optional bytes text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

    // optional string picture_uri = 4;
    if (has_picture_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picture_uri());
    }

    // optional string audio_uri = 5;
    if (has_audio_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audio_uri());
    }

    // optional fixed32 audio_length = 6;
    if (has_audio_length()) {
      total_size += 1 + 4;
    }

    // optional string video_uri = 7;
    if (has_video_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_uri());
    }

    // optional fixed32 video_length = 8;
    if (has_video_length()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string timestamp = 9;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaMessage::MergeFrom(const MediaMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_picture_uri()) {
      set_picture_uri(from.picture_uri());
    }
    if (from.has_audio_uri()) {
      set_audio_uri(from.audio_uri());
    }
    if (from.has_audio_length()) {
      set_audio_length(from.audio_length());
    }
    if (from.has_video_uri()) {
      set_video_uri(from.video_uri());
    }
    if (from.has_video_length()) {
      set_video_length(from.video_length());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaMessage::CopyFrom(const MediaMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MediaMessage::Swap(MediaMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sender_, other->sender_);
    std::swap(text_, other->text_);
    std::swap(picture_uri_, other->picture_uri_);
    std::swap(audio_uri_, other->audio_uri_);
    std::swap(audio_length_, other->audio_length_);
    std::swap(video_uri_, other->video_uri_);
    std::swap(video_length_, other->video_length_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaMessage_descriptor_;
  metadata.reflection = MediaMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaMessageResponse::kGroupIdFieldNumber;
const int MediaMessageResponse::kMessagesFieldNumber;
const int MediaMessageResponse::kLeaveMessageCountFieldNumber;
#endif  // !_MSC_VER

MediaMessageResponse::MediaMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaMessageResponse::InitAsDefaultInstance() {
}

MediaMessageResponse::MediaMessageResponse(const MediaMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  leave_message_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaMessageResponse::~MediaMessageResponse() {
  SharedDtor();
}

void MediaMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MediaMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaMessageResponse_descriptor_;
}

const MediaMessageResponse& MediaMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

MediaMessageResponse* MediaMessageResponse::default_instance_ = NULL;

MediaMessageResponse* MediaMessageResponse::New() const {
  return new MediaMessageResponse;
}

void MediaMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    leave_message_count_ = 0u;
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        break;
      }

      // repeated .app.terminal.MediaMessage messages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        if (input->ExpectTag(29)) goto parse_leave_message_count;
        break;
      }

      // required fixed32 leave_message_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leave_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &leave_message_count_)));
          set_has_leave_message_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  // repeated .app.terminal.MediaMessage messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->messages(i), output);
  }

  // required fixed32 leave_message_count = 3;
  if (has_leave_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->leave_message_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  // repeated .app.terminal.MediaMessage messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->messages(i), target);
  }

  // required fixed32 leave_message_count = 3;
  if (has_leave_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->leave_message_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

    // required fixed32 leave_message_count = 3;
    if (has_leave_message_count()) {
      total_size += 1 + 4;
    }

  }
  // repeated .app.terminal.MediaMessage messages = 2;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaMessageResponse::MergeFrom(const MediaMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_leave_message_count()) {
      set_leave_message_count(from.leave_message_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaMessageResponse::CopyFrom(const MediaMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < messages_size(); i++) {
    if (!this->messages(i).IsInitialized()) return false;
  }
  return true;
}

void MediaMessageResponse::Swap(MediaMessageResponse* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    messages_.Swap(&other->messages_);
    std::swap(leave_message_count_, other->leave_message_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaMessageResponse_descriptor_;
  metadata.reflection = MediaMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinedGroupNotification::kGroupFieldNumber;
#endif  // !_MSC_VER

JoinedGroupNotification::JoinedGroupNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinedGroupNotification::InitAsDefaultInstance() {
  group_ = const_cast< ::app::terminal::Group*>(&::app::terminal::Group::default_instance());
}

JoinedGroupNotification::JoinedGroupNotification(const JoinedGroupNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinedGroupNotification::SharedCtor() {
  _cached_size_ = 0;
  group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinedGroupNotification::~JoinedGroupNotification() {
  SharedDtor();
}

void JoinedGroupNotification::SharedDtor() {
  if (this != default_instance_) {
    delete group_;
  }
}

void JoinedGroupNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinedGroupNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinedGroupNotification_descriptor_;
}

const JoinedGroupNotification& JoinedGroupNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

JoinedGroupNotification* JoinedGroupNotification::default_instance_ = NULL;

JoinedGroupNotification* JoinedGroupNotification::New() const {
  return new JoinedGroupNotification;
}

void JoinedGroupNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group()) {
      if (group_ != NULL) group_->::app::terminal::Group::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinedGroupNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .app.terminal.Group group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinedGroupNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .app.terminal.Group group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinedGroupNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .app.terminal.Group group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinedGroupNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .app.terminal.Group group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinedGroupNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinedGroupNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinedGroupNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinedGroupNotification::MergeFrom(const JoinedGroupNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      mutable_group()->::app::terminal::Group::MergeFrom(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinedGroupNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinedGroupNotification::CopyFrom(const JoinedGroupNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinedGroupNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_group()) {
    if (!this->group().IsInitialized()) return false;
  }
  return true;
}

void JoinedGroupNotification::Swap(JoinedGroupNotification* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinedGroupNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinedGroupNotification_descriptor_;
  metadata.reflection = JoinedGroupNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveGroupNotification::kGroupIdFieldNumber;
#endif  // !_MSC_VER

LeaveGroupNotification::LeaveGroupNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveGroupNotification::InitAsDefaultInstance() {
}

LeaveGroupNotification::LeaveGroupNotification(const LeaveGroupNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveGroupNotification::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveGroupNotification::~LeaveGroupNotification() {
  SharedDtor();
}

void LeaveGroupNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveGroupNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveGroupNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveGroupNotification_descriptor_;
}

const LeaveGroupNotification& LeaveGroupNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

LeaveGroupNotification* LeaveGroupNotification::default_instance_ = NULL;

LeaveGroupNotification* LeaveGroupNotification::New() const {
  return new LeaveGroupNotification;
}

void LeaveGroupNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveGroupNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveGroupNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveGroupNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveGroupNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveGroupNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveGroupNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveGroupNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveGroupNotification::MergeFrom(const LeaveGroupNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveGroupNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveGroupNotification::CopyFrom(const LeaveGroupNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGroupNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LeaveGroupNotification::Swap(LeaveGroupNotification* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveGroupNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveGroupNotification_descriptor_;
  metadata.reflection = LeaveGroupNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OthersJoinedGroupNotification::kGroupIdFieldNumber;
const int OthersJoinedGroupNotification::kParticipantsFieldNumber;
#endif  // !_MSC_VER

OthersJoinedGroupNotification::OthersJoinedGroupNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OthersJoinedGroupNotification::InitAsDefaultInstance() {
}

OthersJoinedGroupNotification::OthersJoinedGroupNotification(const OthersJoinedGroupNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OthersJoinedGroupNotification::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OthersJoinedGroupNotification::~OthersJoinedGroupNotification() {
  SharedDtor();
}

void OthersJoinedGroupNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OthersJoinedGroupNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OthersJoinedGroupNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OthersJoinedGroupNotification_descriptor_;
}

const OthersJoinedGroupNotification& OthersJoinedGroupNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

OthersJoinedGroupNotification* OthersJoinedGroupNotification::default_instance_ = NULL;

OthersJoinedGroupNotification* OthersJoinedGroupNotification::New() const {
  return new OthersJoinedGroupNotification;
}

void OthersJoinedGroupNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  participants_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OthersJoinedGroupNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_participants;
        break;
      }

      // repeated .app.terminal.Participant participants = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_participants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_participants()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_participants;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OthersJoinedGroupNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  // repeated .app.terminal.Participant participants = 2;
  for (int i = 0; i < this->participants_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->participants(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OthersJoinedGroupNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  // repeated .app.terminal.Participant participants = 2;
  for (int i = 0; i < this->participants_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->participants(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OthersJoinedGroupNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  // repeated .app.terminal.Participant participants = 2;
  total_size += 1 * this->participants_size();
  for (int i = 0; i < this->participants_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->participants(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OthersJoinedGroupNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OthersJoinedGroupNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OthersJoinedGroupNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OthersJoinedGroupNotification::MergeFrom(const OthersJoinedGroupNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  participants_.MergeFrom(from.participants_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OthersJoinedGroupNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OthersJoinedGroupNotification::CopyFrom(const OthersJoinedGroupNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OthersJoinedGroupNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < participants_size(); i++) {
    if (!this->participants(i).IsInitialized()) return false;
  }
  return true;
}

void OthersJoinedGroupNotification::Swap(OthersJoinedGroupNotification* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    participants_.Swap(&other->participants_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OthersJoinedGroupNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OthersJoinedGroupNotification_descriptor_;
  metadata.reflection = OthersJoinedGroupNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OthersLeaveGroupNotification::kGroupIdFieldNumber;
const int OthersLeaveGroupNotification::kAccountIdsFieldNumber;
#endif  // !_MSC_VER

OthersLeaveGroupNotification::OthersLeaveGroupNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OthersLeaveGroupNotification::InitAsDefaultInstance() {
}

OthersLeaveGroupNotification::OthersLeaveGroupNotification(const OthersLeaveGroupNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OthersLeaveGroupNotification::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OthersLeaveGroupNotification::~OthersLeaveGroupNotification() {
  SharedDtor();
}

void OthersLeaveGroupNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OthersLeaveGroupNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OthersLeaveGroupNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OthersLeaveGroupNotification_descriptor_;
}

const OthersLeaveGroupNotification& OthersLeaveGroupNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

OthersLeaveGroupNotification* OthersLeaveGroupNotification::default_instance_ = NULL;

OthersLeaveGroupNotification* OthersLeaveGroupNotification::New() const {
  return new OthersLeaveGroupNotification;
}

void OthersLeaveGroupNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OthersLeaveGroupNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_account_ids;
        break;
      }

      // repeated fixed32 account_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21, input, this->mutable_account_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_account_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OthersLeaveGroupNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  // repeated fixed32 account_ids = 2;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->account_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OthersLeaveGroupNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  // repeated fixed32 account_ids = 2;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(2, this->account_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OthersLeaveGroupNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  // repeated fixed32 account_ids = 2;
  {
    int data_size = 0;
    data_size = 4 * this->account_ids_size();
    total_size += 1 * this->account_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OthersLeaveGroupNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OthersLeaveGroupNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OthersLeaveGroupNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OthersLeaveGroupNotification::MergeFrom(const OthersLeaveGroupNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OthersLeaveGroupNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OthersLeaveGroupNotification::CopyFrom(const OthersLeaveGroupNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OthersLeaveGroupNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OthersLeaveGroupNotification::Swap(OthersLeaveGroupNotification* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    account_ids_.Swap(&other->account_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OthersLeaveGroupNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OthersLeaveGroupNotification_descriptor_;
  metadata.reflection = OthersLeaveGroupNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaMessageNotification::kGroupIdFieldNumber;
const int MediaMessageNotification::kMsgFieldNumber;
#endif  // !_MSC_VER

MediaMessageNotification::MediaMessageNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaMessageNotification::InitAsDefaultInstance() {
  msg_ = const_cast< ::app::terminal::MediaMessage*>(&::app::terminal::MediaMessage::default_instance());
}

MediaMessageNotification::MediaMessageNotification(const MediaMessageNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaMessageNotification::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaMessageNotification::~MediaMessageNotification() {
  SharedDtor();
}

void MediaMessageNotification::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void MediaMessageNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaMessageNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaMessageNotification_descriptor_;
}

const MediaMessageNotification& MediaMessageNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

MediaMessageNotification* MediaMessageNotification::default_instance_ = NULL;

MediaMessageNotification* MediaMessageNotification::New() const {
  return new MediaMessageNotification;
}

void MediaMessageNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    if (has_msg()) {
      if (msg_ != NULL) msg_->::app::terminal::MediaMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaMessageNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required .app.terminal.MediaMessage msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaMessageNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  // required .app.terminal.MediaMessage msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaMessageNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  // required .app.terminal.MediaMessage msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaMessageNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

    // required .app.terminal.MediaMessage msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaMessageNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaMessageNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaMessageNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaMessageNotification::MergeFrom(const MediaMessageNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_msg()) {
      mutable_msg()->::app::terminal::MediaMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaMessageNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaMessageNotification::CopyFrom(const MediaMessageNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaMessageNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void MediaMessageNotification::Swap(MediaMessageNotification* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaMessageNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaMessageNotification_descriptor_;
  metadata.reflection = MediaMessageNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinGroupRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

JoinGroupRequest::JoinGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinGroupRequest::InitAsDefaultInstance() {
}

JoinGroupRequest::JoinGroupRequest(const JoinGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGroupRequest::~JoinGroupRequest() {
  SharedDtor();
}

void JoinGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGroupRequest_descriptor_;
}

const JoinGroupRequest& JoinGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

JoinGroupRequest* JoinGroupRequest::default_instance_ = NULL;

JoinGroupRequest* JoinGroupRequest::New() const {
  return new JoinGroupRequest;
}

void JoinGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinGroupRequest::MergeFrom(const JoinGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroupRequest::CopyFrom(const JoinGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JoinGroupRequest::Swap(JoinGroupRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinGroupRequest_descriptor_;
  metadata.reflection = JoinGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectGroupRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

ConnectGroupRequest::ConnectGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectGroupRequest::InitAsDefaultInstance() {
}

ConnectGroupRequest::ConnectGroupRequest(const ConnectGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectGroupRequest::~ConnectGroupRequest() {
  SharedDtor();
}

void ConnectGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectGroupRequest_descriptor_;
}

const ConnectGroupRequest& ConnectGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

ConnectGroupRequest* ConnectGroupRequest::default_instance_ = NULL;

ConnectGroupRequest* ConnectGroupRequest::New() const {
  return new ConnectGroupRequest;
}

void ConnectGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectGroupRequest::MergeFrom(const ConnectGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectGroupRequest::CopyFrom(const ConnectGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnectGroupRequest::Swap(ConnectGroupRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectGroupRequest_descriptor_;
  metadata.reflection = ConnectGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionStatusNotification::kGroupIdFieldNumber;
const int SessionStatusNotification::kAccountIdFieldNumber;
const int SessionStatusNotification::kStatusFieldNumber;
#endif  // !_MSC_VER

SessionStatusNotification::SessionStatusNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SessionStatusNotification::InitAsDefaultInstance() {
}

SessionStatusNotification::SessionStatusNotification(const SessionStatusNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SessionStatusNotification::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  account_id_ = 0u;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionStatusNotification::~SessionStatusNotification() {
  SharedDtor();
}

void SessionStatusNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SessionStatusNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionStatusNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionStatusNotification_descriptor_;
}

const SessionStatusNotification& SessionStatusNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

SessionStatusNotification* SessionStatusNotification::default_instance_ = NULL;

SessionStatusNotification* SessionStatusNotification::New() const {
  return new SessionStatusNotification;
}

void SessionStatusNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    account_id_ = 0u;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionStatusNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_account_id;
        break;
      }

      // required fixed32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .app.terminal.SessionStatus status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::terminal::SessionStatus_IsValid(value)) {
            set_status(static_cast< ::app::terminal::SessionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionStatusNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  // required fixed32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->account_id(), output);
  }

  // required .app.terminal.SessionStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SessionStatusNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  // required fixed32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->account_id(), target);
  }

  // required .app.terminal.SessionStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SessionStatusNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

    // required fixed32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 + 4;
    }

    // required .app.terminal.SessionStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionStatusNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionStatusNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionStatusNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionStatusNotification::MergeFrom(const SessionStatusNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionStatusNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionStatusNotification::CopyFrom(const SessionStatusNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionStatusNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SessionStatusNotification::Swap(SessionStatusNotification* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionStatusNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionStatusNotification_descriptor_;
  metadata.reflection = SessionStatusNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeakRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

SpeakRequest::SpeakRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeakRequest::InitAsDefaultInstance() {
}

SpeakRequest::SpeakRequest(const SpeakRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeakRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeakRequest::~SpeakRequest() {
  SharedDtor();
}

void SpeakRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeakRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeakRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeakRequest_descriptor_;
}

const SpeakRequest& SpeakRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

SpeakRequest* SpeakRequest::default_instance_ = NULL;

SpeakRequest* SpeakRequest::New() const {
  return new SpeakRequest;
}

void SpeakRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeakRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeakRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeakRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeakRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeakRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeakRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeakRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeakRequest::MergeFrom(const SpeakRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeakRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeakRequest::CopyFrom(const SpeakRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeakRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SpeakRequest::Swap(SpeakRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeakRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeakRequest_descriptor_;
  metadata.reflection = SpeakRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinSessionRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

JoinSessionRequest::JoinSessionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinSessionRequest::InitAsDefaultInstance() {
}

JoinSessionRequest::JoinSessionRequest(const JoinSessionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinSessionRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinSessionRequest::~JoinSessionRequest() {
  SharedDtor();
}

void JoinSessionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinSessionRequest_descriptor_;
}

const JoinSessionRequest& JoinSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

JoinSessionRequest* JoinSessionRequest::default_instance_ = NULL;

JoinSessionRequest* JoinSessionRequest::New() const {
  return new JoinSessionRequest;
}

void JoinSessionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinSessionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinSessionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinSessionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinSessionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinSessionRequest::MergeFrom(const JoinSessionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinSessionRequest::CopyFrom(const JoinSessionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinSessionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JoinSessionRequest::Swap(JoinSessionRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinSessionRequest_descriptor_;
  metadata.reflection = JoinSessionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveSessionRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

LeaveSessionRequest::LeaveSessionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveSessionRequest::InitAsDefaultInstance() {
}

LeaveSessionRequest::LeaveSessionRequest(const LeaveSessionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveSessionRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveSessionRequest::~LeaveSessionRequest() {
  SharedDtor();
}

void LeaveSessionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveSessionRequest_descriptor_;
}

const LeaveSessionRequest& LeaveSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

LeaveSessionRequest* LeaveSessionRequest::default_instance_ = NULL;

LeaveSessionRequest* LeaveSessionRequest::New() const {
  return new LeaveSessionRequest;
}

void LeaveSessionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveSessionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveSessionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveSessionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveSessionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveSessionRequest::MergeFrom(const LeaveSessionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveSessionRequest::CopyFrom(const LeaveSessionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveSessionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LeaveSessionRequest::Swap(LeaveSessionRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveSessionRequest_descriptor_;
  metadata.reflection = LeaveSessionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReleaseTokenRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

ReleaseTokenRequest::ReleaseTokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReleaseTokenRequest::InitAsDefaultInstance() {
}

ReleaseTokenRequest::ReleaseTokenRequest(const ReleaseTokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReleaseTokenRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReleaseTokenRequest::~ReleaseTokenRequest() {
  SharedDtor();
}

void ReleaseTokenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReleaseTokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReleaseTokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReleaseTokenRequest_descriptor_;
}

const ReleaseTokenRequest& ReleaseTokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

ReleaseTokenRequest* ReleaseTokenRequest::default_instance_ = NULL;

ReleaseTokenRequest* ReleaseTokenRequest::New() const {
  return new ReleaseTokenRequest;
}

void ReleaseTokenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReleaseTokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReleaseTokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReleaseTokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReleaseTokenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReleaseTokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReleaseTokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReleaseTokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReleaseTokenRequest::MergeFrom(const ReleaseTokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReleaseTokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseTokenRequest::CopyFrom(const ReleaseTokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseTokenRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReleaseTokenRequest::Swap(ReleaseTokenRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReleaseTokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReleaseTokenRequest_descriptor_;
  metadata.reflection = ReleaseTokenRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppointSpeakRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

AppointSpeakRequest::AppointSpeakRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppointSpeakRequest::InitAsDefaultInstance() {
}

AppointSpeakRequest::AppointSpeakRequest(const AppointSpeakRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppointSpeakRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppointSpeakRequest::~AppointSpeakRequest() {
  SharedDtor();
}

void AppointSpeakRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppointSpeakRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppointSpeakRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppointSpeakRequest_descriptor_;
}

const AppointSpeakRequest& AppointSpeakRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

AppointSpeakRequest* AppointSpeakRequest::default_instance_ = NULL;

AppointSpeakRequest* AppointSpeakRequest::New() const {
  return new AppointSpeakRequest;
}

void AppointSpeakRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppointSpeakRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppointSpeakRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppointSpeakRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppointSpeakRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppointSpeakRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppointSpeakRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppointSpeakRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppointSpeakRequest::MergeFrom(const AppointSpeakRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppointSpeakRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppointSpeakRequest::CopyFrom(const AppointSpeakRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppointSpeakRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AppointSpeakRequest::Swap(AppointSpeakRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppointSpeakRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppointSpeakRequest_descriptor_;
  metadata.reflection = AppointSpeakRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMessageRequest::kGroupIdFieldNumber;
const int SendMessageRequest::kTextFieldNumber;
const int SendMessageRequest::kPictureUriFieldNumber;
const int SendMessageRequest::kAudioUriFieldNumber;
const int SendMessageRequest::kAudioLengthFieldNumber;
const int SendMessageRequest::kVideoUriFieldNumber;
const int SendMessageRequest::kVideoLengthFieldNumber;
#endif  // !_MSC_VER

SendMessageRequest::SendMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendMessageRequest::InitAsDefaultInstance() {
}

SendMessageRequest::SendMessageRequest(const SendMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picture_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  audio_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  audio_length_ = 0u;
  video_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  video_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMessageRequest::~SendMessageRequest() {
  SharedDtor();
}

void SendMessageRequest::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (picture_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete picture_uri_;
  }
  if (audio_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete audio_uri_;
  }
  if (video_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete video_uri_;
  }
  if (this != default_instance_) {
  }
}

void SendMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMessageRequest_descriptor_;
}

const SendMessageRequest& SendMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

SendMessageRequest* SendMessageRequest::default_instance_ = NULL;

SendMessageRequest* SendMessageRequest::New() const {
  return new SendMessageRequest;
}

void SendMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_picture_uri()) {
      if (picture_uri_ != &::google::protobuf::internal::kEmptyString) {
        picture_uri_->clear();
      }
    }
    if (has_audio_uri()) {
      if (audio_uri_ != &::google::protobuf::internal::kEmptyString) {
        audio_uri_->clear();
      }
    }
    audio_length_ = 0u;
    if (has_video_uri()) {
      if (video_uri_ != &::google::protobuf::internal::kEmptyString) {
        video_uri_->clear();
      }
    }
    video_length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional bytes text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_picture_uri;
        break;
      }

      // optional string picture_uri = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picture_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picture_uri().data(), this->picture_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_audio_uri;
        break;
      }

      // optional string audio_uri = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audio_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audio_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->audio_uri().data(), this->audio_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_audio_length;
        break;
      }

      // optional fixed32 audio_length = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_audio_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &audio_length_)));
          set_has_audio_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_video_uri;
        break;
      }

      // optional string video_uri = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->video_uri().data(), this->video_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_video_length;
        break;
      }

      // optional fixed32 video_length = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_video_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &video_length_)));
          set_has_video_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->group_id(), output);
  }

  // optional bytes text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->text(), output);
  }

  // optional string picture_uri = 3;
  if (has_picture_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_uri().data(), this->picture_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->picture_uri(), output);
  }

  // optional string audio_uri = 4;
  if (has_audio_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audio_uri().data(), this->audio_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->audio_uri(), output);
  }

  // optional fixed32 audio_length = 5;
  if (has_audio_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->audio_length(), output);
  }

  // optional string video_uri = 6;
  if (has_video_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->video_uri().data(), this->video_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->video_uri(), output);
  }

  // optional fixed32 video_length = 7;
  if (has_video_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->video_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->group_id(), target);
  }

  // optional bytes text = 2;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->text(), target);
  }

  // optional string picture_uri = 3;
  if (has_picture_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_uri().data(), this->picture_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->picture_uri(), target);
  }

  // optional string audio_uri = 4;
  if (has_audio_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audio_uri().data(), this->audio_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->audio_uri(), target);
  }

  // optional fixed32 audio_length = 5;
  if (has_audio_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->audio_length(), target);
  }

  // optional string video_uri = 6;
  if (has_video_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->video_uri().data(), this->video_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->video_uri(), target);
  }

  // optional fixed32 video_length = 7;
  if (has_video_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->video_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

    // optional bytes text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

    // optional string picture_uri = 3;
    if (has_picture_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picture_uri());
    }

    // optional string audio_uri = 4;
    if (has_audio_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audio_uri());
    }

    // optional fixed32 audio_length = 5;
    if (has_audio_length()) {
      total_size += 1 + 4;
    }

    // optional string video_uri = 6;
    if (has_video_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_uri());
    }

    // optional fixed32 video_length = 7;
    if (has_video_length()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMessageRequest::MergeFrom(const SendMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_picture_uri()) {
      set_picture_uri(from.picture_uri());
    }
    if (from.has_audio_uri()) {
      set_audio_uri(from.audio_uri());
    }
    if (from.has_audio_length()) {
      set_audio_length(from.audio_length());
    }
    if (from.has_video_uri()) {
      set_video_uri(from.video_uri());
    }
    if (from.has_video_length()) {
      set_video_length(from.video_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageRequest::CopyFrom(const SendMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SendMessageRequest::Swap(SendMessageRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(text_, other->text_);
    std::swap(picture_uri_, other->picture_uri_);
    std::swap(audio_uri_, other->audio_uri_);
    std::swap(audio_length_, other->audio_length_);
    std::swap(video_uri_, other->video_uri_);
    std::swap(video_length_, other->video_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMessageRequest_descriptor_;
  metadata.reflection = SendMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeLocationRequest::kSubscribingFieldNumber;
const int SubscribeLocationRequest::kTtlFieldNumber;
#endif  // !_MSC_VER

SubscribeLocationRequest::SubscribeLocationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeLocationRequest::InitAsDefaultInstance() {
}

SubscribeLocationRequest::SubscribeLocationRequest(const SubscribeLocationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeLocationRequest::SharedCtor() {
  _cached_size_ = 0;
  subscribing_ = false;
  ttl_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeLocationRequest::~SubscribeLocationRequest() {
  SharedDtor();
}

void SubscribeLocationRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeLocationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeLocationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeLocationRequest_descriptor_;
}

const SubscribeLocationRequest& SubscribeLocationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

SubscribeLocationRequest* SubscribeLocationRequest::default_instance_ = NULL;

SubscribeLocationRequest* SubscribeLocationRequest::New() const {
  return new SubscribeLocationRequest;
}

void SubscribeLocationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    subscribing_ = false;
    ttl_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeLocationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool subscribing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subscribing_)));
          set_has_subscribing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ttl;
        break;
      }

      // required fixed32 ttl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeLocationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool subscribing = 1;
  if (has_subscribing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->subscribing(), output);
  }

  // required fixed32 ttl = 2;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ttl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeLocationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool subscribing = 1;
  if (has_subscribing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->subscribing(), target);
  }

  // required fixed32 ttl = 2;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ttl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeLocationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool subscribing = 1;
    if (has_subscribing()) {
      total_size += 1 + 1;
    }

    // required fixed32 ttl = 2;
    if (has_ttl()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeLocationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeLocationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeLocationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeLocationRequest::MergeFrom(const SubscribeLocationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subscribing()) {
      set_subscribing(from.subscribing());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeLocationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeLocationRequest::CopyFrom(const SubscribeLocationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeLocationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SubscribeLocationRequest::Swap(SubscribeLocationRequest* other) {
  if (other != this) {
    std::swap(subscribing_, other->subscribing_);
    std::swap(ttl_, other->ttl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeLocationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeLocationRequest_descriptor_;
  metadata.reflection = SubscribeLocationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeLocationResponse::kLongtitudeFieldNumber;
const int SubscribeLocationResponse::kLatitudeFieldNumber;
const int SubscribeLocationResponse::kAcquireLocationTimeFieldNumber;
#endif  // !_MSC_VER

SubscribeLocationResponse::SubscribeLocationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeLocationResponse::InitAsDefaultInstance() {
}

SubscribeLocationResponse::SubscribeLocationResponse(const SubscribeLocationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeLocationResponse::SharedCtor() {
  _cached_size_ = 0;
  longtitude_ = 0;
  latitude_ = 0;
  acquire_location_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeLocationResponse::~SubscribeLocationResponse() {
  SharedDtor();
}

void SubscribeLocationResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeLocationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeLocationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeLocationResponse_descriptor_;
}

const SubscribeLocationResponse& SubscribeLocationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

SubscribeLocationResponse* SubscribeLocationResponse::default_instance_ = NULL;

SubscribeLocationResponse* SubscribeLocationResponse::New() const {
  return new SubscribeLocationResponse;
}

void SubscribeLocationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    longtitude_ = 0;
    latitude_ = 0;
    acquire_location_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeLocationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double longtitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longtitude_)));
          set_has_longtitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_latitude;
        break;
      }

      // required double latitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_acquire_location_time;
        break;
      }

      // required fixed32 acquire_location_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_acquire_location_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &acquire_location_time_)));
          set_has_acquire_location_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeLocationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double longtitude = 1;
  if (has_longtitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longtitude(), output);
  }

  // required double latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // required fixed32 acquire_location_time = 3;
  if (has_acquire_location_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->acquire_location_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeLocationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double longtitude = 1;
  if (has_longtitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longtitude(), target);
  }

  // required double latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // required fixed32 acquire_location_time = 3;
  if (has_acquire_location_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->acquire_location_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeLocationResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double longtitude = 1;
    if (has_longtitude()) {
      total_size += 1 + 8;
    }

    // required double latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required fixed32 acquire_location_time = 3;
    if (has_acquire_location_time()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeLocationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeLocationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeLocationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeLocationResponse::MergeFrom(const SubscribeLocationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_longtitude()) {
      set_longtitude(from.longtitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_acquire_location_time()) {
      set_acquire_location_time(from.acquire_location_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeLocationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeLocationResponse::CopyFrom(const SubscribeLocationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeLocationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SubscribeLocationResponse::Swap(SubscribeLocationResponse* other) {
  if (other != this) {
    std::swap(longtitude_, other->longtitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(acquire_location_time_, other->acquire_location_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeLocationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeLocationResponse_descriptor_;
  metadata.reflection = SubscribeLocationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocationNotification::kLongtitudeFieldNumber;
const int LocationNotification::kLatitudeFieldNumber;
const int LocationNotification::kAcquireLocationTimeFieldNumber;
#endif  // !_MSC_VER

LocationNotification::LocationNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocationNotification::InitAsDefaultInstance() {
}

LocationNotification::LocationNotification(const LocationNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocationNotification::SharedCtor() {
  _cached_size_ = 0;
  longtitude_ = 0;
  latitude_ = 0;
  acquire_location_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationNotification::~LocationNotification() {
  SharedDtor();
}

void LocationNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocationNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocationNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationNotification_descriptor_;
}

const LocationNotification& LocationNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

LocationNotification* LocationNotification::default_instance_ = NULL;

LocationNotification* LocationNotification::New() const {
  return new LocationNotification;
}

void LocationNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    longtitude_ = 0;
    latitude_ = 0;
    acquire_location_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocationNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double longtitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longtitude_)));
          set_has_longtitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_latitude;
        break;
      }

      // required double latitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_acquire_location_time;
        break;
      }

      // optional fixed32 acquire_location_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_acquire_location_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &acquire_location_time_)));
          set_has_acquire_location_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocationNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double longtitude = 1;
  if (has_longtitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longtitude(), output);
  }

  // required double latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // optional fixed32 acquire_location_time = 3;
  if (has_acquire_location_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->acquire_location_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocationNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double longtitude = 1;
  if (has_longtitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longtitude(), target);
  }

  // required double latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // optional fixed32 acquire_location_time = 3;
  if (has_acquire_location_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->acquire_location_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocationNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double longtitude = 1;
    if (has_longtitude()) {
      total_size += 1 + 8;
    }

    // required double latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional fixed32 acquire_location_time = 3;
    if (has_acquire_location_time()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocationNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocationNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocationNotification::MergeFrom(const LocationNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_longtitude()) {
      set_longtitude(from.longtitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_acquire_location_time()) {
      set_acquire_location_time(from.acquire_location_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocationNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationNotification::CopyFrom(const LocationNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LocationNotification::Swap(LocationNotification* other) {
  if (other != this) {
    std::swap(longtitude_, other->longtitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(acquire_location_time_, other->acquire_location_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocationNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocationNotification_descriptor_;
  metadata.reflection = LocationNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Alert::kIdFieldNumber;
const int Alert::kNameFieldNumber;
const int Alert::kGroupIdFieldNumber;
const int Alert::kLevelFieldNumber;
const int Alert::kDescribeFieldNumber;
const int Alert::kAlarmTimeFieldNumber;
const int Alert::kUseCarsFieldNumber;
const int Alert::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

Alert::Alert()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Alert::InitAsDefaultInstance() {
}

Alert::Alert(const Alert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Alert::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_id_ = 0u;
  level_ = 0;
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alarm_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  use_cars_ = 0u;
  create_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Alert::~Alert() {
  SharedDtor();
}

void Alert::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (alarm_time_ != &::google::protobuf::internal::kEmptyString) {
    delete alarm_time_;
  }
  if (create_time_ != &::google::protobuf::internal::kEmptyString) {
    delete create_time_;
  }
  if (this != default_instance_) {
  }
}

void Alert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Alert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alert_descriptor_;
}

const Alert& Alert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

Alert* Alert::default_instance_ = NULL;

Alert* Alert::New() const {
  return new Alert;
}

void Alert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    group_id_ = 0u;
    level_ = 0;
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::kEmptyString) {
        describe_->clear();
      }
    }
    if (has_alarm_time()) {
      if (alarm_time_ != &::google::protobuf::internal::kEmptyString) {
        alarm_time_->clear();
      }
    }
    use_cars_ = 0u;
    if (has_create_time()) {
      if (create_time_ != &::google::protobuf::internal::kEmptyString) {
        create_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Alert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_group_id;
        break;
      }

      // required fixed32 group_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional .app.terminal.AlertLevel level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::terminal::AlertLevel_IsValid(value)) {
            set_level(static_cast< ::app::terminal::AlertLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_describe;
        break;
      }

      // optional bytes describe = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_describe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_alarm_time;
        break;
      }

      // optional string alarm_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alarm_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarm_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alarm_time().data(), this->alarm_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_use_cars;
        break;
      }

      // optional fixed32 use_cars = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_use_cars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &use_cars_)));
          set_has_use_cars();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_create_time;
        break;
      }

      // optional string create_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->create_time().data(), this->create_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Alert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required fixed32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->group_id(), output);
  }

  // optional .app.terminal.AlertLevel level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->level(), output);
  }

  // optional bytes describe = 5;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->describe(), output);
  }

  // optional string alarm_time = 6;
  if (has_alarm_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarm_time().data(), this->alarm_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->alarm_time(), output);
  }

  // optional fixed32 use_cars = 7;
  if (has_use_cars()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->use_cars(), output);
  }

  // optional string create_time = 8;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_time().data(), this->create_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Alert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required fixed32 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->group_id(), target);
  }

  // optional .app.terminal.AlertLevel level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->level(), target);
  }

  // optional bytes describe = 5;
  if (has_describe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->describe(), target);
  }

  // optional string alarm_time = 6;
  if (has_alarm_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarm_time().data(), this->alarm_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->alarm_time(), target);
  }

  // optional fixed32 use_cars = 7;
  if (has_use_cars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->use_cars(), target);
  }

  // optional string create_time = 8;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_time().data(), this->create_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Alert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required fixed32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

    // optional .app.terminal.AlertLevel level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
    }

    // optional bytes describe = 5;
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->describe());
    }

    // optional string alarm_time = 6;
    if (has_alarm_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarm_time());
    }

    // optional fixed32 use_cars = 7;
    if (has_use_cars()) {
      total_size += 1 + 4;
    }

    // optional string create_time = 8;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Alert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Alert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Alert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Alert::MergeFrom(const Alert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
    if (from.has_alarm_time()) {
      set_alarm_time(from.alarm_time());
    }
    if (from.has_use_cars()) {
      set_use_cars(from.use_cars());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Alert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alert::CopyFrom(const Alert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Alert::Swap(Alert* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(group_id_, other->group_id_);
    std::swap(level_, other->level_);
    std::swap(describe_, other->describe_);
    std::swap(alarm_time_, other->alarm_time_);
    std::swap(use_cars_, other->use_cars_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Alert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Alert_descriptor_;
  metadata.reflection = Alert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlertsResponse::kAlertsFieldNumber;
#endif  // !_MSC_VER

AlertsResponse::AlertsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlertsResponse::InitAsDefaultInstance() {
}

AlertsResponse::AlertsResponse(const AlertsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlertsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlertsResponse::~AlertsResponse() {
  SharedDtor();
}

void AlertsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlertsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlertsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlertsResponse_descriptor_;
}

const AlertsResponse& AlertsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

AlertsResponse* AlertsResponse::default_instance_ = NULL;

AlertsResponse* AlertsResponse::New() const {
  return new AlertsResponse;
}

void AlertsResponse::Clear() {
  alerts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlertsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.terminal.Alert alerts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alerts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alerts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_alerts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlertsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.terminal.Alert alerts = 4;
  for (int i = 0; i < this->alerts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->alerts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlertsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.terminal.Alert alerts = 4;
  for (int i = 0; i < this->alerts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->alerts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlertsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .app.terminal.Alert alerts = 4;
  total_size += 1 * this->alerts_size();
  for (int i = 0; i < this->alerts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alerts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlertsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlertsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlertsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlertsResponse::MergeFrom(const AlertsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  alerts_.MergeFrom(from.alerts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlertsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlertsResponse::CopyFrom(const AlertsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlertsResponse::IsInitialized() const {

  for (int i = 0; i < alerts_size(); i++) {
    if (!this->alerts(i).IsInitialized()) return false;
  }
  return true;
}

void AlertsResponse::Swap(AlertsResponse* other) {
  if (other != this) {
    alerts_.Swap(&other->alerts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlertsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlertsResponse_descriptor_;
  metadata.reflection = AlertsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlertRequest::kAlertIdFieldNumber;
#endif  // !_MSC_VER

AlertRequest::AlertRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlertRequest::InitAsDefaultInstance() {
}

AlertRequest::AlertRequest(const AlertRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlertRequest::SharedCtor() {
  _cached_size_ = 0;
  alert_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlertRequest::~AlertRequest() {
  SharedDtor();
}

void AlertRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlertRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlertRequest_descriptor_;
}

const AlertRequest& AlertRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

AlertRequest* AlertRequest::default_instance_ = NULL;

AlertRequest* AlertRequest::New() const {
  return new AlertRequest;
}

void AlertRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    alert_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 alert_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &alert_id_)));
          set_has_alert_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 alert_id = 1;
  if (has_alert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->alert_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlertRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 alert_id = 1;
  if (has_alert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->alert_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlertRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 alert_id = 1;
    if (has_alert_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlertRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlertRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlertRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlertRequest::MergeFrom(const AlertRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alert_id()) {
      set_alert_id(from.alert_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlertRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlertRequest::CopyFrom(const AlertRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlertRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AlertRequest::Swap(AlertRequest* other) {
  if (other != this) {
    std::swap(alert_id_, other->alert_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlertRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlertRequest_descriptor_;
  metadata.reflection = AlertRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlertResponse::kAlertFieldNumber;
#endif  // !_MSC_VER

AlertResponse::AlertResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlertResponse::InitAsDefaultInstance() {
  alert_ = const_cast< ::app::terminal::Alert*>(&::app::terminal::Alert::default_instance());
}

AlertResponse::AlertResponse(const AlertResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlertResponse::SharedCtor() {
  _cached_size_ = 0;
  alert_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlertResponse::~AlertResponse() {
  SharedDtor();
}

void AlertResponse::SharedDtor() {
  if (this != default_instance_) {
    delete alert_;
  }
}

void AlertResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlertResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlertResponse_descriptor_;
}

const AlertResponse& AlertResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

AlertResponse* AlertResponse::default_instance_ = NULL;

AlertResponse* AlertResponse::New() const {
  return new AlertResponse;
}

void AlertResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alert()) {
      if (alert_ != NULL) alert_->::app::terminal::Alert::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlertResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .app.terminal.Alert alert = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlertResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .app.terminal.Alert alert = 1;
  if (has_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlertResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .app.terminal.Alert alert = 1;
  if (has_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlertResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .app.terminal.Alert alert = 1;
    if (has_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlertResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlertResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlertResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlertResponse::MergeFrom(const AlertResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alert()) {
      mutable_alert()->::app::terminal::Alert::MergeFrom(from.alert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlertResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlertResponse::CopyFrom(const AlertResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlertResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alert()) {
    if (!this->alert().IsInitialized()) return false;
  }
  return true;
}

void AlertResponse::Swap(AlertResponse* other) {
  if (other != this) {
    std::swap(alert_, other->alert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlertResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlertResponse_descriptor_;
  metadata.reflection = AlertResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlertCreateNotification::kAlertIdFieldNumber;
const int AlertCreateNotification::kNameFieldNumber;
const int AlertCreateNotification::kGroupIdFieldNumber;
#endif  // !_MSC_VER

AlertCreateNotification::AlertCreateNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlertCreateNotification::InitAsDefaultInstance() {
}

AlertCreateNotification::AlertCreateNotification(const AlertCreateNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlertCreateNotification::SharedCtor() {
  _cached_size_ = 0;
  alert_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlertCreateNotification::~AlertCreateNotification() {
  SharedDtor();
}

void AlertCreateNotification::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AlertCreateNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlertCreateNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlertCreateNotification_descriptor_;
}

const AlertCreateNotification& AlertCreateNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

AlertCreateNotification* AlertCreateNotification::default_instance_ = NULL;

AlertCreateNotification* AlertCreateNotification::New() const {
  return new AlertCreateNotification;
}

void AlertCreateNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    alert_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlertCreateNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 alert_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &alert_id_)));
          set_has_alert_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_group_id;
        break;
      }

      // required fixed32 group_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlertCreateNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 alert_id = 1;
  if (has_alert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->alert_id(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required fixed32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlertCreateNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 alert_id = 1;
  if (has_alert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->alert_id(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required fixed32 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlertCreateNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 alert_id = 1;
    if (has_alert_id()) {
      total_size += 1 + 4;
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required fixed32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlertCreateNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlertCreateNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlertCreateNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlertCreateNotification::MergeFrom(const AlertCreateNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alert_id()) {
      set_alert_id(from.alert_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlertCreateNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlertCreateNotification::CopyFrom(const AlertCreateNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlertCreateNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AlertCreateNotification::Swap(AlertCreateNotification* other) {
  if (other != this) {
    std::swap(alert_id_, other->alert_id_);
    std::swap(name_, other->name_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlertCreateNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlertCreateNotification_descriptor_;
  metadata.reflection = AlertCreateNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlertModifyNotification::kAlertFieldNumber;
#endif  // !_MSC_VER

AlertModifyNotification::AlertModifyNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlertModifyNotification::InitAsDefaultInstance() {
  alert_ = const_cast< ::app::terminal::Alert*>(&::app::terminal::Alert::default_instance());
}

AlertModifyNotification::AlertModifyNotification(const AlertModifyNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlertModifyNotification::SharedCtor() {
  _cached_size_ = 0;
  alert_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlertModifyNotification::~AlertModifyNotification() {
  SharedDtor();
}

void AlertModifyNotification::SharedDtor() {
  if (this != default_instance_) {
    delete alert_;
  }
}

void AlertModifyNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlertModifyNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlertModifyNotification_descriptor_;
}

const AlertModifyNotification& AlertModifyNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

AlertModifyNotification* AlertModifyNotification::default_instance_ = NULL;

AlertModifyNotification* AlertModifyNotification::New() const {
  return new AlertModifyNotification;
}

void AlertModifyNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alert()) {
      if (alert_ != NULL) alert_->::app::terminal::Alert::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlertModifyNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .app.terminal.Alert alert = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlertModifyNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .app.terminal.Alert alert = 1;
  if (has_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlertModifyNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .app.terminal.Alert alert = 1;
  if (has_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlertModifyNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .app.terminal.Alert alert = 1;
    if (has_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlertModifyNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlertModifyNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlertModifyNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlertModifyNotification::MergeFrom(const AlertModifyNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alert()) {
      mutable_alert()->::app::terminal::Alert::MergeFrom(from.alert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlertModifyNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlertModifyNotification::CopyFrom(const AlertModifyNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlertModifyNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alert()) {
    if (!this->alert().IsInitialized()) return false;
  }
  return true;
}

void AlertModifyNotification::Swap(AlertModifyNotification* other) {
  if (other != this) {
    std::swap(alert_, other->alert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlertModifyNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlertModifyNotification_descriptor_;
  metadata.reflection = AlertModifyNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlertOveredNotification::kAlertIdFieldNumber;
#endif  // !_MSC_VER

AlertOveredNotification::AlertOveredNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlertOveredNotification::InitAsDefaultInstance() {
}

AlertOveredNotification::AlertOveredNotification(const AlertOveredNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlertOveredNotification::SharedCtor() {
  _cached_size_ = 0;
  alert_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlertOveredNotification::~AlertOveredNotification() {
  SharedDtor();
}

void AlertOveredNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlertOveredNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlertOveredNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlertOveredNotification_descriptor_;
}

const AlertOveredNotification& AlertOveredNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

AlertOveredNotification* AlertOveredNotification::default_instance_ = NULL;

AlertOveredNotification* AlertOveredNotification::New() const {
  return new AlertOveredNotification;
}

void AlertOveredNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    alert_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlertOveredNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 alert_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &alert_id_)));
          set_has_alert_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlertOveredNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 alert_id = 1;
  if (has_alert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->alert_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlertOveredNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 alert_id = 1;
  if (has_alert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->alert_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlertOveredNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 alert_id = 1;
    if (has_alert_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlertOveredNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlertOveredNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlertOveredNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlertOveredNotification::MergeFrom(const AlertOveredNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alert_id()) {
      set_alert_id(from.alert_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlertOveredNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlertOveredNotification::CopyFrom(const AlertOveredNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlertOveredNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AlertOveredNotification::Swap(AlertOveredNotification* other) {
  if (other != this) {
    std::swap(alert_id_, other->alert_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlertOveredNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlertOveredNotification_descriptor_;
  metadata.reflection = AlertOveredNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryAlertsRequest::kNameFieldNumber;
const int HistoryAlertsRequest::kCreateTimeFromFieldNumber;
const int HistoryAlertsRequest::kCreateTimeToFieldNumber;
const int HistoryAlertsRequest::kAlramTimeFromFieldNumber;
const int HistoryAlertsRequest::kAlramTimeToFieldNumber;
const int HistoryAlertsRequest::kOverTimeFromFieldNumber;
const int HistoryAlertsRequest::kOverTimeToFieldNumber;
#endif  // !_MSC_VER

HistoryAlertsRequest::HistoryAlertsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryAlertsRequest::InitAsDefaultInstance() {
}

HistoryAlertsRequest::HistoryAlertsRequest(const HistoryAlertsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryAlertsRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_time_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_time_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alram_time_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alram_time_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  over_time_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  over_time_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryAlertsRequest::~HistoryAlertsRequest() {
  SharedDtor();
}

void HistoryAlertsRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (create_time_from_ != &::google::protobuf::internal::kEmptyString) {
    delete create_time_from_;
  }
  if (create_time_to_ != &::google::protobuf::internal::kEmptyString) {
    delete create_time_to_;
  }
  if (alram_time_from_ != &::google::protobuf::internal::kEmptyString) {
    delete alram_time_from_;
  }
  if (alram_time_to_ != &::google::protobuf::internal::kEmptyString) {
    delete alram_time_to_;
  }
  if (over_time_from_ != &::google::protobuf::internal::kEmptyString) {
    delete over_time_from_;
  }
  if (over_time_to_ != &::google::protobuf::internal::kEmptyString) {
    delete over_time_to_;
  }
  if (this != default_instance_) {
  }
}

void HistoryAlertsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryAlertsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryAlertsRequest_descriptor_;
}

const HistoryAlertsRequest& HistoryAlertsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

HistoryAlertsRequest* HistoryAlertsRequest::default_instance_ = NULL;

HistoryAlertsRequest* HistoryAlertsRequest::New() const {
  return new HistoryAlertsRequest;
}

void HistoryAlertsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_create_time_from()) {
      if (create_time_from_ != &::google::protobuf::internal::kEmptyString) {
        create_time_from_->clear();
      }
    }
    if (has_create_time_to()) {
      if (create_time_to_ != &::google::protobuf::internal::kEmptyString) {
        create_time_to_->clear();
      }
    }
    if (has_alram_time_from()) {
      if (alram_time_from_ != &::google::protobuf::internal::kEmptyString) {
        alram_time_from_->clear();
      }
    }
    if (has_alram_time_to()) {
      if (alram_time_to_ != &::google::protobuf::internal::kEmptyString) {
        alram_time_to_->clear();
      }
    }
    if (has_over_time_from()) {
      if (over_time_from_ != &::google::protobuf::internal::kEmptyString) {
        over_time_from_->clear();
      }
    }
    if (has_over_time_to()) {
      if (over_time_to_ != &::google::protobuf::internal::kEmptyString) {
        over_time_to_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryAlertsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_create_time_from;
        break;
      }

      // optional string create_time_from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_time_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_time_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->create_time_from().data(), this->create_time_from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_create_time_to;
        break;
      }

      // optional string create_time_to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_time_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_time_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->create_time_to().data(), this->create_time_to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_alram_time_from;
        break;
      }

      // optional string alram_time_from = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alram_time_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alram_time_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alram_time_from().data(), this->alram_time_from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_alram_time_to;
        break;
      }

      // optional string alram_time_to = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alram_time_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alram_time_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alram_time_to().data(), this->alram_time_to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_over_time_from;
        break;
      }

      // optional string over_time_from = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_over_time_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_over_time_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->over_time_from().data(), this->over_time_from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_over_time_to;
        break;
      }

      // optional string over_time_to = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_over_time_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_over_time_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->over_time_to().data(), this->over_time_to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryAlertsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional string create_time_from = 2;
  if (has_create_time_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_time_from().data(), this->create_time_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->create_time_from(), output);
  }

  // optional string create_time_to = 3;
  if (has_create_time_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_time_to().data(), this->create_time_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->create_time_to(), output);
  }

  // optional string alram_time_from = 4;
  if (has_alram_time_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alram_time_from().data(), this->alram_time_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->alram_time_from(), output);
  }

  // optional string alram_time_to = 5;
  if (has_alram_time_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alram_time_to().data(), this->alram_time_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->alram_time_to(), output);
  }

  // optional string over_time_from = 6;
  if (has_over_time_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->over_time_from().data(), this->over_time_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->over_time_from(), output);
  }

  // optional string over_time_to = 7;
  if (has_over_time_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->over_time_to().data(), this->over_time_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->over_time_to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryAlertsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional string create_time_from = 2;
  if (has_create_time_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_time_from().data(), this->create_time_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->create_time_from(), target);
  }

  // optional string create_time_to = 3;
  if (has_create_time_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_time_to().data(), this->create_time_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->create_time_to(), target);
  }

  // optional string alram_time_from = 4;
  if (has_alram_time_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alram_time_from().data(), this->alram_time_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->alram_time_from(), target);
  }

  // optional string alram_time_to = 5;
  if (has_alram_time_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alram_time_to().data(), this->alram_time_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->alram_time_to(), target);
  }

  // optional string over_time_from = 6;
  if (has_over_time_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->over_time_from().data(), this->over_time_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->over_time_from(), target);
  }

  // optional string over_time_to = 7;
  if (has_over_time_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->over_time_to().data(), this->over_time_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->over_time_to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryAlertsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional string create_time_from = 2;
    if (has_create_time_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_time_from());
    }

    // optional string create_time_to = 3;
    if (has_create_time_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_time_to());
    }

    // optional string alram_time_from = 4;
    if (has_alram_time_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alram_time_from());
    }

    // optional string alram_time_to = 5;
    if (has_alram_time_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alram_time_to());
    }

    // optional string over_time_from = 6;
    if (has_over_time_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->over_time_from());
    }

    // optional string over_time_to = 7;
    if (has_over_time_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->over_time_to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryAlertsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryAlertsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryAlertsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryAlertsRequest::MergeFrom(const HistoryAlertsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_create_time_from()) {
      set_create_time_from(from.create_time_from());
    }
    if (from.has_create_time_to()) {
      set_create_time_to(from.create_time_to());
    }
    if (from.has_alram_time_from()) {
      set_alram_time_from(from.alram_time_from());
    }
    if (from.has_alram_time_to()) {
      set_alram_time_to(from.alram_time_to());
    }
    if (from.has_over_time_from()) {
      set_over_time_from(from.over_time_from());
    }
    if (from.has_over_time_to()) {
      set_over_time_to(from.over_time_to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryAlertsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryAlertsRequest::CopyFrom(const HistoryAlertsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryAlertsRequest::IsInitialized() const {

  return true;
}

void HistoryAlertsRequest::Swap(HistoryAlertsRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(create_time_from_, other->create_time_from_);
    std::swap(create_time_to_, other->create_time_to_);
    std::swap(alram_time_from_, other->alram_time_from_);
    std::swap(alram_time_to_, other->alram_time_to_);
    std::swap(over_time_from_, other->over_time_from_);
    std::swap(over_time_to_, other->over_time_to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryAlertsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryAlertsRequest_descriptor_;
  metadata.reflection = HistoryAlertsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryAlert::kIdFieldNumber;
const int HistoryAlert::kNameFieldNumber;
const int HistoryAlert::kLevelFieldNumber;
const int HistoryAlert::kDescribeFieldNumber;
const int HistoryAlert::kAlarmTimeFieldNumber;
const int HistoryAlert::kUseCarsFieldNumber;
const int HistoryAlert::kCreateTimeFieldNumber;
const int HistoryAlert::kOverTimeFieldNumber;
#endif  // !_MSC_VER

HistoryAlert::HistoryAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryAlert::InitAsDefaultInstance() {
}

HistoryAlert::HistoryAlert(const HistoryAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryAlert::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alarm_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  use_cars_ = 0u;
  create_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  over_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryAlert::~HistoryAlert() {
  SharedDtor();
}

void HistoryAlert::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (alarm_time_ != &::google::protobuf::internal::kEmptyString) {
    delete alarm_time_;
  }
  if (create_time_ != &::google::protobuf::internal::kEmptyString) {
    delete create_time_;
  }
  if (over_time_ != &::google::protobuf::internal::kEmptyString) {
    delete over_time_;
  }
  if (this != default_instance_) {
  }
}

void HistoryAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryAlert_descriptor_;
}

const HistoryAlert& HistoryAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

HistoryAlert* HistoryAlert::default_instance_ = NULL;

HistoryAlert* HistoryAlert::New() const {
  return new HistoryAlert;
}

void HistoryAlert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::kEmptyString) {
        describe_->clear();
      }
    }
    if (has_alarm_time()) {
      if (alarm_time_ != &::google::protobuf::internal::kEmptyString) {
        alarm_time_->clear();
      }
    }
    use_cars_ = 0u;
    if (has_create_time()) {
      if (create_time_ != &::google::protobuf::internal::kEmptyString) {
        create_time_->clear();
      }
    }
    if (has_over_time()) {
      if (over_time_ != &::google::protobuf::internal::kEmptyString) {
        over_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional .app.terminal.AlertLevel level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::terminal::AlertLevel_IsValid(value)) {
            set_level(static_cast< ::app::terminal::AlertLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_describe;
        break;
      }

      // optional bytes describe = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_describe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_alarm_time;
        break;
      }

      // optional string alarm_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alarm_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarm_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alarm_time().data(), this->alarm_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_use_cars;
        break;
      }

      // optional fixed32 use_cars = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_use_cars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &use_cars_)));
          set_has_use_cars();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_create_time;
        break;
      }

      // optional string create_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->create_time().data(), this->create_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_over_time;
        break;
      }

      // optional string over_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_over_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_over_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->over_time().data(), this->over_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional .app.terminal.AlertLevel level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->level(), output);
  }

  // optional bytes describe = 4;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->describe(), output);
  }

  // optional string alarm_time = 5;
  if (has_alarm_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarm_time().data(), this->alarm_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->alarm_time(), output);
  }

  // optional fixed32 use_cars = 6;
  if (has_use_cars()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->use_cars(), output);
  }

  // optional string create_time = 7;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_time().data(), this->create_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->create_time(), output);
  }

  // optional string over_time = 8;
  if (has_over_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->over_time().data(), this->over_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->over_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional .app.terminal.AlertLevel level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->level(), target);
  }

  // optional bytes describe = 4;
  if (has_describe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->describe(), target);
  }

  // optional string alarm_time = 5;
  if (has_alarm_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarm_time().data(), this->alarm_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->alarm_time(), target);
  }

  // optional fixed32 use_cars = 6;
  if (has_use_cars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->use_cars(), target);
  }

  // optional string create_time = 7;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_time().data(), this->create_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->create_time(), target);
  }

  // optional string over_time = 8;
  if (has_over_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->over_time().data(), this->over_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->over_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional .app.terminal.AlertLevel level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
    }

    // optional bytes describe = 4;
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->describe());
    }

    // optional string alarm_time = 5;
    if (has_alarm_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarm_time());
    }

    // optional fixed32 use_cars = 6;
    if (has_use_cars()) {
      total_size += 1 + 4;
    }

    // optional string create_time = 7;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_time());
    }

    // optional string over_time = 8;
    if (has_over_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->over_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryAlert::MergeFrom(const HistoryAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
    if (from.has_alarm_time()) {
      set_alarm_time(from.alarm_time());
    }
    if (from.has_use_cars()) {
      set_use_cars(from.use_cars());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_over_time()) {
      set_over_time(from.over_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryAlert::CopyFrom(const HistoryAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryAlert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HistoryAlert::Swap(HistoryAlert* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(describe_, other->describe_);
    std::swap(alarm_time_, other->alarm_time_);
    std::swap(use_cars_, other->use_cars_);
    std::swap(create_time_, other->create_time_);
    std::swap(over_time_, other->over_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryAlert_descriptor_;
  metadata.reflection = HistoryAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryAlertsResponse::kHistoryAlertsFieldNumber;
#endif  // !_MSC_VER

HistoryAlertsResponse::HistoryAlertsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryAlertsResponse::InitAsDefaultInstance() {
}

HistoryAlertsResponse::HistoryAlertsResponse(const HistoryAlertsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryAlertsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryAlertsResponse::~HistoryAlertsResponse() {
  SharedDtor();
}

void HistoryAlertsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryAlertsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryAlertsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryAlertsResponse_descriptor_;
}

const HistoryAlertsResponse& HistoryAlertsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

HistoryAlertsResponse* HistoryAlertsResponse::default_instance_ = NULL;

HistoryAlertsResponse* HistoryAlertsResponse::New() const {
  return new HistoryAlertsResponse;
}

void HistoryAlertsResponse::Clear() {
  history_alerts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryAlertsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.terminal.HistoryAlert history_alerts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_alerts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_alerts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_history_alerts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryAlertsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.terminal.HistoryAlert history_alerts = 1;
  for (int i = 0; i < this->history_alerts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->history_alerts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryAlertsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.terminal.HistoryAlert history_alerts = 1;
  for (int i = 0; i < this->history_alerts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->history_alerts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryAlertsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .app.terminal.HistoryAlert history_alerts = 1;
  total_size += 1 * this->history_alerts_size();
  for (int i = 0; i < this->history_alerts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_alerts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryAlertsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryAlertsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryAlertsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryAlertsResponse::MergeFrom(const HistoryAlertsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_alerts_.MergeFrom(from.history_alerts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryAlertsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryAlertsResponse::CopyFrom(const HistoryAlertsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryAlertsResponse::IsInitialized() const {

  for (int i = 0; i < history_alerts_size(); i++) {
    if (!this->history_alerts(i).IsInitialized()) return false;
  }
  return true;
}

void HistoryAlertsResponse::Swap(HistoryAlertsResponse* other) {
  if (other != this) {
    history_alerts_.Swap(&other->history_alerts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryAlertsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryAlertsResponse_descriptor_;
  metadata.reflection = HistoryAlertsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryAlertRequest::kHistoryAlertIdFieldNumber;
#endif  // !_MSC_VER

HistoryAlertRequest::HistoryAlertRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryAlertRequest::InitAsDefaultInstance() {
}

HistoryAlertRequest::HistoryAlertRequest(const HistoryAlertRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryAlertRequest::SharedCtor() {
  _cached_size_ = 0;
  history_alert_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryAlertRequest::~HistoryAlertRequest() {
  SharedDtor();
}

void HistoryAlertRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryAlertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryAlertRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryAlertRequest_descriptor_;
}

const HistoryAlertRequest& HistoryAlertRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

HistoryAlertRequest* HistoryAlertRequest::default_instance_ = NULL;

HistoryAlertRequest* HistoryAlertRequest::New() const {
  return new HistoryAlertRequest;
}

void HistoryAlertRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    history_alert_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryAlertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 history_alert_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &history_alert_id_)));
          set_has_history_alert_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryAlertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 history_alert_id = 1;
  if (has_history_alert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->history_alert_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryAlertRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 history_alert_id = 1;
  if (has_history_alert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->history_alert_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryAlertRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 history_alert_id = 1;
    if (has_history_alert_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryAlertRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryAlertRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryAlertRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryAlertRequest::MergeFrom(const HistoryAlertRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history_alert_id()) {
      set_history_alert_id(from.history_alert_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryAlertRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryAlertRequest::CopyFrom(const HistoryAlertRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryAlertRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HistoryAlertRequest::Swap(HistoryAlertRequest* other) {
  if (other != this) {
    std::swap(history_alert_id_, other->history_alert_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryAlertRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryAlertRequest_descriptor_;
  metadata.reflection = HistoryAlertRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryAlertResponse::kHistoryAlertFieldNumber;
#endif  // !_MSC_VER

HistoryAlertResponse::HistoryAlertResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryAlertResponse::InitAsDefaultInstance() {
  history_alert_ = const_cast< ::app::terminal::HistoryAlert*>(&::app::terminal::HistoryAlert::default_instance());
}

HistoryAlertResponse::HistoryAlertResponse(const HistoryAlertResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryAlertResponse::SharedCtor() {
  _cached_size_ = 0;
  history_alert_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryAlertResponse::~HistoryAlertResponse() {
  SharedDtor();
}

void HistoryAlertResponse::SharedDtor() {
  if (this != default_instance_) {
    delete history_alert_;
  }
}

void HistoryAlertResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryAlertResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryAlertResponse_descriptor_;
}

const HistoryAlertResponse& HistoryAlertResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

HistoryAlertResponse* HistoryAlertResponse::default_instance_ = NULL;

HistoryAlertResponse* HistoryAlertResponse::New() const {
  return new HistoryAlertResponse;
}

void HistoryAlertResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_history_alert()) {
      if (history_alert_ != NULL) history_alert_->::app::terminal::HistoryAlert::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryAlertResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .app.terminal.HistoryAlert history_alert = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryAlertResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .app.terminal.HistoryAlert history_alert = 1;
  if (has_history_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->history_alert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryAlertResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .app.terminal.HistoryAlert history_alert = 1;
  if (has_history_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->history_alert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryAlertResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .app.terminal.HistoryAlert history_alert = 1;
    if (has_history_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_alert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryAlertResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryAlertResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryAlertResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryAlertResponse::MergeFrom(const HistoryAlertResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history_alert()) {
      mutable_history_alert()->::app::terminal::HistoryAlert::MergeFrom(from.history_alert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryAlertResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryAlertResponse::CopyFrom(const HistoryAlertResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryAlertResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_history_alert()) {
    if (!this->history_alert().IsInitialized()) return false;
  }
  return true;
}

void HistoryAlertResponse::Swap(HistoryAlertResponse* other) {
  if (other != this) {
    std::swap(history_alert_, other->history_alert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryAlertResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryAlertResponse_descriptor_;
  metadata.reflection = HistoryAlertResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryAlertMessageRequest::kHistoryAlertIdFieldNumber;
const int HistoryAlertMessageRequest::kFromMessageIdFieldNumber;
const int HistoryAlertMessageRequest::kFromTimeFieldNumber;
const int HistoryAlertMessageRequest::kMaxMessageCountFieldNumber;
#endif  // !_MSC_VER

HistoryAlertMessageRequest::HistoryAlertMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryAlertMessageRequest::InitAsDefaultInstance() {
}

HistoryAlertMessageRequest::HistoryAlertMessageRequest(const HistoryAlertMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryAlertMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  history_alert_id_ = 0u;
  from_message_id_ = 0u;
  from_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_message_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryAlertMessageRequest::~HistoryAlertMessageRequest() {
  SharedDtor();
}

void HistoryAlertMessageRequest::SharedDtor() {
  if (from_time_ != &::google::protobuf::internal::kEmptyString) {
    delete from_time_;
  }
  if (this != default_instance_) {
  }
}

void HistoryAlertMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryAlertMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryAlertMessageRequest_descriptor_;
}

const HistoryAlertMessageRequest& HistoryAlertMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

HistoryAlertMessageRequest* HistoryAlertMessageRequest::default_instance_ = NULL;

HistoryAlertMessageRequest* HistoryAlertMessageRequest::New() const {
  return new HistoryAlertMessageRequest;
}

void HistoryAlertMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    history_alert_id_ = 0u;
    from_message_id_ = 0u;
    if (has_from_time()) {
      if (from_time_ != &::google::protobuf::internal::kEmptyString) {
        from_time_->clear();
      }
    }
    max_message_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryAlertMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 history_alert_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &history_alert_id_)));
          set_has_history_alert_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_from_message_id;
        break;
      }

      // optional fixed32 from_message_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_message_id_)));
          set_has_from_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from_time;
        break;
      }

      // optional string from_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_time().data(), this->from_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_max_message_count;
        break;
      }

      // required fixed32 max_message_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &max_message_count_)));
          set_has_max_message_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryAlertMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 history_alert_id = 1;
  if (has_history_alert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->history_alert_id(), output);
  }

  // optional fixed32 from_message_id = 2;
  if (has_from_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->from_message_id(), output);
  }

  // optional string from_time = 3;
  if (has_from_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_time().data(), this->from_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->from_time(), output);
  }

  // required fixed32 max_message_count = 4;
  if (has_max_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->max_message_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryAlertMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 history_alert_id = 1;
  if (has_history_alert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->history_alert_id(), target);
  }

  // optional fixed32 from_message_id = 2;
  if (has_from_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->from_message_id(), target);
  }

  // optional string from_time = 3;
  if (has_from_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_time().data(), this->from_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_time(), target);
  }

  // required fixed32 max_message_count = 4;
  if (has_max_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->max_message_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryAlertMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 history_alert_id = 1;
    if (has_history_alert_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_message_id = 2;
    if (has_from_message_id()) {
      total_size += 1 + 4;
    }

    // optional string from_time = 3;
    if (has_from_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_time());
    }

    // required fixed32 max_message_count = 4;
    if (has_max_message_count()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryAlertMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryAlertMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryAlertMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryAlertMessageRequest::MergeFrom(const HistoryAlertMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history_alert_id()) {
      set_history_alert_id(from.history_alert_id());
    }
    if (from.has_from_message_id()) {
      set_from_message_id(from.from_message_id());
    }
    if (from.has_from_time()) {
      set_from_time(from.from_time());
    }
    if (from.has_max_message_count()) {
      set_max_message_count(from.max_message_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryAlertMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryAlertMessageRequest::CopyFrom(const HistoryAlertMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryAlertMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void HistoryAlertMessageRequest::Swap(HistoryAlertMessageRequest* other) {
  if (other != this) {
    std::swap(history_alert_id_, other->history_alert_id_);
    std::swap(from_message_id_, other->from_message_id_);
    std::swap(from_time_, other->from_time_);
    std::swap(max_message_count_, other->max_message_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryAlertMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryAlertMessageRequest_descriptor_;
  metadata.reflection = HistoryAlertMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryAlertMessageResponse::kHistoryAlertIdFieldNumber;
const int HistoryAlertMessageResponse::kMessagesFieldNumber;
const int HistoryAlertMessageResponse::kLeaveMessageCountFieldNumber;
#endif  // !_MSC_VER

HistoryAlertMessageResponse::HistoryAlertMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryAlertMessageResponse::InitAsDefaultInstance() {
}

HistoryAlertMessageResponse::HistoryAlertMessageResponse(const HistoryAlertMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryAlertMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  history_alert_id_ = 0u;
  leave_message_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryAlertMessageResponse::~HistoryAlertMessageResponse() {
  SharedDtor();
}

void HistoryAlertMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryAlertMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryAlertMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryAlertMessageResponse_descriptor_;
}

const HistoryAlertMessageResponse& HistoryAlertMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

HistoryAlertMessageResponse* HistoryAlertMessageResponse::default_instance_ = NULL;

HistoryAlertMessageResponse* HistoryAlertMessageResponse::New() const {
  return new HistoryAlertMessageResponse;
}

void HistoryAlertMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    history_alert_id_ = 0u;
    leave_message_count_ = 0u;
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryAlertMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 history_alert_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &history_alert_id_)));
          set_has_history_alert_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        break;
      }

      // repeated .app.terminal.MediaMessage messages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        if (input->ExpectTag(29)) goto parse_leave_message_count;
        break;
      }

      // required fixed32 leave_message_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leave_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &leave_message_count_)));
          set_has_leave_message_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryAlertMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 history_alert_id = 1;
  if (has_history_alert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->history_alert_id(), output);
  }

  // repeated .app.terminal.MediaMessage messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->messages(i), output);
  }

  // required fixed32 leave_message_count = 3;
  if (has_leave_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->leave_message_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryAlertMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 history_alert_id = 1;
  if (has_history_alert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->history_alert_id(), target);
  }

  // repeated .app.terminal.MediaMessage messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->messages(i), target);
  }

  // required fixed32 leave_message_count = 3;
  if (has_leave_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->leave_message_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryAlertMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 history_alert_id = 1;
    if (has_history_alert_id()) {
      total_size += 1 + 4;
    }

    // required fixed32 leave_message_count = 3;
    if (has_leave_message_count()) {
      total_size += 1 + 4;
    }

  }
  // repeated .app.terminal.MediaMessage messages = 2;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryAlertMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryAlertMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryAlertMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryAlertMessageResponse::MergeFrom(const HistoryAlertMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history_alert_id()) {
      set_history_alert_id(from.history_alert_id());
    }
    if (from.has_leave_message_count()) {
      set_leave_message_count(from.leave_message_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryAlertMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryAlertMessageResponse::CopyFrom(const HistoryAlertMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryAlertMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < messages_size(); i++) {
    if (!this->messages(i).IsInitialized()) return false;
  }
  return true;
}

void HistoryAlertMessageResponse::Swap(HistoryAlertMessageResponse* other) {
  if (other != this) {
    std::swap(history_alert_id_, other->history_alert_id_);
    messages_.Swap(&other->messages_);
    std::swap(leave_message_count_, other->leave_message_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryAlertMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryAlertMessageResponse_descriptor_;
  metadata.reflection = HistoryAlertMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountsResponse::kIdsFieldNumber;
#endif  // !_MSC_VER

AccountsResponse::AccountsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountsResponse::InitAsDefaultInstance() {
}

AccountsResponse::AccountsResponse(const AccountsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountsResponse::~AccountsResponse() {
  SharedDtor();
}

void AccountsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountsResponse_descriptor_;
}

const AccountsResponse& AccountsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

AccountsResponse* AccountsResponse::default_instance_ = NULL;

AccountsResponse* AccountsResponse::New() const {
  return new AccountsResponse;
}

void AccountsResponse::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 13, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      1, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(1, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountsResponse::ByteSize() const {
  int total_size = 0;

  // repeated fixed32 ids = 1;
  {
    int data_size = 0;
    data_size = 4 * this->ids_size();
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountsResponse::MergeFrom(const AccountsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountsResponse::CopyFrom(const AccountsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountsResponse::IsInitialized() const {

  return true;
}

void AccountsResponse::Swap(AccountsResponse* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountsResponse_descriptor_;
  metadata.reflection = AccountsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountRequest::kIdFieldNumber;
#endif  // !_MSC_VER

AccountRequest::AccountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountRequest::InitAsDefaultInstance() {
}

AccountRequest::AccountRequest(const AccountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountRequest::~AccountRequest() {
  SharedDtor();
}

void AccountRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountRequest_descriptor_;
}

const AccountRequest& AccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

AccountRequest* AccountRequest::default_instance_ = NULL;

AccountRequest* AccountRequest::New() const {
  return new AccountRequest;
}

void AccountRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountRequest::MergeFrom(const AccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountRequest::CopyFrom(const AccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AccountRequest::Swap(AccountRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountRequest_descriptor_;
  metadata.reflection = AccountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountResponse::kIdFieldNumber;
const int AccountResponse::kNameFieldNumber;
const int AccountResponse::kNumberFieldNumber;
#endif  // !_MSC_VER

AccountResponse::AccountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountResponse::InitAsDefaultInstance() {
}

AccountResponse::AccountResponse(const AccountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountResponse::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountResponse::~AccountResponse() {
  SharedDtor();
}

void AccountResponse::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (this != default_instance_) {
  }
}

void AccountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountResponse_descriptor_;
}

const AccountResponse& AccountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

AccountResponse* AccountResponse::default_instance_ = NULL;

AccountResponse* AccountResponse::New() const {
  return new AccountResponse;
}

void AccountResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::kEmptyString) {
        number_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_number;
        break;
      }

      // required string number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required string number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required string number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required string number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountResponse::MergeFrom(const AccountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountResponse::CopyFrom(const AccountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AccountResponse::Swap(AccountResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountResponse_descriptor_;
  metadata.reflection = AccountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupSubscribeRequest::kParticipantSubscribingFieldNumber;
const int GroupSubscribeRequest::kMessageSubscribingFieldNumber;
const int GroupSubscribeRequest::kGroupIdFieldNumber;
const int GroupSubscribeRequest::kEffectCurrentFieldNumber;
const int GroupSubscribeRequest::kEffectFollowFieldNumber;
#endif  // !_MSC_VER

GroupSubscribeRequest::GroupSubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupSubscribeRequest::InitAsDefaultInstance() {
}

GroupSubscribeRequest::GroupSubscribeRequest(const GroupSubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupSubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  participant_subscribing_ = false;
  message_subscribing_ = false;
  group_id_ = 0u;
  effect_current_ = false;
  effect_follow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupSubscribeRequest::~GroupSubscribeRequest() {
  SharedDtor();
}

void GroupSubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupSubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupSubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupSubscribeRequest_descriptor_;
}

const GroupSubscribeRequest& GroupSubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

GroupSubscribeRequest* GroupSubscribeRequest::default_instance_ = NULL;

GroupSubscribeRequest* GroupSubscribeRequest::New() const {
  return new GroupSubscribeRequest;
}

void GroupSubscribeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    participant_subscribing_ = false;
    message_subscribing_ = false;
    group_id_ = 0u;
    effect_current_ = false;
    effect_follow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupSubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool participant_subscribing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &participant_subscribing_)));
          set_has_participant_subscribing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_message_subscribing;
        break;
      }

      // optional bool message_subscribing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_subscribing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &message_subscribing_)));
          set_has_message_subscribing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_group_id;
        break;
      }

      // optional fixed32 group_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_effect_current;
        break;
      }

      // optional bool effect_current = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &effect_current_)));
          set_has_effect_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_effect_follow;
        break;
      }

      // optional bool effect_follow = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_follow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &effect_follow_)));
          set_has_effect_follow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupSubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool participant_subscribing = 1;
  if (has_participant_subscribing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->participant_subscribing(), output);
  }

  // optional bool message_subscribing = 2;
  if (has_message_subscribing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->message_subscribing(), output);
  }

  // optional fixed32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->group_id(), output);
  }

  // optional bool effect_current = 4;
  if (has_effect_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->effect_current(), output);
  }

  // optional bool effect_follow = 5;
  if (has_effect_follow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->effect_follow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupSubscribeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool participant_subscribing = 1;
  if (has_participant_subscribing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->participant_subscribing(), target);
  }

  // optional bool message_subscribing = 2;
  if (has_message_subscribing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->message_subscribing(), target);
  }

  // optional fixed32 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->group_id(), target);
  }

  // optional bool effect_current = 4;
  if (has_effect_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->effect_current(), target);
  }

  // optional bool effect_follow = 5;
  if (has_effect_follow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->effect_follow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupSubscribeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool participant_subscribing = 1;
    if (has_participant_subscribing()) {
      total_size += 1 + 1;
    }

    // optional bool message_subscribing = 2;
    if (has_message_subscribing()) {
      total_size += 1 + 1;
    }

    // optional fixed32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

    // optional bool effect_current = 4;
    if (has_effect_current()) {
      total_size += 1 + 1;
    }

    // optional bool effect_follow = 5;
    if (has_effect_follow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupSubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupSubscribeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupSubscribeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupSubscribeRequest::MergeFrom(const GroupSubscribeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_participant_subscribing()) {
      set_participant_subscribing(from.participant_subscribing());
    }
    if (from.has_message_subscribing()) {
      set_message_subscribing(from.message_subscribing());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_effect_current()) {
      set_effect_current(from.effect_current());
    }
    if (from.has_effect_follow()) {
      set_effect_follow(from.effect_follow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupSubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupSubscribeRequest::CopyFrom(const GroupSubscribeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupSubscribeRequest::IsInitialized() const {

  return true;
}

void GroupSubscribeRequest::Swap(GroupSubscribeRequest* other) {
  if (other != this) {
    std::swap(participant_subscribing_, other->participant_subscribing_);
    std::swap(message_subscribing_, other->message_subscribing_);
    std::swap(group_id_, other->group_id_);
    std::swap(effect_current_, other->effect_current_);
    std::swap(effect_follow_, other->effect_follow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupSubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupSubscribeRequest_descriptor_;
  metadata.reflection = GroupSubscribeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kLoginFieldNumber;
const int Request::kGroupParticipantsFieldNumber;
const int Request::kGroupMessageFieldNumber;
const int Request::kJoinGroupFieldNumber;
const int Request::kConnectGroupFieldNumber;
const int Request::kSpeakFieldNumber;
const int Request::kJoinSessionFieldNumber;
const int Request::kLeaveSessionFieldNumber;
const int Request::kReleaseTokenFieldNumber;
const int Request::kAppointSpeakFieldNumber;
const int Request::kSendMessageFieldNumber;
const int Request::kSubscribeLocationFieldNumber;
const int Request::kAlertFieldNumber;
const int Request::kHistoryAlertsFieldNumber;
const int Request::kHistoryAlertFieldNumber;
const int Request::kHistoryAlertMessageFieldNumber;
const int Request::kAccountFieldNumber;
const int Request::kGroupSubscribeFieldNumber;
const int Request::kGroupsFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
  login_ = const_cast< ::app::terminal::LoginRequest*>(&::app::terminal::LoginRequest::default_instance());
  group_participants_ = const_cast< ::app::terminal::GroupParticipantsRequest*>(&::app::terminal::GroupParticipantsRequest::default_instance());
  group_message_ = const_cast< ::app::terminal::MediaMessageRequest*>(&::app::terminal::MediaMessageRequest::default_instance());
  join_group_ = const_cast< ::app::terminal::JoinGroupRequest*>(&::app::terminal::JoinGroupRequest::default_instance());
  connect_group_ = const_cast< ::app::terminal::ConnectGroupRequest*>(&::app::terminal::ConnectGroupRequest::default_instance());
  speak_ = const_cast< ::app::terminal::SpeakRequest*>(&::app::terminal::SpeakRequest::default_instance());
  join_session_ = const_cast< ::app::terminal::JoinSessionRequest*>(&::app::terminal::JoinSessionRequest::default_instance());
  leave_session_ = const_cast< ::app::terminal::LeaveSessionRequest*>(&::app::terminal::LeaveSessionRequest::default_instance());
  release_token_ = const_cast< ::app::terminal::ReleaseTokenRequest*>(&::app::terminal::ReleaseTokenRequest::default_instance());
  appoint_speak_ = const_cast< ::app::terminal::AppointSpeakRequest*>(&::app::terminal::AppointSpeakRequest::default_instance());
  send_message_ = const_cast< ::app::terminal::SendMessageRequest*>(&::app::terminal::SendMessageRequest::default_instance());
  subscribe_location_ = const_cast< ::app::terminal::SubscribeLocationRequest*>(&::app::terminal::SubscribeLocationRequest::default_instance());
  alert_ = const_cast< ::app::terminal::AlertRequest*>(&::app::terminal::AlertRequest::default_instance());
  history_alerts_ = const_cast< ::app::terminal::HistoryAlertsRequest*>(&::app::terminal::HistoryAlertsRequest::default_instance());
  history_alert_ = const_cast< ::app::terminal::HistoryAlertRequest*>(&::app::terminal::HistoryAlertRequest::default_instance());
  history_alert_message_ = const_cast< ::app::terminal::HistoryAlertMessageRequest*>(&::app::terminal::HistoryAlertMessageRequest::default_instance());
  account_ = const_cast< ::app::terminal::AccountRequest*>(&::app::terminal::AccountRequest::default_instance());
  group_subscribe_ = const_cast< ::app::terminal::GroupSubscribeRequest*>(&::app::terminal::GroupSubscribeRequest::default_instance());
  groups_ = const_cast< ::app::terminal::GroupsRequest*>(&::app::terminal::GroupsRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  login_ = NULL;
  group_participants_ = NULL;
  group_message_ = NULL;
  join_group_ = NULL;
  connect_group_ = NULL;
  speak_ = NULL;
  join_session_ = NULL;
  leave_session_ = NULL;
  release_token_ = NULL;
  appoint_speak_ = NULL;
  send_message_ = NULL;
  subscribe_location_ = NULL;
  alert_ = NULL;
  history_alerts_ = NULL;
  history_alert_ = NULL;
  history_alert_message_ = NULL;
  account_ = NULL;
  group_subscribe_ = NULL;
  groups_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete login_;
    delete group_participants_;
    delete group_message_;
    delete join_group_;
    delete connect_group_;
    delete speak_;
    delete join_session_;
    delete leave_session_;
    delete release_token_;
    delete appoint_speak_;
    delete send_message_;
    delete subscribe_location_;
    delete alert_;
    delete history_alerts_;
    delete history_alert_;
    delete history_alert_message_;
    delete account_;
    delete group_subscribe_;
    delete groups_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_login()) {
      if (login_ != NULL) login_->::app::terminal::LoginRequest::Clear();
    }
    if (has_group_participants()) {
      if (group_participants_ != NULL) group_participants_->::app::terminal::GroupParticipantsRequest::Clear();
    }
    if (has_group_message()) {
      if (group_message_ != NULL) group_message_->::app::terminal::MediaMessageRequest::Clear();
    }
    if (has_join_group()) {
      if (join_group_ != NULL) join_group_->::app::terminal::JoinGroupRequest::Clear();
    }
    if (has_connect_group()) {
      if (connect_group_ != NULL) connect_group_->::app::terminal::ConnectGroupRequest::Clear();
    }
    if (has_speak()) {
      if (speak_ != NULL) speak_->::app::terminal::SpeakRequest::Clear();
    }
    if (has_join_session()) {
      if (join_session_ != NULL) join_session_->::app::terminal::JoinSessionRequest::Clear();
    }
    if (has_leave_session()) {
      if (leave_session_ != NULL) leave_session_->::app::terminal::LeaveSessionRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_release_token()) {
      if (release_token_ != NULL) release_token_->::app::terminal::ReleaseTokenRequest::Clear();
    }
    if (has_appoint_speak()) {
      if (appoint_speak_ != NULL) appoint_speak_->::app::terminal::AppointSpeakRequest::Clear();
    }
    if (has_send_message()) {
      if (send_message_ != NULL) send_message_->::app::terminal::SendMessageRequest::Clear();
    }
    if (has_subscribe_location()) {
      if (subscribe_location_ != NULL) subscribe_location_->::app::terminal::SubscribeLocationRequest::Clear();
    }
    if (has_alert()) {
      if (alert_ != NULL) alert_->::app::terminal::AlertRequest::Clear();
    }
    if (has_history_alerts()) {
      if (history_alerts_ != NULL) history_alerts_->::app::terminal::HistoryAlertsRequest::Clear();
    }
    if (has_history_alert()) {
      if (history_alert_ != NULL) history_alert_->::app::terminal::HistoryAlertRequest::Clear();
    }
    if (has_history_alert_message()) {
      if (history_alert_message_ != NULL) history_alert_message_->::app::terminal::HistoryAlertMessageRequest::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_account()) {
      if (account_ != NULL) account_->::app::terminal::AccountRequest::Clear();
    }
    if (has_group_subscribe()) {
      if (group_subscribe_ != NULL) group_subscribe_->::app::terminal::GroupSubscribeRequest::Clear();
    }
    if (has_groups()) {
      if (groups_ != NULL) groups_->::app::terminal::GroupsRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.terminal.LoginRequest login = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_participants;
        break;
      }

      // optional .app.terminal.GroupParticipantsRequest group_participants = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_participants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_participants()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group_message;
        break;
      }

      // optional .app.terminal.MediaMessageRequest group_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_join_group;
        break;
      }

      // optional .app.terminal.JoinGroupRequest join_group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_join_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_join_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_connect_group;
        break;
      }

      // optional .app.terminal.ConnectGroupRequest connect_group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_speak;
        break;
      }

      // optional .app.terminal.SpeakRequest speak = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speak()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_join_session;
        break;
      }

      // optional .app.terminal.JoinSessionRequest join_session = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_join_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_join_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_leave_session;
        break;
      }

      // optional .app.terminal.LeaveSessionRequest leave_session = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leave_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leave_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_release_token;
        break;
      }

      // optional .app.terminal.ReleaseTokenRequest release_token = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_release_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_release_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_appoint_speak;
        break;
      }

      // optional .app.terminal.AppointSpeakRequest appoint_speak = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appoint_speak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appoint_speak()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_send_message;
        break;
      }

      // optional .app.terminal.SendMessageRequest send_message = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_subscribe_location;
        break;
      }

      // optional .app.terminal.SubscribeLocationRequest subscribe_location = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscribe_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscribe_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_alert;
        break;
      }

      // optional .app.terminal.AlertRequest alert = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_history_alerts;
        break;
      }

      // optional .app.terminal.HistoryAlertsRequest history_alerts = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_alerts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_alerts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_history_alert;
        break;
      }

      // optional .app.terminal.HistoryAlertRequest history_alert = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_history_alert_message;
        break;
      }

      // optional .app.terminal.HistoryAlertMessageRequest history_alert_message = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_alert_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_alert_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_account;
        break;
      }

      // optional .app.terminal.AccountRequest account = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_group_subscribe;
        break;
      }

      // optional .app.terminal.GroupSubscribeRequest group_subscribe = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_subscribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_subscribe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_groups;
        break;
      }

      // optional .app.terminal.GroupsRequest groups = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.terminal.LoginRequest login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->login(), output);
  }

  // optional .app.terminal.GroupParticipantsRequest group_participants = 2;
  if (has_group_participants()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_participants(), output);
  }

  // optional .app.terminal.MediaMessageRequest group_message = 3;
  if (has_group_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->group_message(), output);
  }

  // optional .app.terminal.JoinGroupRequest join_group = 4;
  if (has_join_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->join_group(), output);
  }

  // optional .app.terminal.ConnectGroupRequest connect_group = 5;
  if (has_connect_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->connect_group(), output);
  }

  // optional .app.terminal.SpeakRequest speak = 6;
  if (has_speak()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->speak(), output);
  }

  // optional .app.terminal.JoinSessionRequest join_session = 7;
  if (has_join_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->join_session(), output);
  }

  // optional .app.terminal.LeaveSessionRequest leave_session = 8;
  if (has_leave_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->leave_session(), output);
  }

  // optional .app.terminal.ReleaseTokenRequest release_token = 9;
  if (has_release_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->release_token(), output);
  }

  // optional .app.terminal.AppointSpeakRequest appoint_speak = 10;
  if (has_appoint_speak()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->appoint_speak(), output);
  }

  // optional .app.terminal.SendMessageRequest send_message = 11;
  if (has_send_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->send_message(), output);
  }

  // optional .app.terminal.SubscribeLocationRequest subscribe_location = 12;
  if (has_subscribe_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->subscribe_location(), output);
  }

  // optional .app.terminal.AlertRequest alert = 13;
  if (has_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->alert(), output);
  }

  // optional .app.terminal.HistoryAlertsRequest history_alerts = 14;
  if (has_history_alerts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->history_alerts(), output);
  }

  // optional .app.terminal.HistoryAlertRequest history_alert = 15;
  if (has_history_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->history_alert(), output);
  }

  // optional .app.terminal.HistoryAlertMessageRequest history_alert_message = 16;
  if (has_history_alert_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->history_alert_message(), output);
  }

  // optional .app.terminal.AccountRequest account = 17;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->account(), output);
  }

  // optional .app.terminal.GroupSubscribeRequest group_subscribe = 18;
  if (has_group_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->group_subscribe(), output);
  }

  // optional .app.terminal.GroupsRequest groups = 19;
  if (has_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->groups(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.terminal.LoginRequest login = 1;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->login(), target);
  }

  // optional .app.terminal.GroupParticipantsRequest group_participants = 2;
  if (has_group_participants()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group_participants(), target);
  }

  // optional .app.terminal.MediaMessageRequest group_message = 3;
  if (has_group_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->group_message(), target);
  }

  // optional .app.terminal.JoinGroupRequest join_group = 4;
  if (has_join_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->join_group(), target);
  }

  // optional .app.terminal.ConnectGroupRequest connect_group = 5;
  if (has_connect_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->connect_group(), target);
  }

  // optional .app.terminal.SpeakRequest speak = 6;
  if (has_speak()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->speak(), target);
  }

  // optional .app.terminal.JoinSessionRequest join_session = 7;
  if (has_join_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->join_session(), target);
  }

  // optional .app.terminal.LeaveSessionRequest leave_session = 8;
  if (has_leave_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->leave_session(), target);
  }

  // optional .app.terminal.ReleaseTokenRequest release_token = 9;
  if (has_release_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->release_token(), target);
  }

  // optional .app.terminal.AppointSpeakRequest appoint_speak = 10;
  if (has_appoint_speak()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->appoint_speak(), target);
  }

  // optional .app.terminal.SendMessageRequest send_message = 11;
  if (has_send_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->send_message(), target);
  }

  // optional .app.terminal.SubscribeLocationRequest subscribe_location = 12;
  if (has_subscribe_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->subscribe_location(), target);
  }

  // optional .app.terminal.AlertRequest alert = 13;
  if (has_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->alert(), target);
  }

  // optional .app.terminal.HistoryAlertsRequest history_alerts = 14;
  if (has_history_alerts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->history_alerts(), target);
  }

  // optional .app.terminal.HistoryAlertRequest history_alert = 15;
  if (has_history_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->history_alert(), target);
  }

  // optional .app.terminal.HistoryAlertMessageRequest history_alert_message = 16;
  if (has_history_alert_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->history_alert_message(), target);
  }

  // optional .app.terminal.AccountRequest account = 17;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->account(), target);
  }

  // optional .app.terminal.GroupSubscribeRequest group_subscribe = 18;
  if (has_group_subscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->group_subscribe(), target);
  }

  // optional .app.terminal.GroupsRequest groups = 19;
  if (has_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->groups(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.terminal.LoginRequest login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

    // optional .app.terminal.GroupParticipantsRequest group_participants = 2;
    if (has_group_participants()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_participants());
    }

    // optional .app.terminal.MediaMessageRequest group_message = 3;
    if (has_group_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_message());
    }

    // optional .app.terminal.JoinGroupRequest join_group = 4;
    if (has_join_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->join_group());
    }

    // optional .app.terminal.ConnectGroupRequest connect_group = 5;
    if (has_connect_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connect_group());
    }

    // optional .app.terminal.SpeakRequest speak = 6;
    if (has_speak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speak());
    }

    // optional .app.terminal.JoinSessionRequest join_session = 7;
    if (has_join_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->join_session());
    }

    // optional .app.terminal.LeaveSessionRequest leave_session = 8;
    if (has_leave_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leave_session());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .app.terminal.ReleaseTokenRequest release_token = 9;
    if (has_release_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->release_token());
    }

    // optional .app.terminal.AppointSpeakRequest appoint_speak = 10;
    if (has_appoint_speak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->appoint_speak());
    }

    // optional .app.terminal.SendMessageRequest send_message = 11;
    if (has_send_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->send_message());
    }

    // optional .app.terminal.SubscribeLocationRequest subscribe_location = 12;
    if (has_subscribe_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscribe_location());
    }

    // optional .app.terminal.AlertRequest alert = 13;
    if (has_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert());
    }

    // optional .app.terminal.HistoryAlertsRequest history_alerts = 14;
    if (has_history_alerts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_alerts());
    }

    // optional .app.terminal.HistoryAlertRequest history_alert = 15;
    if (has_history_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_alert());
    }

    // optional .app.terminal.HistoryAlertMessageRequest history_alert_message = 16;
    if (has_history_alert_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_alert_message());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .app.terminal.AccountRequest account = 17;
    if (has_account()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

    // optional .app.terminal.GroupSubscribeRequest group_subscribe = 18;
    if (has_group_subscribe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_subscribe());
    }

    // optional .app.terminal.GroupsRequest groups = 19;
    if (has_groups()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groups());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      mutable_login()->::app::terminal::LoginRequest::MergeFrom(from.login());
    }
    if (from.has_group_participants()) {
      mutable_group_participants()->::app::terminal::GroupParticipantsRequest::MergeFrom(from.group_participants());
    }
    if (from.has_group_message()) {
      mutable_group_message()->::app::terminal::MediaMessageRequest::MergeFrom(from.group_message());
    }
    if (from.has_join_group()) {
      mutable_join_group()->::app::terminal::JoinGroupRequest::MergeFrom(from.join_group());
    }
    if (from.has_connect_group()) {
      mutable_connect_group()->::app::terminal::ConnectGroupRequest::MergeFrom(from.connect_group());
    }
    if (from.has_speak()) {
      mutable_speak()->::app::terminal::SpeakRequest::MergeFrom(from.speak());
    }
    if (from.has_join_session()) {
      mutable_join_session()->::app::terminal::JoinSessionRequest::MergeFrom(from.join_session());
    }
    if (from.has_leave_session()) {
      mutable_leave_session()->::app::terminal::LeaveSessionRequest::MergeFrom(from.leave_session());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_release_token()) {
      mutable_release_token()->::app::terminal::ReleaseTokenRequest::MergeFrom(from.release_token());
    }
    if (from.has_appoint_speak()) {
      mutable_appoint_speak()->::app::terminal::AppointSpeakRequest::MergeFrom(from.appoint_speak());
    }
    if (from.has_send_message()) {
      mutable_send_message()->::app::terminal::SendMessageRequest::MergeFrom(from.send_message());
    }
    if (from.has_subscribe_location()) {
      mutable_subscribe_location()->::app::terminal::SubscribeLocationRequest::MergeFrom(from.subscribe_location());
    }
    if (from.has_alert()) {
      mutable_alert()->::app::terminal::AlertRequest::MergeFrom(from.alert());
    }
    if (from.has_history_alerts()) {
      mutable_history_alerts()->::app::terminal::HistoryAlertsRequest::MergeFrom(from.history_alerts());
    }
    if (from.has_history_alert()) {
      mutable_history_alert()->::app::terminal::HistoryAlertRequest::MergeFrom(from.history_alert());
    }
    if (from.has_history_alert_message()) {
      mutable_history_alert_message()->::app::terminal::HistoryAlertMessageRequest::MergeFrom(from.history_alert_message());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_account()) {
      mutable_account()->::app::terminal::AccountRequest::MergeFrom(from.account());
    }
    if (from.has_group_subscribe()) {
      mutable_group_subscribe()->::app::terminal::GroupSubscribeRequest::MergeFrom(from.group_subscribe());
    }
    if (from.has_groups()) {
      mutable_groups()->::app::terminal::GroupsRequest::MergeFrom(from.groups());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  if (has_login()) {
    if (!this->login().IsInitialized()) return false;
  }
  if (has_group_participants()) {
    if (!this->group_participants().IsInitialized()) return false;
  }
  if (has_group_message()) {
    if (!this->group_message().IsInitialized()) return false;
  }
  if (has_join_group()) {
    if (!this->join_group().IsInitialized()) return false;
  }
  if (has_connect_group()) {
    if (!this->connect_group().IsInitialized()) return false;
  }
  if (has_speak()) {
    if (!this->speak().IsInitialized()) return false;
  }
  if (has_join_session()) {
    if (!this->join_session().IsInitialized()) return false;
  }
  if (has_leave_session()) {
    if (!this->leave_session().IsInitialized()) return false;
  }
  if (has_release_token()) {
    if (!this->release_token().IsInitialized()) return false;
  }
  if (has_appoint_speak()) {
    if (!this->appoint_speak().IsInitialized()) return false;
  }
  if (has_send_message()) {
    if (!this->send_message().IsInitialized()) return false;
  }
  if (has_subscribe_location()) {
    if (!this->subscribe_location().IsInitialized()) return false;
  }
  if (has_alert()) {
    if (!this->alert().IsInitialized()) return false;
  }
  if (has_history_alert()) {
    if (!this->history_alert().IsInitialized()) return false;
  }
  if (has_history_alert_message()) {
    if (!this->history_alert_message().IsInitialized()) return false;
  }
  if (has_account()) {
    if (!this->account().IsInitialized()) return false;
  }
  if (has_groups()) {
    if (!this->groups().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(group_participants_, other->group_participants_);
    std::swap(group_message_, other->group_message_);
    std::swap(join_group_, other->join_group_);
    std::swap(connect_group_, other->connect_group_);
    std::swap(speak_, other->speak_);
    std::swap(join_session_, other->join_session_);
    std::swap(leave_session_, other->leave_session_);
    std::swap(release_token_, other->release_token_);
    std::swap(appoint_speak_, other->appoint_speak_);
    std::swap(send_message_, other->send_message_);
    std::swap(subscribe_location_, other->subscribe_location_);
    std::swap(alert_, other->alert_);
    std::swap(history_alerts_, other->history_alerts_);
    std::swap(history_alert_, other->history_alert_);
    std::swap(history_alert_message_, other->history_alert_message_);
    std::swap(account_, other->account_);
    std::swap(group_subscribe_, other->group_subscribe_);
    std::swap(groups_, other->groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kResultFieldNumber;
const int Response::kLastResponseFieldNumber;
const int Response::kErrorDescribeFieldNumber;
const int Response::kLoginFieldNumber;
const int Response::kGroupsFieldNumber;
const int Response::kGroupParticipantsFieldNumber;
const int Response::kGroupMessageFieldNumber;
const int Response::kSubscribeLocationFieldNumber;
const int Response::kAlertsFieldNumber;
const int Response::kAlertFieldNumber;
const int Response::kHistoryAlertsFieldNumber;
const int Response::kHistoryAlertFieldNumber;
const int Response::kHistoryAlertMessageFieldNumber;
const int Response::kAccountsFieldNumber;
const int Response::kAccountFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response::InitAsDefaultInstance() {
  login_ = const_cast< ::app::terminal::LoginResponse*>(&::app::terminal::LoginResponse::default_instance());
  groups_ = const_cast< ::app::terminal::GroupsResponse*>(&::app::terminal::GroupsResponse::default_instance());
  group_participants_ = const_cast< ::app::terminal::GroupParticipantsResponse*>(&::app::terminal::GroupParticipantsResponse::default_instance());
  group_message_ = const_cast< ::app::terminal::MediaMessageResponse*>(&::app::terminal::MediaMessageResponse::default_instance());
  subscribe_location_ = const_cast< ::app::terminal::SubscribeLocationResponse*>(&::app::terminal::SubscribeLocationResponse::default_instance());
  alerts_ = const_cast< ::app::terminal::AlertsResponse*>(&::app::terminal::AlertsResponse::default_instance());
  alert_ = const_cast< ::app::terminal::AlertResponse*>(&::app::terminal::AlertResponse::default_instance());
  history_alerts_ = const_cast< ::app::terminal::HistoryAlertsResponse*>(&::app::terminal::HistoryAlertsResponse::default_instance());
  history_alert_ = const_cast< ::app::terminal::HistoryAlertResponse*>(&::app::terminal::HistoryAlertResponse::default_instance());
  history_alert_message_ = const_cast< ::app::terminal::HistoryAlertMessageResponse*>(&::app::terminal::HistoryAlertMessageResponse::default_instance());
  accounts_ = const_cast< ::app::terminal::AccountsResponse*>(&::app::terminal::AccountsResponse::default_instance());
  account_ = const_cast< ::app::terminal::AccountResponse*>(&::app::terminal::AccountResponse::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  last_response_ = false;
  error_describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_ = NULL;
  groups_ = NULL;
  group_participants_ = NULL;
  group_message_ = NULL;
  subscribe_location_ = NULL;
  alerts_ = NULL;
  alert_ = NULL;
  history_alerts_ = NULL;
  history_alert_ = NULL;
  history_alert_message_ = NULL;
  accounts_ = NULL;
  account_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  SharedDtor();
}

void Response::SharedDtor() {
  if (error_describe_ != &::google::protobuf::internal::kEmptyString) {
    delete error_describe_;
  }
  if (this != default_instance_) {
    delete login_;
    delete groups_;
    delete group_participants_;
    delete group_message_;
    delete subscribe_location_;
    delete alerts_;
    delete alert_;
    delete history_alerts_;
    delete history_alert_;
    delete history_alert_message_;
    delete accounts_;
    delete account_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    last_response_ = false;
    if (has_error_describe()) {
      if (error_describe_ != &::google::protobuf::internal::kEmptyString) {
        error_describe_->clear();
      }
    }
    if (has_login()) {
      if (login_ != NULL) login_->::app::terminal::LoginResponse::Clear();
    }
    if (has_groups()) {
      if (groups_ != NULL) groups_->::app::terminal::GroupsResponse::Clear();
    }
    if (has_group_participants()) {
      if (group_participants_ != NULL) group_participants_->::app::terminal::GroupParticipantsResponse::Clear();
    }
    if (has_group_message()) {
      if (group_message_ != NULL) group_message_->::app::terminal::MediaMessageResponse::Clear();
    }
    if (has_subscribe_location()) {
      if (subscribe_location_ != NULL) subscribe_location_->::app::terminal::SubscribeLocationResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_alerts()) {
      if (alerts_ != NULL) alerts_->::app::terminal::AlertsResponse::Clear();
    }
    if (has_alert()) {
      if (alert_ != NULL) alert_->::app::terminal::AlertResponse::Clear();
    }
    if (has_history_alerts()) {
      if (history_alerts_ != NULL) history_alerts_->::app::terminal::HistoryAlertsResponse::Clear();
    }
    if (has_history_alert()) {
      if (history_alert_ != NULL) history_alert_->::app::terminal::HistoryAlertResponse::Clear();
    }
    if (has_history_alert_message()) {
      if (history_alert_message_ != NULL) history_alert_message_->::app::terminal::HistoryAlertMessageResponse::Clear();
    }
    if (has_accounts()) {
      if (accounts_ != NULL) accounts_->::app::terminal::AccountsResponse::Clear();
    }
    if (has_account()) {
      if (account_ != NULL) account_->::app::terminal::AccountResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_response;
        break;
      }

      // required bool last_response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_response_)));
          set_has_last_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_error_describe;
        break;
      }

      // optional bytes error_describe = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_describe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_login;
        break;
      }

      // optional .app.terminal.LoginResponse login = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_groups;
        break;
      }

      // optional .app.terminal.GroupsResponse groups = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_group_participants;
        break;
      }

      // optional .app.terminal.GroupParticipantsResponse group_participants = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_participants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_participants()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_group_message;
        break;
      }

      // optional .app.terminal.MediaMessageResponse group_message = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_subscribe_location;
        break;
      }

      // optional .app.terminal.SubscribeLocationResponse subscribe_location = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscribe_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscribe_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_alerts;
        break;
      }

      // optional .app.terminal.AlertsResponse alerts = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alerts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alerts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_alert;
        break;
      }

      // optional .app.terminal.AlertResponse alert = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_history_alerts;
        break;
      }

      // optional .app.terminal.HistoryAlertsResponse history_alerts = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_alerts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_alerts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_history_alert;
        break;
      }

      // optional .app.terminal.HistoryAlertResponse history_alert = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_history_alert_message;
        break;
      }

      // optional .app.terminal.HistoryAlertMessageResponse history_alert_message = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_alert_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_alert_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_accounts;
        break;
      }

      // optional .app.terminal.AccountsResponse accounts = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accounts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_account;
        break;
      }

      // optional .app.terminal.AccountResponse account = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // required bool last_response = 2;
  if (has_last_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->last_response(), output);
  }

  // optional bytes error_describe = 3;
  if (has_error_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->error_describe(), output);
  }

  // optional .app.terminal.LoginResponse login = 4;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->login(), output);
  }

  // optional .app.terminal.GroupsResponse groups = 5;
  if (has_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->groups(), output);
  }

  // optional .app.terminal.GroupParticipantsResponse group_participants = 6;
  if (has_group_participants()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->group_participants(), output);
  }

  // optional .app.terminal.MediaMessageResponse group_message = 7;
  if (has_group_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->group_message(), output);
  }

  // optional .app.terminal.SubscribeLocationResponse subscribe_location = 8;
  if (has_subscribe_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->subscribe_location(), output);
  }

  // optional .app.terminal.AlertsResponse alerts = 9;
  if (has_alerts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->alerts(), output);
  }

  // optional .app.terminal.AlertResponse alert = 10;
  if (has_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->alert(), output);
  }

  // optional .app.terminal.HistoryAlertsResponse history_alerts = 11;
  if (has_history_alerts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->history_alerts(), output);
  }

  // optional .app.terminal.HistoryAlertResponse history_alert = 12;
  if (has_history_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->history_alert(), output);
  }

  // optional .app.terminal.HistoryAlertMessageResponse history_alert_message = 13;
  if (has_history_alert_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->history_alert_message(), output);
  }

  // optional .app.terminal.AccountsResponse accounts = 14;
  if (has_accounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->accounts(), output);
  }

  // optional .app.terminal.AccountResponse account = 15;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // required bool last_response = 2;
  if (has_last_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->last_response(), target);
  }

  // optional bytes error_describe = 3;
  if (has_error_describe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->error_describe(), target);
  }

  // optional .app.terminal.LoginResponse login = 4;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->login(), target);
  }

  // optional .app.terminal.GroupsResponse groups = 5;
  if (has_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->groups(), target);
  }

  // optional .app.terminal.GroupParticipantsResponse group_participants = 6;
  if (has_group_participants()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->group_participants(), target);
  }

  // optional .app.terminal.MediaMessageResponse group_message = 7;
  if (has_group_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->group_message(), target);
  }

  // optional .app.terminal.SubscribeLocationResponse subscribe_location = 8;
  if (has_subscribe_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->subscribe_location(), target);
  }

  // optional .app.terminal.AlertsResponse alerts = 9;
  if (has_alerts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->alerts(), target);
  }

  // optional .app.terminal.AlertResponse alert = 10;
  if (has_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->alert(), target);
  }

  // optional .app.terminal.HistoryAlertsResponse history_alerts = 11;
  if (has_history_alerts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->history_alerts(), target);
  }

  // optional .app.terminal.HistoryAlertResponse history_alert = 12;
  if (has_history_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->history_alert(), target);
  }

  // optional .app.terminal.HistoryAlertMessageResponse history_alert_message = 13;
  if (has_history_alert_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->history_alert_message(), target);
  }

  // optional .app.terminal.AccountsResponse accounts = 14;
  if (has_accounts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->accounts(), target);
  }

  // optional .app.terminal.AccountResponse account = 15;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // required bool last_response = 2;
    if (has_last_response()) {
      total_size += 1 + 1;
    }

    // optional bytes error_describe = 3;
    if (has_error_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->error_describe());
    }

    // optional .app.terminal.LoginResponse login = 4;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

    // optional .app.terminal.GroupsResponse groups = 5;
    if (has_groups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groups());
    }

    // optional .app.terminal.GroupParticipantsResponse group_participants = 6;
    if (has_group_participants()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_participants());
    }

    // optional .app.terminal.MediaMessageResponse group_message = 7;
    if (has_group_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_message());
    }

    // optional .app.terminal.SubscribeLocationResponse subscribe_location = 8;
    if (has_subscribe_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscribe_location());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .app.terminal.AlertsResponse alerts = 9;
    if (has_alerts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alerts());
    }

    // optional .app.terminal.AlertResponse alert = 10;
    if (has_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert());
    }

    // optional .app.terminal.HistoryAlertsResponse history_alerts = 11;
    if (has_history_alerts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_alerts());
    }

    // optional .app.terminal.HistoryAlertResponse history_alert = 12;
    if (has_history_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_alert());
    }

    // optional .app.terminal.HistoryAlertMessageResponse history_alert_message = 13;
    if (has_history_alert_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_alert_message());
    }

    // optional .app.terminal.AccountsResponse accounts = 14;
    if (has_accounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accounts());
    }

    // optional .app.terminal.AccountResponse account = 15;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_last_response()) {
      set_last_response(from.last_response());
    }
    if (from.has_error_describe()) {
      set_error_describe(from.error_describe());
    }
    if (from.has_login()) {
      mutable_login()->::app::terminal::LoginResponse::MergeFrom(from.login());
    }
    if (from.has_groups()) {
      mutable_groups()->::app::terminal::GroupsResponse::MergeFrom(from.groups());
    }
    if (from.has_group_participants()) {
      mutable_group_participants()->::app::terminal::GroupParticipantsResponse::MergeFrom(from.group_participants());
    }
    if (from.has_group_message()) {
      mutable_group_message()->::app::terminal::MediaMessageResponse::MergeFrom(from.group_message());
    }
    if (from.has_subscribe_location()) {
      mutable_subscribe_location()->::app::terminal::SubscribeLocationResponse::MergeFrom(from.subscribe_location());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_alerts()) {
      mutable_alerts()->::app::terminal::AlertsResponse::MergeFrom(from.alerts());
    }
    if (from.has_alert()) {
      mutable_alert()->::app::terminal::AlertResponse::MergeFrom(from.alert());
    }
    if (from.has_history_alerts()) {
      mutable_history_alerts()->::app::terminal::HistoryAlertsResponse::MergeFrom(from.history_alerts());
    }
    if (from.has_history_alert()) {
      mutable_history_alert()->::app::terminal::HistoryAlertResponse::MergeFrom(from.history_alert());
    }
    if (from.has_history_alert_message()) {
      mutable_history_alert_message()->::app::terminal::HistoryAlertMessageResponse::MergeFrom(from.history_alert_message());
    }
    if (from.has_accounts()) {
      mutable_accounts()->::app::terminal::AccountsResponse::MergeFrom(from.accounts());
    }
    if (from.has_account()) {
      mutable_account()->::app::terminal::AccountResponse::MergeFrom(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_login()) {
    if (!this->login().IsInitialized()) return false;
  }
  if (has_groups()) {
    if (!this->groups().IsInitialized()) return false;
  }
  if (has_group_participants()) {
    if (!this->group_participants().IsInitialized()) return false;
  }
  if (has_group_message()) {
    if (!this->group_message().IsInitialized()) return false;
  }
  if (has_subscribe_location()) {
    if (!this->subscribe_location().IsInitialized()) return false;
  }
  if (has_alerts()) {
    if (!this->alerts().IsInitialized()) return false;
  }
  if (has_alert()) {
    if (!this->alert().IsInitialized()) return false;
  }
  if (has_history_alerts()) {
    if (!this->history_alerts().IsInitialized()) return false;
  }
  if (has_history_alert()) {
    if (!this->history_alert().IsInitialized()) return false;
  }
  if (has_history_alert_message()) {
    if (!this->history_alert_message().IsInitialized()) return false;
  }
  if (has_account()) {
    if (!this->account().IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(last_response_, other->last_response_);
    std::swap(error_describe_, other->error_describe_);
    std::swap(login_, other->login_);
    std::swap(groups_, other->groups_);
    std::swap(group_participants_, other->group_participants_);
    std::swap(group_message_, other->group_message_);
    std::swap(subscribe_location_, other->subscribe_location_);
    std::swap(alerts_, other->alerts_);
    std::swap(alert_, other->alert_);
    std::swap(history_alerts_, other->history_alerts_);
    std::swap(history_alert_, other->history_alert_);
    std::swap(history_alert_message_, other->history_alert_message_);
    std::swap(accounts_, other->accounts_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Indication::kRegisterStatusFieldNumber;
const int Indication::kJoinedGroupFieldNumber;
const int Indication::kLeaveGroupFieldNumber;
const int Indication::kOthersJoinedGroupFieldNumber;
const int Indication::kOthersLeaveGroupFieldNumber;
const int Indication::kGroupMessageFieldNumber;
const int Indication::kSessionStatusFieldNumber;
const int Indication::kLocationFieldNumber;
const int Indication::kAlertCreateFieldNumber;
const int Indication::kAlertModifyFieldNumber;
const int Indication::kAlertOveredFieldNumber;
#endif  // !_MSC_VER

Indication::Indication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Indication::InitAsDefaultInstance() {
  register_status_ = const_cast< ::app::terminal::RegisterStatusNotification*>(&::app::terminal::RegisterStatusNotification::default_instance());
  joined_group_ = const_cast< ::app::terminal::JoinedGroupNotification*>(&::app::terminal::JoinedGroupNotification::default_instance());
  leave_group_ = const_cast< ::app::terminal::LeaveGroupNotification*>(&::app::terminal::LeaveGroupNotification::default_instance());
  others_joined_group_ = const_cast< ::app::terminal::OthersJoinedGroupNotification*>(&::app::terminal::OthersJoinedGroupNotification::default_instance());
  others_leave_group_ = const_cast< ::app::terminal::OthersLeaveGroupNotification*>(&::app::terminal::OthersLeaveGroupNotification::default_instance());
  group_message_ = const_cast< ::app::terminal::MediaMessageNotification*>(&::app::terminal::MediaMessageNotification::default_instance());
  session_status_ = const_cast< ::app::terminal::SessionStatusNotification*>(&::app::terminal::SessionStatusNotification::default_instance());
  location_ = const_cast< ::app::terminal::LocationNotification*>(&::app::terminal::LocationNotification::default_instance());
  alert_create_ = const_cast< ::app::terminal::AlertCreateNotification*>(&::app::terminal::AlertCreateNotification::default_instance());
  alert_modify_ = const_cast< ::app::terminal::AlertModifyNotification*>(&::app::terminal::AlertModifyNotification::default_instance());
  alert_overed_ = const_cast< ::app::terminal::AlertOveredNotification*>(&::app::terminal::AlertOveredNotification::default_instance());
}

Indication::Indication(const Indication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Indication::SharedCtor() {
  _cached_size_ = 0;
  register_status_ = NULL;
  joined_group_ = NULL;
  leave_group_ = NULL;
  others_joined_group_ = NULL;
  others_leave_group_ = NULL;
  group_message_ = NULL;
  session_status_ = NULL;
  location_ = NULL;
  alert_create_ = NULL;
  alert_modify_ = NULL;
  alert_overed_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Indication::~Indication() {
  SharedDtor();
}

void Indication::SharedDtor() {
  if (this != default_instance_) {
    delete register_status_;
    delete joined_group_;
    delete leave_group_;
    delete others_joined_group_;
    delete others_leave_group_;
    delete group_message_;
    delete session_status_;
    delete location_;
    delete alert_create_;
    delete alert_modify_;
    delete alert_overed_;
  }
}

void Indication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Indication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Indication_descriptor_;
}

const Indication& Indication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

Indication* Indication::default_instance_ = NULL;

Indication* Indication::New() const {
  return new Indication;
}

void Indication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_register_status()) {
      if (register_status_ != NULL) register_status_->::app::terminal::RegisterStatusNotification::Clear();
    }
    if (has_joined_group()) {
      if (joined_group_ != NULL) joined_group_->::app::terminal::JoinedGroupNotification::Clear();
    }
    if (has_leave_group()) {
      if (leave_group_ != NULL) leave_group_->::app::terminal::LeaveGroupNotification::Clear();
    }
    if (has_others_joined_group()) {
      if (others_joined_group_ != NULL) others_joined_group_->::app::terminal::OthersJoinedGroupNotification::Clear();
    }
    if (has_others_leave_group()) {
      if (others_leave_group_ != NULL) others_leave_group_->::app::terminal::OthersLeaveGroupNotification::Clear();
    }
    if (has_group_message()) {
      if (group_message_ != NULL) group_message_->::app::terminal::MediaMessageNotification::Clear();
    }
    if (has_session_status()) {
      if (session_status_ != NULL) session_status_->::app::terminal::SessionStatusNotification::Clear();
    }
    if (has_location()) {
      if (location_ != NULL) location_->::app::terminal::LocationNotification::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_alert_create()) {
      if (alert_create_ != NULL) alert_create_->::app::terminal::AlertCreateNotification::Clear();
    }
    if (has_alert_modify()) {
      if (alert_modify_ != NULL) alert_modify_->::app::terminal::AlertModifyNotification::Clear();
    }
    if (has_alert_overed()) {
      if (alert_overed_ != NULL) alert_overed_->::app::terminal::AlertOveredNotification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Indication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.terminal.RegisterStatusNotification register_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_joined_group;
        break;
      }

      // optional .app.terminal.JoinedGroupNotification joined_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_joined_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joined_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leave_group;
        break;
      }

      // optional .app.terminal.LeaveGroupNotification leave_group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leave_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leave_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_others_joined_group;
        break;
      }

      // optional .app.terminal.OthersJoinedGroupNotification others_joined_group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_others_joined_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_others_joined_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_others_leave_group;
        break;
      }

      // optional .app.terminal.OthersLeaveGroupNotification others_leave_group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_others_leave_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_others_leave_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_group_message;
        break;
      }

      // optional .app.terminal.MediaMessageNotification group_message = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_session_status;
        break;
      }

      // optional .app.terminal.SessionStatusNotification session_status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_location;
        break;
      }

      // optional .app.terminal.LocationNotification location = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_alert_create;
        break;
      }

      // optional .app.terminal.AlertCreateNotification alert_create = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alert_create:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert_create()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_alert_modify;
        break;
      }

      // optional .app.terminal.AlertModifyNotification alert_modify = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alert_modify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert_modify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_alert_overed;
        break;
      }

      // optional .app.terminal.AlertOveredNotification alert_overed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alert_overed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert_overed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Indication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.terminal.RegisterStatusNotification register_status = 1;
  if (has_register_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->register_status(), output);
  }

  // optional .app.terminal.JoinedGroupNotification joined_group = 2;
  if (has_joined_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->joined_group(), output);
  }

  // optional .app.terminal.LeaveGroupNotification leave_group = 3;
  if (has_leave_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leave_group(), output);
  }

  // optional .app.terminal.OthersJoinedGroupNotification others_joined_group = 4;
  if (has_others_joined_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->others_joined_group(), output);
  }

  // optional .app.terminal.OthersLeaveGroupNotification others_leave_group = 5;
  if (has_others_leave_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->others_leave_group(), output);
  }

  // optional .app.terminal.MediaMessageNotification group_message = 6;
  if (has_group_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->group_message(), output);
  }

  // optional .app.terminal.SessionStatusNotification session_status = 7;
  if (has_session_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->session_status(), output);
  }

  // optional .app.terminal.LocationNotification location = 8;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->location(), output);
  }

  // optional .app.terminal.AlertCreateNotification alert_create = 9;
  if (has_alert_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->alert_create(), output);
  }

  // optional .app.terminal.AlertModifyNotification alert_modify = 10;
  if (has_alert_modify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->alert_modify(), output);
  }

  // optional .app.terminal.AlertOveredNotification alert_overed = 11;
  if (has_alert_overed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->alert_overed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Indication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.terminal.RegisterStatusNotification register_status = 1;
  if (has_register_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->register_status(), target);
  }

  // optional .app.terminal.JoinedGroupNotification joined_group = 2;
  if (has_joined_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->joined_group(), target);
  }

  // optional .app.terminal.LeaveGroupNotification leave_group = 3;
  if (has_leave_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leave_group(), target);
  }

  // optional .app.terminal.OthersJoinedGroupNotification others_joined_group = 4;
  if (has_others_joined_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->others_joined_group(), target);
  }

  // optional .app.terminal.OthersLeaveGroupNotification others_leave_group = 5;
  if (has_others_leave_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->others_leave_group(), target);
  }

  // optional .app.terminal.MediaMessageNotification group_message = 6;
  if (has_group_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->group_message(), target);
  }

  // optional .app.terminal.SessionStatusNotification session_status = 7;
  if (has_session_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->session_status(), target);
  }

  // optional .app.terminal.LocationNotification location = 8;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->location(), target);
  }

  // optional .app.terminal.AlertCreateNotification alert_create = 9;
  if (has_alert_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->alert_create(), target);
  }

  // optional .app.terminal.AlertModifyNotification alert_modify = 10;
  if (has_alert_modify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->alert_modify(), target);
  }

  // optional .app.terminal.AlertOveredNotification alert_overed = 11;
  if (has_alert_overed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->alert_overed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Indication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.terminal.RegisterStatusNotification register_status = 1;
    if (has_register_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_status());
    }

    // optional .app.terminal.JoinedGroupNotification joined_group = 2;
    if (has_joined_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->joined_group());
    }

    // optional .app.terminal.LeaveGroupNotification leave_group = 3;
    if (has_leave_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leave_group());
    }

    // optional .app.terminal.OthersJoinedGroupNotification others_joined_group = 4;
    if (has_others_joined_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->others_joined_group());
    }

    // optional .app.terminal.OthersLeaveGroupNotification others_leave_group = 5;
    if (has_others_leave_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->others_leave_group());
    }

    // optional .app.terminal.MediaMessageNotification group_message = 6;
    if (has_group_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_message());
    }

    // optional .app.terminal.SessionStatusNotification session_status = 7;
    if (has_session_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_status());
    }

    // optional .app.terminal.LocationNotification location = 8;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .app.terminal.AlertCreateNotification alert_create = 9;
    if (has_alert_create()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert_create());
    }

    // optional .app.terminal.AlertModifyNotification alert_modify = 10;
    if (has_alert_modify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert_modify());
    }

    // optional .app.terminal.AlertOveredNotification alert_overed = 11;
    if (has_alert_overed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert_overed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Indication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Indication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Indication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Indication::MergeFrom(const Indication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_register_status()) {
      mutable_register_status()->::app::terminal::RegisterStatusNotification::MergeFrom(from.register_status());
    }
    if (from.has_joined_group()) {
      mutable_joined_group()->::app::terminal::JoinedGroupNotification::MergeFrom(from.joined_group());
    }
    if (from.has_leave_group()) {
      mutable_leave_group()->::app::terminal::LeaveGroupNotification::MergeFrom(from.leave_group());
    }
    if (from.has_others_joined_group()) {
      mutable_others_joined_group()->::app::terminal::OthersJoinedGroupNotification::MergeFrom(from.others_joined_group());
    }
    if (from.has_others_leave_group()) {
      mutable_others_leave_group()->::app::terminal::OthersLeaveGroupNotification::MergeFrom(from.others_leave_group());
    }
    if (from.has_group_message()) {
      mutable_group_message()->::app::terminal::MediaMessageNotification::MergeFrom(from.group_message());
    }
    if (from.has_session_status()) {
      mutable_session_status()->::app::terminal::SessionStatusNotification::MergeFrom(from.session_status());
    }
    if (from.has_location()) {
      mutable_location()->::app::terminal::LocationNotification::MergeFrom(from.location());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_alert_create()) {
      mutable_alert_create()->::app::terminal::AlertCreateNotification::MergeFrom(from.alert_create());
    }
    if (from.has_alert_modify()) {
      mutable_alert_modify()->::app::terminal::AlertModifyNotification::MergeFrom(from.alert_modify());
    }
    if (from.has_alert_overed()) {
      mutable_alert_overed()->::app::terminal::AlertOveredNotification::MergeFrom(from.alert_overed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Indication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Indication::CopyFrom(const Indication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Indication::IsInitialized() const {

  if (has_joined_group()) {
    if (!this->joined_group().IsInitialized()) return false;
  }
  if (has_leave_group()) {
    if (!this->leave_group().IsInitialized()) return false;
  }
  if (has_others_joined_group()) {
    if (!this->others_joined_group().IsInitialized()) return false;
  }
  if (has_others_leave_group()) {
    if (!this->others_leave_group().IsInitialized()) return false;
  }
  if (has_group_message()) {
    if (!this->group_message().IsInitialized()) return false;
  }
  if (has_session_status()) {
    if (!this->session_status().IsInitialized()) return false;
  }
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_alert_create()) {
    if (!this->alert_create().IsInitialized()) return false;
  }
  if (has_alert_modify()) {
    if (!this->alert_modify().IsInitialized()) return false;
  }
  if (has_alert_overed()) {
    if (!this->alert_overed().IsInitialized()) return false;
  }
  return true;
}

void Indication::Swap(Indication* other) {
  if (other != this) {
    std::swap(register_status_, other->register_status_);
    std::swap(joined_group_, other->joined_group_);
    std::swap(leave_group_, other->leave_group_);
    std::swap(others_joined_group_, other->others_joined_group_);
    std::swap(others_leave_group_, other->others_leave_group_);
    std::swap(group_message_, other->group_message_);
    std::swap(session_status_, other->session_status_);
    std::swap(location_, other->location_);
    std::swap(alert_create_, other->alert_create_);
    std::swap(alert_modify_, other->alert_modify_);
    std::swap(alert_overed_, other->alert_overed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Indication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Indication_descriptor_;
  metadata.reflection = Indication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kMsgTypeFieldNumber;
const int Message::kSequenceFieldNumber;
const int Message::kSessionIdFieldNumber;
const int Message::kRequestFieldNumber;
const int Message::kResponseFieldNumber;
const int Message::kIndicationFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
  request_ = const_cast< ::app::terminal::Request*>(&::app::terminal::Request::default_instance());
  response_ = const_cast< ::app::terminal::Response*>(&::app::terminal::Response::default_instance());
  indication_ = const_cast< ::app::terminal::Indication*>(&::app::terminal::Indication::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 300001;
  sequence_ = 0u;
  session_id_ = 0u;
  request_ = NULL;
  response_ = NULL;
  indication_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
    delete indication_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2eterminal_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 300001;
    sequence_ = 0u;
    session_id_ = 0u;
    if (has_request()) {
      if (request_ != NULL) request_->::app::terminal::Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::app::terminal::Response::Clear();
    }
    if (has_indication()) {
      if (indication_ != NULL) indication_->::app::terminal::Indication::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .app.terminal.MSG msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::terminal::MSG_IsValid(value)) {
            set_msg_type(static_cast< ::app::terminal::MSG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sequence;
        break;
      }

      // required fixed32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_session_id;
        break;
      }

      // optional fixed32 session_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_request;
        break;
      }

      // optional .app.terminal.Request request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_response;
        break;
      }

      // optional .app.terminal.Response response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_indication;
        break;
      }

      // optional .app.terminal.Indication indication = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indication:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indication()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .app.terminal.MSG msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // required fixed32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->sequence(), output);
  }

  // optional fixed32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->session_id(), output);
  }

  // optional .app.terminal.Request request = 4;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->request(), output);
  }

  // optional .app.terminal.Response response = 5;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->response(), output);
  }

  // optional .app.terminal.Indication indication = 6;
  if (has_indication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->indication(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .app.terminal.MSG msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // required fixed32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->sequence(), target);
  }

  // optional fixed32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->session_id(), target);
  }

  // optional .app.terminal.Request request = 4;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->request(), target);
  }

  // optional .app.terminal.Response response = 5;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->response(), target);
  }

  // optional .app.terminal.Indication indication = 6;
  if (has_indication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->indication(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .app.terminal.MSG msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // required fixed32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 + 4;
    }

    // optional fixed32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 + 4;
    }

    // optional .app.terminal.Request request = 4;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .app.terminal.Response response = 5;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional .app.terminal.Indication indication = 6;
    if (has_indication()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indication());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_request()) {
      mutable_request()->::app::terminal::Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::app::terminal::Response::MergeFrom(from.response());
    }
    if (from.has_indication()) {
      mutable_indication()->::app::terminal::Indication::MergeFrom(from.indication());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_request()) {
    if (!this->request().IsInitialized()) return false;
  }
  if (has_response()) {
    if (!this->response().IsInitialized()) return false;
  }
  if (has_indication()) {
    if (!this->indication().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(sequence_, other->sequence_);
    std::swap(session_id_, other->session_id_);
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(indication_, other->indication_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace terminal
}  // namespace app

// @@protoc_insertion_point(global_scope)
